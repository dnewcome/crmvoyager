<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2012-07-30 04:45"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>CRM Voyager</title>
	<link>http://crmvoyager.wordpress.com</link>
	<description>Working daily with Microsoft CRM</description>
	<pubDate>Mon, 30 Jul 2012 04:45:36 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://crmvoyager.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>2496294</wp:author_id><wp:author_login>newcome</wp:author_login><wp:author_email>djn125@yahoo.com</wp:author_email><wp:author_display_name><![CDATA[newcome]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>

	<generator>http://wordpress.com/</generator>
<cloud domain='crmvoyager.wordpress.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>CRM Voyager</title>
		<link>http://crmvoyager.wordpress.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="http://crmvoyager.wordpress.com/osd.xml" title="CRM Voyager" />
	<atom:link rel='hub' href='http://crmvoyager.wordpress.com/?pushpress=hub'/>

	<item>
		<title>putty-crm</title>
		<link>http://crmvoyager.wordpress.com/2010/06/29/connecting-to-ms-crm-over-ssh/putty-crm/</link>
		<pubDate>Tue, 29 Jun 2010 15:28:18 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/06/putty-crm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2010-06-29 15:28:18</wp:post_date>
		<wp:post_date_gmt>2010-06-29 15:28:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>putty-crm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>57</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/06/putty-crm.png</wp:attachment_url>
	</item>
	<item>
		<title>Webpart</title>
		<link>http://crmvoyager.wordpress.com/2010/07/06/getting-started-with-asp-net-web-parts/webpart/</link>
		<pubDate>Tue, 06 Jul 2010 18:36:48 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/07/webpart.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2010-07-06 18:36:48</wp:post_date>
		<wp:post_date_gmt>2010-07-06 18:36:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webpart</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>69</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/07/webpart.png</wp:attachment_url>
	</item>
	<item>
		<title>Webparts</title>
		<link>http://crmvoyager.wordpress.com/2010/07/07/enabling-design-mode-in-asp-net-webparts/webparts/</link>
		<pubDate>Wed, 07 Jul 2010 03:37:43 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/07/webparts.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2010-07-07 03:37:43</wp:post_date>
		<wp:post_date_gmt>2010-07-07 03:37:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webparts</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/07/webparts.png</wp:attachment_url>
	</item>
	<item>
		<title>anycpu</title>
		<link>http://crmvoyager.wordpress.com/2010/07/16/net-references-not-found-in-visual-studio/anycpu/</link>
		<pubDate>Fri, 16 Jul 2010 19:30:52 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/07/anycpu.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2010-07-16 19:30:52</wp:post_date>
		<wp:post_date_gmt>2010-07-16 19:30:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>anycpu</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>121</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/07/anycpu.png</wp:attachment_url>
	</item>
	<item>
		<title>missing-reference</title>
		<link>http://crmvoyager.wordpress.com/2010/07/16/net-references-not-found-in-visual-studio/missing-reference/</link>
		<pubDate>Fri, 16 Jul 2010 19:30:53 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/07/missing-reference.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2010-07-16 19:30:53</wp:post_date>
		<wp:post_date_gmt>2010-07-16 19:30:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>missing-reference</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>121</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/07/missing-reference.png</wp:attachment_url>
	</item>
	<item>
		<title>missing-reference2</title>
		<link>http://crmvoyager.wordpress.com/2010/07/16/net-references-not-found-in-visual-studio/missing-reference2/</link>
		<pubDate>Fri, 16 Jul 2010 19:30:54 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/07/missing-reference2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2010-07-16 19:30:54</wp:post_date>
		<wp:post_date_gmt>2010-07-16 19:30:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>missing-reference2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>121</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/07/missing-reference2.png</wp:attachment_url>
	</item>
	<item>
		<title>aspx-registration</title>
		<link>http://crmvoyager.wordpress.com/2010/08/02/installing-asp-net-4-0-on-server2003iis6/aspx-registration/</link>
		<pubDate>Mon, 02 Aug 2010 16:29:08 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/08/aspx-registration.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2010-08-02 16:29:08</wp:post_date>
		<wp:post_date_gmt>2010-08-02 16:29:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aspx-registration</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>131</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/08/aspx-registration.png</wp:attachment_url>
	</item>
	<item>
		<title>set-site-4.0</title>
		<link>http://crmvoyager.wordpress.com/2010/08/02/installing-asp-net-4-0-on-server2003iis6/set-site-4-0/</link>
		<pubDate>Mon, 02 Aug 2010 16:30:38 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/08/set-site-4-0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2010-08-02 16:30:38</wp:post_date>
		<wp:post_date_gmt>2010-08-02 16:30:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>set-site-4-0</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>131</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/08/set-site-4-0.png</wp:attachment_url>
	</item>
	<item>
		<title>service-extension-4</title>
		<link>http://crmvoyager.wordpress.com/2010/08/02/installing-asp-net-4-0-on-server2003iis6/service-extension-4/</link>
		<pubDate>Mon, 02 Aug 2010 16:33:50 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/08/service-extension-4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2010-08-02 16:33:50</wp:post_date>
		<wp:post_date_gmt>2010-08-02 16:33:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>service-extension-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>131</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/08/service-extension-4.png</wp:attachment_url>
	</item>
	<item>
		<title>xap</title>
		<link>http://crmvoyager.wordpress.com/2010/10/15/whats-in-a-silverlight-xap/xap/</link>
		<pubDate>Fri, 15 Oct 2010 06:00:44 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/10/xap.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2010-10-15 06:00:44</wp:post_date>
		<wp:post_date_gmt>2010-10-15 06:00:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xap</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>225</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/10/xap.png</wp:attachment_url>
	</item>
	<item>
		<title>silverlight-project</title>
		<link>http://crmvoyager.wordpress.com/2010/10/19/silverlight-host-page-for-development-and-debugging/silverlight-project/</link>
		<pubDate>Tue, 19 Oct 2010 18:40:20 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/10/silverlight-project.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2010-10-19 18:40:20</wp:post_date>
		<wp:post_date_gmt>2010-10-19 18:40:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silverlight-project</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>234</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/10/silverlight-project.png</wp:attachment_url>
	</item>
	<item>
		<title>add-silverlight</title>
		<link>http://crmvoyager.wordpress.com/2010/10/19/silverlight-host-page-for-development-and-debugging/add-silverlight/</link>
		<pubDate>Tue, 19 Oct 2010 18:46:22 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/10/add-silverlight.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2010-10-19 18:46:22</wp:post_date>
		<wp:post_date_gmt>2010-10-19 18:46:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>add-silverlight</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>234</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/10/add-silverlight.png</wp:attachment_url>
	</item>
	<item>
		<title>propertygrideditor</title>
		<link>http://crmvoyager.wordpress.com/2010/11/16/creating-configurable-web-part-properties/propertygrideditor/</link>
		<pubDate>Tue, 16 Nov 2010 06:32:45 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/propertygrideditor.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2010-11-16 06:32:45</wp:post_date>
		<wp:post_date_gmt>2010-11-16 06:32:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>propertygrideditor</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>253</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/propertygrideditor.jpg</wp:attachment_url>
	</item>
	<item>
		<title>visual-studio-properties</title>
		<link>http://crmvoyager.wordpress.com/2010/11/19/deploying-web-parts-to-microsoft-sharepoint/visual-studio-properties/</link>
		<pubDate>Fri, 19 Nov 2010 09:05:44 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/visual-studio-properties.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2010-11-19 09:05:44</wp:post_date>
		<wp:post_date_gmt>2010-11-19 09:05:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-properties</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>265</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/visual-studio-properties.png</wp:attachment_url>
	</item>
	<item>
		<title>visual-studio-package</title>
		<link>http://crmvoyager.wordpress.com/2010/11/19/deploying-web-parts-to-microsoft-sharepoint/visual-studio-package/</link>
		<pubDate>Fri, 19 Nov 2010 09:13:24 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/visual-studio-package.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2010-11-19 09:13:24</wp:post_date>
		<wp:post_date_gmt>2010-11-19 09:13:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-package</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>265</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/visual-studio-package.png</wp:attachment_url>
	</item>
	<item>
		<title>central-admin</title>
		<link>http://crmvoyager.wordpress.com/2010/11/19/deploying-web-parts-to-microsoft-sharepoint/central-admin/</link>
		<pubDate>Fri, 19 Nov 2010 09:18:03 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/central-admin.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2010-11-19 09:18:03</wp:post_date>
		<wp:post_date_gmt>2010-11-19 09:18:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>central-admin</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>265</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/central-admin.png</wp:attachment_url>
	</item>
	<item>
		<title>vs-sandboxed</title>
		<link>http://crmvoyager.wordpress.com/?attachment_id=286</link>
		<pubDate>Fri, 19 Nov 2010 21:48:30 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/vs-sandboxed.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date>2010-11-19 21:48:30</wp:post_date>
		<wp:post_date_gmt>2010-11-19 21:48:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vs-sandboxed</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>284</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/vs-sandboxed.png</wp:attachment_url>
	</item>
	<item>
		<title>central-admin-services</title>
		<link>http://crmvoyager.wordpress.com/2010/11/25/enabling-user-sandboxed-code-in-sharepoint-2010/central-admin-services/</link>
		<pubDate>Thu, 25 Nov 2010 02:09:38 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/central-admin-services.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date>2010-11-25 02:09:38</wp:post_date>
		<wp:post_date_gmt>2010-11-25 02:09:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>central-admin-services</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>298</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/central-admin-services.png</wp:attachment_url>
	</item>
	<item>
		<title>UC-service</title>
		<link>http://crmvoyager.wordpress.com/2010/11/25/enabling-user-sandboxed-code-in-sharepoint-2010/uc-service/</link>
		<pubDate>Thu, 25 Nov 2010 02:13:17 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/uc-service.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date>2010-11-25 02:13:17</wp:post_date>
		<wp:post_date_gmt>2010-11-25 02:13:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uc-service</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>298</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/uc-service.png</wp:attachment_url>
	</item>
	<item>
		<title>processes</title>
		<link>http://crmvoyager.wordpress.com/2010/11/25/enabling-user-sandboxed-code-in-sharepoint-2010/processes/</link>
		<pubDate>Thu, 25 Nov 2010 02:13:32 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/processes.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2010-11-25 02:13:32</wp:post_date>
		<wp:post_date_gmt>2010-11-25 02:13:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>processes</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>298</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/processes.png</wp:attachment_url>
	</item>
	<item>
		<title>solution</title>
		<link>http://crmvoyager.wordpress.com/2010/11/25/sharepoint-2010-web-parts-vs-visual-web-parts/solution/</link>
		<pubDate>Thu, 25 Nov 2010 02:31:29 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/11/solution.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2010-11-25 02:31:29</wp:post_date>
		<wp:post_date_gmt>2010-11-25 02:31:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>solution</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>305</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/11/solution.png</wp:attachment_url>
	</item>
	<item>
		<title>warningmessage</title>
		<link>http://crmvoyager.wordpress.com/2010/12/02/attaching-visual-studio-as-a-silverlight-debugger/warningmessage/</link>
		<pubDate>Thu, 02 Dec 2010 07:40:19 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/12/warningmessage.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2010-12-02 07:40:19</wp:post_date>
		<wp:post_date_gmt>2010-12-02 07:40:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>warningmessage</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/12/warningmessage.png</wp:attachment_url>
	</item>
	<item>
		<title>scriptdebugging</title>
		<link>http://crmvoyager.wordpress.com/2010/12/02/attaching-visual-studio-as-a-silverlight-debugger/scriptdebugging/</link>
		<pubDate>Thu, 02 Dec 2010 07:43:04 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/12/scriptdebugging.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2010-12-02 07:43:04</wp:post_date>
		<wp:post_date_gmt>2010-12-02 07:43:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scriptdebugging</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/12/scriptdebugging.png</wp:attachment_url>
	</item>
	<item>
		<title>hostproject</title>
		<link>http://crmvoyager.wordpress.com/2010/12/02/attaching-visual-studio-as-a-silverlight-debugger/hostproject/</link>
		<pubDate>Thu, 02 Dec 2010 07:43:19 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/12/hostproject.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2010-12-02 07:43:19</wp:post_date>
		<wp:post_date_gmt>2010-12-02 07:43:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hostproject</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>315</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/12/hostproject.png</wp:attachment_url>
	</item>
	<item>
		<title>silverlight-sharepoint-debug</title>
		<link>http://crmvoyager.wordpress.com/2010/12/06/full-stack-sharepoint-silverlight-debugging-with-visual-studio-2010/silverlight-sharepoint-debug/</link>
		<pubDate>Mon, 06 Dec 2010 22:27:44 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2010/12/silverlight-sharepoint-debug.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2010-12-06 22:27:44</wp:post_date>
		<wp:post_date_gmt>2010-12-06 22:27:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silverlight-sharepoint-debug</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>339</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2010/12/silverlight-sharepoint-debug.jpg</wp:attachment_url>
	</item>
	<item>
		<title>registry</title>
		<link>http://crmvoyager.wordpress.com/2011/01/14/how-to-enable-trace-logging-in-microsoft-crm-2011/registry/</link>
		<pubDate>Sat, 15 Jan 2011 06:59:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/registry.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>370</wp:post_id>
		<wp:post_date>2011-01-14 22:59:00</wp:post_date>
		<wp:post_date_gmt>2011-01-15 06:59:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>registry</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>369</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/registry.png</wp:attachment_url>
	</item>
	<item>
		<title>sl4tools-install</title>
		<link>http://crmvoyager.wordpress.com/2011/01/16/setting-up-a-silverlight-4-development-environment/sl4tools-install/</link>
		<pubDate>Mon, 17 Jan 2011 03:31:39 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/sl4tools-install.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date>2011-01-16 19:31:39</wp:post_date>
		<wp:post_date_gmt>2011-01-17 03:31:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sl4tools-install</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>373</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/sl4tools-install.png</wp:attachment_url>
	</item>
	<item>
		<title>sl4-developer-install</title>
		<link>http://crmvoyager.wordpress.com/2011/01/16/setting-up-a-silverlight-4-development-environment/sl4-developer-install/</link>
		<pubDate>Mon, 17 Jan 2011 03:47:12 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/sl4-developer-install.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date>2011-01-16 19:47:12</wp:post_date>
		<wp:post_date_gmt>2011-01-17 03:47:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sl4-developer-install</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>373</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/sl4-developer-install.png</wp:attachment_url>
	</item>
	<item>
		<title>new-sl-project</title>
		<link>http://crmvoyager.wordpress.com/2011/01/16/setting-up-a-silverlight-4-development-environment/new-sl-project/</link>
		<pubDate>Mon, 17 Jan 2011 03:49:04 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/new-sl-project.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date>2011-01-16 19:49:04</wp:post_date>
		<wp:post_date_gmt>2011-01-17 03:49:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-sl-project</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>373</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/new-sl-project.png</wp:attachment_url>
	</item>
	<item>
		<title>new-sl4-app</title>
		<link>http://crmvoyager.wordpress.com/2011/01/16/setting-up-a-silverlight-4-development-environment/new-sl4-app/</link>
		<pubDate>Mon, 17 Jan 2011 03:50:10 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/new-sl4-app.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date>2011-01-16 19:50:10</wp:post_date>
		<wp:post_date_gmt>2011-01-17 03:50:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-sl4-app</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>373</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/new-sl4-app.png</wp:attachment_url>
	</item>
	<item>
		<title>filter</title>
		<link>http://crmvoyager.wordpress.com/?attachment_id=389</link>
		<pubDate>Thu, 27 Jan 2011 23:33:40 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/filter.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>389</wp:post_id>
		<wp:post_date>2011-01-27 15:33:40</wp:post_date>
		<wp:post_date_gmt>2011-01-27 23:33:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>filter</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>385</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/filter.png</wp:attachment_url>
	</item>
	<item>
		<title>result</title>
		<link>http://crmvoyager.wordpress.com/?attachment_id=390</link>
		<pubDate>Thu, 27 Jan 2011 23:33:42 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/result.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2011-01-27 15:33:42</wp:post_date>
		<wp:post_date_gmt>2011-01-27 23:33:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>result</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>385</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/result.png</wp:attachment_url>
	</item>
	<item>
		<title>trace-properties</title>
		<link>http://crmvoyager.wordpress.com/?attachment_id=391</link>
		<pubDate>Thu, 27 Jan 2011 23:33:44 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/01/trace-properties.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2011-01-27 15:33:44</wp:post_date>
		<wp:post_date_gmt>2011-01-27 23:33:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trace-properties</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>385</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/01/trace-properties.png</wp:attachment_url>
	</item>
	<item>
		<title>ami</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/ami/</link>
		<pubDate>Sun, 13 Feb 2011 04:19:36 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/ami.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date>2011-02-12 20:19:36</wp:post_date>
		<wp:post_date_gmt>2011-02-13 04:19:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ami</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/ami.png</wp:attachment_url>
	</item>
	<item>
		<title>sql-default-install</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/sql-default-install/</link>
		<pubDate>Sun, 13 Feb 2011 04:29:43 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/sql-default-install.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date>2011-02-12 20:29:43</wp:post_date>
		<wp:post_date_gmt>2011-02-13 04:29:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sql-default-install</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/sql-default-install.png</wp:attachment_url>
	</item>
	<item>
		<title>webserver-role</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/webserver-role/</link>
		<pubDate>Sun, 13 Feb 2011 04:31:16 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/webserver-role.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date>2011-02-12 20:31:16</wp:post_date>
		<wp:post_date_gmt>2011-02-13 04:31:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webserver-role</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/webserver-role.png</wp:attachment_url>
	</item>
	<item>
		<title>asp.net</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/asp-net/</link>
		<pubDate>Sun, 13 Feb 2011 04:31:41 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/asp-net.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2011-02-12 20:31:41</wp:post_date>
		<wp:post_date_gmt>2011-02-13 04:31:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asp-net</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/asp-net.png</wp:attachment_url>
	</item>
	<item>
		<title>sqlserver-user</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/sqlserver-user/</link>
		<pubDate>Sun, 13 Feb 2011 04:33:45 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/sqlserver-user.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2011-02-12 20:33:45</wp:post_date>
		<wp:post_date_gmt>2011-02-13 04:33:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sqlserver-user</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/sqlserver-user.png</wp:attachment_url>
	</item>
	<item>
		<title>sqlserver-account</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/sqlserver-account/</link>
		<pubDate>Sun, 13 Feb 2011 04:34:49 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/sqlserver-account.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>422</wp:post_id>
		<wp:post_date>2011-02-12 20:34:49</wp:post_date>
		<wp:post_date_gmt>2011-02-13 04:34:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sqlserver-account</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/sqlserver-account.png</wp:attachment_url>
	</item>
	<item>
		<title>orgname</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/orgname/</link>
		<pubDate>Sun, 13 Feb 2011 07:48:26 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/orgname.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date>2011-02-12 23:48:26</wp:post_date>
		<wp:post_date_gmt>2011-02-13 07:48:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>orgname</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/orgname.png</wp:attachment_url>
	</item>
	<item>
		<title>About</title>
		<link>http://crmvoyager.wordpress.com/about/</link>
		<pubDate>Tue, 20 Apr 2010 17:51:12 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false"></guid>
		<description></description>
		<content:encoded><![CDATA[CRM Voyager is a blog dedicated to developing solutions using Microsoft Dynamics CRM, published by Dan Newcome. You should follow me on twitter <a href="http://twitter.com/dnewcome">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-04-20 17:51:12</wp:post_date>
		<wp:post_date_gmt>2010-04-20 17:51:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Serializing .net lists to XML</title>
		<link>http://crmvoyager.wordpress.com/?p=41</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2010-05-21 00:10:21</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dealing with CRM Picklists in code</title>
		<link>http://crmvoyager.wordpress.com/?p=160</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[In Microsoft CRM, picklists are fields which allow only a predefined set of values to be chosen. Under the hood, these are actually integral types. The value stored in the database is an integer, not the corresponding text value. This presents a special problem when working with picklists in code as we don't have a way of getting the 'friendly' text value unless we resort to the metdata API (which requires a different permission level, granting of which might be client-dependent).

So, we could use the metadata api, but what I do most of the time is define an enum in the code and cast the picklist value to an instance of the enum type. This unfortunately means that we have to keep the enum in sync with any changes in the CRM configuration, but at least we don't have to worry about the user not having permissions to the metadata API.

Of note is that the CRM implementation of picklists uses zero as an 'undefined' value. That is, if a field is not required, and is not set when the entity instance is created, the value returned is zero. However, zero is not a valid value for setting the property. When defining the enum type, we'll want to take this into account.

[sourcecode language="csharp"]
enum PickValue {
    Default = 0,
    First = 1,
    Second = 2
}
[/sourcecode]

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2010-08-24 18:59:02</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New CRM dynamic entities</title>
		<link>http://crmvoyager.wordpress.com/?p=188</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[The new Dynamic entity in crm isn't really any more dynamic than the previous incarnation.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2010-10-06 17:12:17</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Consuming Web services in Silverlight</title>
		<link>http://crmvoyager.wordpress.com/?p=210</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to cover a few things I've learned recently when dealing with consuming data from Web services in Silverlight. In the Microsoft .NET framework, most services are consumed with the use of a helper proxy that is generated by the framework using tools such as wsdl.exe or through Visual Studio (which probably uses wsdl.exe or the underlying code to perform the task). In Silverlight, we have a new tool called svcutil.exe that generates the proxy. When we add a service reference in Visual Studio for a Silverlight project, a different kind of proxy is generated with some fundamental differences from what we are used to.

The biggest difference is that synchronous calls are not supported. This means that the service proxy only contains async methods. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2010-10-13 19:51:58</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hosting Web services under SharePoint 2010</title>
		<link>http://crmvoyager.wordpress.com/?p=223</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2010-10-15 05:14:41</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>service accounts</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/service-accounts/</link>
		<pubDate>Sun, 13 Feb 2011 07:48:51 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/service-accounts.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date>2011-02-12 23:48:51</wp:post_date>
		<wp:post_date_gmt>2011-02-13 07:48:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>service-accounts</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/service-accounts.png</wp:attachment_url>
	</item>
	<item>
		<title>newdomain</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/newdomain/</link>
		<pubDate>Sun, 13 Feb 2011 07:54:24 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/newdomain.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date>2011-02-12 23:54:24</wp:post_date>
		<wp:post_date_gmt>2011-02-13 07:54:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>newdomain</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/newdomain.png</wp:attachment_url>
	</item>
	<item>
		<title>domain name</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/domain-name/</link>
		<pubDate>Sun, 13 Feb 2011 07:54:39 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/domain-name.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>434</wp:post_id>
		<wp:post_date>2011-02-12 23:54:39</wp:post_date>
		<wp:post_date_gmt>2011-02-13 07:54:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>domain-name</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/domain-name.png</wp:attachment_url>
	</item>
	<item>
		<title>ec2-setname</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/ec2-setname/</link>
		<pubDate>Sun, 27 Feb 2011 22:42:57 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/02/ec2-setname.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date>2011-02-27 14:42:57</wp:post_date>
		<wp:post_date_gmt>2011-02-27 22:42:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ec2-setname</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>403</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/02/ec2-setname.png</wp:attachment_url>
	</item>
	<item>
		<title>sc-webpart</title>
		<link>http://crmvoyager.wordpress.com/2011/04/01/using-asp-net-web-parts-in-sitecore-cms/sc-webpart/</link>
		<pubDate>Sat, 02 Apr 2011 02:05:27 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/04/sc-webpart.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>476</wp:post_id>
		<wp:post_date>2011-04-01 18:05:27</wp:post_date>
		<wp:post_date_gmt>2011-04-02 02:05:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sc-webpart</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>469</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/04/sc-webpart.jpg</wp:attachment_url>
	</item>
	<item>
		<title>sqlsserver</title>
		<link>http://crmvoyager.wordpress.com/2011/04/26/starting-sql-server-2008-in-single-user-mode/sqlsserver/</link>
		<pubDate>Tue, 26 Apr 2011 07:53:50 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/04/sqlsserver.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date>2011-04-25 23:53:50</wp:post_date>
		<wp:post_date_gmt>2011-04-26 07:53:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sqlsserver</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>501</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/04/sqlsserver.png</wp:attachment_url>
	</item>
	<item>
		<title>import-solution</title>
		<link>http://crmvoyager.wordpress.com/2011/05/04/crm-2011-entity-metadata-browser/import-solution/</link>
		<pubDate>Thu, 05 May 2011 03:43:42 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/05/import-solution.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date>2011-05-04 19:43:42</wp:post_date>
		<wp:post_date_gmt>2011-05-05 03:43:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>import-solution</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/05/import-solution.png</wp:attachment_url>
	</item>
	<item>
		<title>select-file</title>
		<link>http://crmvoyager.wordpress.com/2011/05/04/crm-2011-entity-metadata-browser/select-file/</link>
		<pubDate>Thu, 05 May 2011 03:47:28 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/05/select-file.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date>2011-05-04 19:47:28</wp:post_date>
		<wp:post_date_gmt>2011-05-05 03:47:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>select-file</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/05/select-file.png</wp:attachment_url>
	</item>
	<item>
		<title>browser</title>
		<link>http://crmvoyager.wordpress.com/2011/05/04/crm-2011-entity-metadata-browser/browser/</link>
		<pubDate>Thu, 05 May 2011 03:48:31 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/05/browser.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2011-05-04 19:48:31</wp:post_date>
		<wp:post_date_gmt>2011-05-05 03:48:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>browser</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>507</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/05/browser.png</wp:attachment_url>
	</item>
	<item>
		<title>crm-productkey</title>
		<link>http://crmvoyager.wordpress.com/2011/10/12/updating-expired-license-key-in-crm-2011/crm-productkey/</link>
		<pubDate>Wed, 12 Oct 2011 21:01:01 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/10/crm-productkey.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>530</wp:post_id>
		<wp:post_date>2011-10-12 13:01:01</wp:post_date>
		<wp:post_date_gmt>2011-10-12 21:01:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>crm-productkey</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>528</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/10/crm-productkey.png</wp:attachment_url>
	</item>
	<item>
		<title>copssh-user</title>
		<link>http://crmvoyager.wordpress.com/2011/10/27/using-active-directory-domain-accounts-with-copssh/copssh-user/</link>
		<pubDate>Fri, 28 Oct 2011 04:53:42 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/10/copssh-user.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>555</wp:post_id>
		<wp:post_date>2011-10-27 20:53:42</wp:post_date>
		<wp:post_date_gmt>2011-10-28 04:53:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>copssh-user</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>554</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/10/copssh-user.png</wp:attachment_url>
	</item>
	<item>
		<title>copssh-domain</title>
		<link>http://crmvoyager.wordpress.com/2011/10/27/using-active-directory-domain-accounts-with-copssh/copssh-domain/</link>
		<pubDate>Fri, 28 Oct 2011 04:54:25 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/10/copssh-domain.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>556</wp:post_id>
		<wp:post_date>2011-10-27 20:54:25</wp:post_date>
		<wp:post_date_gmt>2011-10-28 04:54:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>copssh-domain</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>554</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/10/copssh-domain.png</wp:attachment_url>
	</item>
	<item>
		<title>putty-login</title>
		<link>http://crmvoyager.wordpress.com/2011/10/27/using-active-directory-domain-accounts-with-copssh/putty-login/</link>
		<pubDate>Fri, 28 Oct 2011 04:55:16 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/10/putty-login.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>557</wp:post_id>
		<wp:post_date>2011-10-27 20:55:16</wp:post_date>
		<wp:post_date_gmt>2011-10-28 04:55:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>putty-login</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>554</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/10/putty-login.png</wp:attachment_url>
	</item>
	<item>
		<title>nat</title>
		<link>http://crmvoyager.wordpress.com/2011/10/27/using-active-directory-domain-accounts-with-copssh/nat/</link>
		<pubDate>Fri, 28 Oct 2011 05:03:07 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.files.wordpress.com/2011/10/nat.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>562</wp:post_id>
		<wp:post_date>2011-10-27 21:03:07</wp:post_date>
		<wp:post_date_gmt>2011-10-28 05:03:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nat</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>554</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://crmvoyager.files.wordpress.com/2011/10/nat.png</wp:attachment_url>
	</item>
	<item>
		<title>Working with default filters in MS CRM report files</title>
		<link>http://crmvoyager.wordpress.com/2010/05/02/working-with-default-filters-in-ms-crm-report-files/</link>
		<pubDate>Sun, 02 May 2010 19:32:27 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[As you are probably aware, Microsoft CRM uses Sql Server Reporting services under the hood to run reports against CRM data. However, to allow more flexibility than would ordinarily be provided by SRSS alone Microsoft has several tricks up its sleeve when it comes to running the reports under CRM. To allow reports to run in different CRM contexts, dataset queries can be written in a way that CRM can rewrite the query to report contextually on selected rows or active view filters. That behavior is well covered elsewhere on the web so I probably won't cover it here.

What I want to talk about here are default filters, which are added to the report when the .rdl file is uploaded to CRM. This filter persists as extended data added to the report file when downloaded from CRM.

By default, the data is filtered to show only the last 30 days' worth of records. Downloading a report from CRM and comparing it with the originally uploaded .rdl file, we can see that the following chunk gets added to the .rdl file:

[sourcecode language="xml"]

&lt;CustomProperties&gt;
  &lt;CustomProperty&gt;
    &lt;Name&gt;Custom&lt;/Name&gt;
    &lt;Value&gt;&amp;lt;MSCRM xmlns=&quot;mscrm&quot;&amp;gt;&amp;amp;lt;ReportFilter&amp;amp;gt;&amp;amp;
lt;ReportEntity paramname=
&quot;P1&quot;&amp;amp;gt;&amp;amp;lt;fetch version=&quot;1.0&quot; output-format=&quot;xml-platform&quot; mapping=&quot;logical&quot; distinct=&quot;false&quot;&amp;amp;gt;&amp;amp;lt;entity name=&quot;contract&quot;&amp;amp;gt;&amp;amp;lt;all-attributes /&amp;amp;gt;&amp;amp;lt;filter type=&quot;and&quot;&amp;amp;gt;&amp;amp;lt;condition attribute=&quot;modifiedon&quot; 
operator=&quot;last-x-days&quot; value=&quot;30&quot; /&amp;amp;gt;&amp;amp;lt;/filter&amp;amp;gt;&amp;amp;lt;/entity
&amp;amp;gt;&amp;amp;lt;/
fetch&amp;amp;gt;&amp;amp;lt;/
ReportEntity&amp;amp;gt;&amp;amp;lt;ReportEntity paramname=&quot;CRM_Filteredcontract&quot;
&amp;amp;gt;&amp;amp;
lt;fetch version=&quot;1.0&quot; output-format=&quot;xml-platform&quot; mapping=&quot;logical&quot; distinct=&quot;false&quot;&amp;amp;gt;
&amp;amp;lt;entity name=&quot;contract&quot;&amp;amp;gt;&amp;amp;lt;all-attributes /&amp;amp;gt;&amp;amp;lt;filter type=&quot;and&quot;&amp;amp;gt;&amp;amp;lt;
condition attribute=&quot;modifiedon&quot; operator=&quot;last-x-days&quot; value=&quot;30&quot; /&amp;amp;gt;&amp;amp;lt;/filter&amp;amp;gt;&amp;amp;lt;/entity&amp;amp;gt;&amp;amp;lt;/
fetch&amp;amp;gt;&amp;amp;lt;/
ReportEntity&amp;amp;gt;&amp;amp;lt;/ReportFilter&amp;amp;gt;&amp;lt;/MSCRM&amp;gt;&lt;/Value&gt;
  &lt;/CustomProperty&gt;
&lt;/CustomProperties&gt;

[/sourcecode]

Yuck. Unfortunately, since the report filter is an embedded xml document, it must be escaped in order for CRM to import it correctly. It would be nice if we could format this so that it is easy to edit. At first blush it seems the a simple CDATA section should do the trick. However, the data is actually escaped twice, which requires nested CDATA sections, which are not allowed in the XML standard. What can we do? Fortunately we can embed the CDATA sections so that when the data is unescaped the first time, the second CDATA section remains intact.

The first thing to do is to recover the plain XML markup from the escaped text. I used a tool called <a href="http://xmlstar.sourceforge.net/">XMLStarlet</a>, but anything that can unescape XML entity references will do the trick.

[sourcecode language="bash" light="true"]

$ cat crm.xml | xmlstarlet unesc | xmlstarlet unesc

[/sourcecode]

Gives us something like the following:

[sourcecode language="xml"]
&lt;CustomProperties&gt;
  &lt;CustomProperty&gt;
    &lt;Name&gt;Custom&lt;/Name&gt;
    &lt;Value&gt;
      &lt;MSCRM xmlns=&quot;mscrm&quot;&gt;
        &lt;ReportFilter&gt;
          &lt;ReportEntity paramname=&quot;P1&quot;&gt;
            &lt;fetch version=&quot;1.0&quot; output-format=&quot;xml-platform&quot; mapping=&quot;logical&quot; distinct=&quot;false&quot;&gt;
              &lt;entity name=&quot;contract&quot;&gt;
                &lt;all-attributes/&gt;
                &lt;filter type=&quot;and&quot;&gt;
                  &lt;condition attribute=&quot;modifiedon&quot; operator=&quot;last-x-days&quot; value=&quot;30&quot;/&gt;
                &lt;/filter&gt;
              &lt;/entity&gt;
            &lt;/fetch&gt;
          &lt;/ReportEntity&gt;
          &lt;ReportEntity paramname=&quot;CRM_Filteredcontract&quot;&gt;
            &lt;fetch version=&quot;1.0&quot; output-format=&quot;xml-platform&quot; mapping=&quot;logical&quot; distinct=&quot;false&quot;&gt;
              &lt;entity name=&quot;contract&quot;&gt;
                &lt;all-attributes/&gt;
                &lt;filter type=&quot;and&quot;&gt;
                  &lt;condition attribute=&quot;modifiedon&quot; operator=&quot;last-x-days&quot; value=&quot;30&quot;/&gt;
                &lt;/filter&gt;
              &lt;/entity&gt;
            &lt;/fetch&gt;
          &lt;/ReportEntity&gt;
        &lt;/ReportFilter&gt;
      &lt;/MSCRM&gt;
    &lt;/Value&gt;
  &lt;/CustomProperty&gt;
&lt;/CustomProperties&gt;
[/sourcecode]

In order to work correctly when uploading the default filter, we escape it with CDATA tags like the following:

[sourcecode language="xml"]
&lt;CustomProperties&gt;
  &lt;CustomProperty&gt;
    &lt;Name&gt;Custom&lt;/Name&gt;
    &lt;Value&gt;&lt;![CDATA[
      &lt;MSCRM xmlns=&quot;mscrm&quot;&gt;&lt;![CDATA[
        &lt;ReportFilter&gt;
          &lt;ReportEntity paramname=&quot;P1&quot;&gt;
            &lt;fetch version=&quot;1.0&quot; output-format=&quot;xml-platform&quot; mapping=&quot;logical&quot; distinct=&quot;false&quot;&gt;
              &lt;entity name=&quot;contract&quot;&gt;
                &lt;all-attributes/&gt;
                &lt;filter type=&quot;and&quot;&gt;
                  &lt;condition attribute=&quot;modifiedon&quot; operator=&quot;last-x-days&quot; value=&quot;30&quot;/&gt;
                &lt;/filter&gt;
              &lt;/entity&gt;
            &lt;/fetch&gt;
          &lt;/ReportEntity&gt;
          &lt;ReportEntity paramname=&quot;CRM_Filteredcontract&quot;&gt;
            &lt;fetch version=&quot;1.0&quot; output-format=&quot;xml-platform&quot; mapping=&quot;logical&quot; distinct=&quot;false&quot;&gt;
              &lt;entity name=&quot;contract&quot;&gt;
                &lt;all-attributes/&gt;
                &lt;filter type=&quot;and&quot;&gt;
                  &lt;condition attribute=&quot;modifiedon&quot; operator=&quot;last-x-days&quot; value=&quot;30&quot;/&gt;
                &lt;/filter&gt;
              &lt;/entity&gt;
            &lt;/fetch&gt;
          &lt;/ReportEntity&gt;
        &lt;/ReportFilter&gt;]]]]&gt;&lt;![CDATA[&gt;
      &lt;/MSCRM&gt;]]&gt;
    &lt;/Value&gt;
  &lt;/CustomProperty&gt;
&lt;/CustomProperties&gt;
[/sourcecode]

Now we are free to edit the filter easily and when the .rdl file is uploaded, the changes to the filter will take effect.

<!--more-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2010-05-02 19:32:27</wp:post_date>
		<wp:post_date_gmt>2010-05-02 19:32:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-with-default-filters-in-ms-crm-report-files</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Testing Windows Workflow activities in isolation</title>
		<link>http://crmvoyager.wordpress.com/2010/05/19/testing-windows-workflow-activities-in-isolation/</link>
		<pubDate>Wed, 19 May 2010 19:48:47 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[There comes a time in every CRM developer's career when he's tired of doing the rain dance of plugin re-registration for testing custom workflow activities. Of course, moving all of the heavy lifting out of the actual Execute() method is a must, but sometimes we just need to test the thing as-is.

I've seen <a href="http://msdn.microsoft.com/en-us/magazine/dd179724.aspx">some references</a> to testing workflow activities on the web that recommend using the workflow runtime to spin things up for the test, but for smoke testing individual activities, I think that this is probably overkill. What I'm going to do here is to spin up an instance of the activity outside of the WF runtime environment. For another take on this as well as a sample of spinning up the actual WF runtime for testing, check out <a href="http://odetocode.com/blogs/scott/archive/2006/08/02/unit-testing-workflow-activities.aspx">this reference</a>. Of course, if we have a composite activity or if we reach into the execution context at all, this technique won't work. If need be I might look at mocking the execution context, but for now I don't need it.

As an example, take the following custom CRM workflow activity that sends a notification to a web service with a contract ID that has been updated in CRM

[sourcecode language="csharp"]
public class ContractUpdateActivity : Activity
{
    public static DependencyProperty ContractNumberProperty =
        DependencyProperty.Register(
            &quot;ContractNumber&quot;,
            typeof( string ),
            typeof(ContractUpdateActivity )
        );

    [CrmInput(&quot;ContractNumber&quot;)]
    public string ContractNumber {
        get {
            return ( string )base.GetValue( ContractNumberProperty );
        }
        set {
            base.SetValue( ContractNumberProperty, value );
        }
    }

    protected override ActivityExecutionStatus Execute( ActivityExecutionContext executionContext ) {
        Service service = new Service();
        service.ContractUpdated( this.ContractNumber );
        return ActivityExecutionStatus.Closed;
    }
}
[/sourcecode]

Even though this is far from being a unit test or free of side effects, we'd still like to run this activity as a smoke test outside of CRM. There are two potential problems with doing something like

[sourcecode language="csharp"]
ContractUpdateActivity updateActivity = new ContractUpdateActivity();
updateActivity.Execute( null );
[/sourcecode]

The most obvious issue, were one to attempt compilation of the above code, is that the Execute() method is protected and not visible to us in a test. Fortunately, Execute() is defined on System.Workflow.ComponentModel.Activity which intended for use as a base class and is not sealed.

So, instead of using ContractUpdateActivity directly in our test, we can make a small wrapper by subclassing it:

[sourcecode language="csharp"]
public class ContractUpdateActivityTest : ContractUpdateActivity {
    public void Execute() {
        base.Execute( null );
    }
}
[/sourcecode]

now we can write a few lines of code to exercise the code (I hesitate to call this a 'test') via the subclass:

[sourcecode language="csharp"]
ContractUpdateActivityTest testUpdateActivity = new ContractUpdateActivityTest();
testUpdateActivity.ContractNumber = &quot;12345&quot;;
testUpdateActivity.Execute();
[/sourcecode]

The other issue to watch for is that of dependencies. The type initializer of Activity tries to load dependencies behind the scenes and won't look in the current path of the executable that is running the test. The required classes must either be compiled into the same assembly as the workflow activity or be found in the GAC. It may be possible to locate the assemblies somewhere else, but I haven't looked at the fusion logs to find out where else workflow looks for assemblies.

If an assembly is not found, the .net runtime will issue an error similar to the following:

[sourcecode]
System.TypeLoadException: Could not load type 'Service' from assembly 'ContractServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null'.
[/sourcecode]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2010-05-19 19:48:47</wp:post_date>
		<wp:post_date_gmt>2010-05-19 19:48:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-windows-workflow-activities-in-isolation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dependency properties rant</title>
		<link>http://crmvoyager.wordpress.com/2010/05/19/dependency-properties-rant/</link>
		<pubDate>Wed, 19 May 2010 21:26:48 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[- Update:
I ran into these issues when testing the activity classes outside of a workflow runtime context. It turns out that there is more to this than I thought. Once running inside of CRM we don't have the name collision issue. However, I wasn't able to put common properties in a superclass, so apparently trying to test workflows outside of CRM only works in certain cases.

When I first looked at Windows Workflow Foundation and WPF back when .net 3.0 hit RTM I thought that dependency properties were confusing. Or at the very least over-complex. Probably both. As I looked further into WPF and saw the XAML magic that they enabled I guess I eased up a little bit. I thought I understood them pretty fully until today when I was writing a suite of workflow activities for MS CRM.

My development work was moving along swimmingly, and the test cases of my first activity were passing with flying colors. As I started in on testing the rest of the activities I ran into some issues.

I got the following runtime error following the successful run of the tests on the first activity and before the second:
[sourcecode]
Unhandled Exception: System.TypeInitializationException: The type initializer for 'Altai.Workflow.ContractActivity' threw an exception. ---&gt; System.InvalidOperationException: DependencyProperty 'FtpPassword' could not be registered.  A property with the same name already exists for type 'Altai.Workflow.VendorActivity'.
   at System.Workflow.ComponentModel.DependencyProperty.ValidateAndRegister(String name, Type propertyType, Type ownerType, PropertyMetadata defaultMetadata, Type validatorType, Boolean isRegistered)
[/sourcecode]


<div>Since the dependency property boilerplate code is so verbose, I used codegen to spit out all of the properties that I needed. I figured I made a mistake when running my codegen tool and specified the same type name for the properties on both of the activity classes. I double checked everything and it turned out that everything looked fine. On a hunch I changed the names given to the properties so that they were unique and the error was replaced by a new error:</div>
[sourcecode]
Unhandled Exception: System.TypeInitializationException: The type initializer for 'Altai.Workflow.VendorActivity' threw an exception. ---&gt; System.ArgumentException: Type 'Altai.Workflow.VendorActivity' does not define a static dependency property with name 'PVAFtpPasswordProperty'.
[/sourcecode]


<div>So it looks like the properties are looked up by the <strong>string name alone. </strong>This surprised me since we give the .net type when we register the property. Really I don't know what Microsoft was thinking with this one. Not only are dependency properties globally registered using a static registry, they don't use the registered type to disambiguate potential conflicts in field names.</div>
<div>So to restate my displeasure here, not only are we referencing the registered properties using a string and ignoring the type info provided, <strong>we are doing so lazily at runtime when the type initializers for the class are running. </strong>This is one of those cases where type safety is just an illusion, and really only serves to trip us up while simultaneously providing a false sense of security.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2010-05-19 21:26:48</wp:post_date>
		<wp:post_date_gmt>2010-05-19 21:26:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dependency-properties-rant</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fixing intractable CRM Workflow errors</title>
		<link>http://crmvoyager.wordpress.com/2010/05/21/fixing-intractable-crm-workflow-errors/</link>
		<pubDate>Fri, 21 May 2010 15:01:18 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[I was having issues adding a custom workflow activity to one of my workflows today, and everything seemed right but I still was seeing an error in the CRM trace output when adding the activity to a new workflow.

[sourcecode]
[2010-05-21 10:49:35.3] Process: w3wp |Organization:11a5abbd-36aa-de11-8729-00155d00050c |Thread:   25 |Category: Application |User: 00000000-0000-0000-0000-000000000000 |Level: Error | ErrorInformation.LogError
&amp;gt;MSCRM Error Report:
--------------------------------------------------------------------------------------------------------
Error: Field 'Altai.Workflow.ContractActivity.FtpPasswordProperty' not found.
[/sourcecode]

I checked and double checked and that field is certainly there. I used Reflector to check the code in the actual assembly.

Finally, I renamed the assembly and reimported and the error was resolved. Apparently there is some caching going on behind the scenes that was the root of my issue.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2010-05-21 15:01:18</wp:post_date>
		<wp:post_date_gmt>2010-05-21 15:01:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fixing-intractable-crm-workflow-errors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Error registering workflow to disk</title>
		<link>http://crmvoyager.wordpress.com/2010/06/02/error-registering-workflow-to-disk/</link>
		<pubDate>Wed, 02 Jun 2010 16:06:45 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[The other day I was working on a CRM workflow activity that I had registered to the database with the plugin registration tool. Later on, I wanted to register the same assembly to disk for easy debugging, but I was confronted with the following exception when trying to register the assembly:

[sourcecode language="bash"]
Unhandled Exception: System.Web.Services.Protocols.SoapException: Server was unable to process request.
Detail: &lt;detail&gt;&lt;error&gt;
  &lt;code&gt;0x80044191&lt;/code&gt;
  &lt;description&gt;Assembly can not be loaded from C:\Program Files\Microsoft Dynamics CRM\server\bin\assembly\MyWorkflow.dll.&lt;/description&gt;
[/sourcecode]

I thought that maybe I had to run the registration tool as administrator since the path was under `program files', but this did not help.

It isn't obvious from the docs, but they mention that you are responsible for copying the assemblies to the target folder under C:\Program Files\Microsoft Dynamics CRM\server\bin\assembly. However, it doesn't work unless you copy the assembly beforehand, and point the tool to that location when registering the assembly. You can't register the assembly from another location and then copy the binary afterward.

This limitation is mentioned in the documentation for plugin registration <a href="http://msdn.microsoft.com/en-us/library/cc151098.aspx">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2010-06-02 16:06:45</wp:post_date>
		<wp:post_date_gmt>2010-06-02 16:06:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>error-registering-workflow-to-disk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Consuming CRM web services from Javascript</title>
		<link>http://crmvoyager.wordpress.com/2010/06/07/consuming-crm-web-services-from-javascript/</link>
		<pubDate>Mon, 07 Jun 2010 21:46:17 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[I ran across a Javascript library today called <a href="http://danielcai.blogspot.com/2010/01/crm-web-service-javascript-toolkit.html">MSCRM 4.0 Web Service Toolkit </a>for making calls to CRM from Javascript. Apparently it was inpired by <a href="http://www.ercantuzun.com/post/Ascentium-CrmService-JavaScript-Library.aspx">this library</a>. This sure beats hand rolling soap calls, and is CRM specific, unlike some <a href="http://www.guru4.net/articoli/javascript-soap-client/en/">other Javascript soap clients</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2010-06-07 21:46:17</wp:post_date>
		<wp:post_date_gmt>2010-06-07 21:46:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>consuming-crm-web-services-from-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1275947178]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Connecting to MS CRM over SSH</title>
		<link>http://crmvoyager.wordpress.com/2010/06/29/connecting-to-ms-crm-over-ssh/</link>
		<pubDate>Tue, 29 Jun 2010 15:42:44 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[How many times have you been in the situation where, for whatever reason, you are stuck developing a CRM application against a customer's test CRM installation where you don't have a proper VPN setup so that you can develop locally? How about having to use 2 or more remote desktop sessions to even reach the box in question? Throw a Citrix connection into the mix and you have a sure recipe for pain. Not to mention that installing Visual Studio with all of its dependencies, along with the sheer size of it, is no walk in the park either.

I had a situation recently where the customer was on CRM 3.0, making it nearly impossible for us to set up a local development server with their schema on it. The customer's test environment was on a relatively slow internet link, and the only access that we had to the box was over a Citrix connection to a bastion host and then on to the target machine using RDP.

Fortunately, there is a solution to our dilemma, and we don't even have to install anything on the server! <a href="http://en.wikipedia.org/wiki/Secure_Shell">Secure shell</a> (SSH) is the traditional UNIX remote connection utility which has long had the ability to forward network connections from one machine to another along with its traditional command console duties. Unfortunately, since the server was a Windows machine, no SSH server was installed by default, and installation of a third-party SSH implementation would have been too intrusive.

However, SSH has the ability to do both local and remote tunneling, so we can effectively reverse the roles of the client and server in order to create a backhaul link over which we can access CRM. This lets us install the SSH server on our client machine where we want to do the development work (eg, run Visual Studio) and use a simple client (<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">Putty</a>) on the server to initiate the tunnel.

I installed the <a href="http://www.itefix.no/i2/copssh">CopSSH</a> SSH server on my laptop and opened port 22 on my firewall to let the remote connection through from the outside. I won't cover installation of CopSSH here, but it is well documented and installation went smoothly for me on Windows Vista. Once CopSSH is set up, the only tricky part left is to configure Putty correctly to create a forwarded port over which we can access CRM services.

Putty doesn't need to be installed, just run putty.exe on the server and give it the IP address of your local development machine. My configuration looks like the following:
<a href="http://crmvoyager.files.wordpress.com/2010/06/putty-crm.png"><img src="http://crmvoyager.files.wordpress.com/2010/06/putty-crm.png" alt="" title="putty-crm" width="466" height="448" class="alignnone size-full wp-image-58" /></a>

I chose port 9982 as the port I want to use on my laptop to access CRM. On the CRM server end, I used 'localhost:80' as the destination, because the CRM server is running on the actual box that I'm connecting from (localhost) on the standard HTTP port (80).

Now I just have to change my CRM URLs in development to something like:
[sourcecode]
http://localhost:9982/mscrmservices/2006/CrmService.asmx
[/sourcecode]

Why do we use 'localhost' here if we are connecting to the server? Remember that the SSH tunnel is now listening on the laptop, so when we connect to this port that SSH is listening on, it takes the connection and forwards it on to the server. So, to our .NET code it looks like CRM is actually running locally on the laptop.

As an added bonus, URLs like the following will also be available locally:
[sourcecode]
http://localhost:9982/sdk/list.aspx
[/sourcecode]

This can dramatically reduce your development cycle time when the environment is not ideal. Hope this saves you some time.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2010-06-29 15:42:44</wp:post_date>
		<wp:post_date_gmt>2010-06-29 15:42:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>connecting-to-ms-crm-over-ssh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_091de09c602a6c189fc42eb13430294b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1277826164]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cdf8ad3822e58b9aa116289895a9c994</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_228b7f8b3dfd0428bfeb25788e9325dd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a975c87749ebebfa20c39afa96067e5f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[Using Active Directory domain accounts with CopSSH &laquo; CRM Voyager]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://crmvoyager.wordpress.com/2011/10/27/using-active-directory-domain-accounts-with-copssh/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.18</wp:comment_author_IP>
			<wp:comment_date>2011-10-27 21:05:04</wp:comment_date>
			<wp:comment_date_gmt>2011-10-28 05:05:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] works out pretty well most of the time. However, recently I wanted to use my SSH backhaul trick to grab some data from a client&#8217;s site back through their firewall. In order to get this to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319778304.4156";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1319780424]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1319780424.158";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Getting started with ASP.NET Web Parts</title>
		<link>http://crmvoyager.wordpress.com/2010/07/06/getting-started-with-asp-net-web-parts/</link>
		<pubDate>Tue, 06 Jul 2010 18:28:30 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[If you are developing Microsoft CRM solutions for clients like I am, you have probably gotten requests for Microsoft SharePoint integration. SharePoint provides a framework for user customization and authentication as well as providing users the ability to create dynamic content without any programming. However, this power comes at the price of slightly more complex development paradigms than what we are used to with plain ASP.NET. Fortunately, once we understand the basic building block, the WebPart, the rest should begin to fall into place.

I'm going to be targeting SharePoint 2010, but the concepts should be similar for previous versions of SharePoint. It is worth noting that Microsoft recommends development of ASP.NET WebParts instead of SharePoint WebParts. There are some differences in capability, but for our purposes here it won't matter. Also, to do the latter type of WebPart, we would need to have SharePoint installed locally on the development machine, which is a big drawback. ASP.NET WebParts can be developed as long as the .NET framework is installed (and if it isn't you probably wouldn't be reading this blog).

Ok, for starters, although it is possible to use a plain UserControl as a WebPart, we'll be creating a proper server control that implements System.Web.UI.WebControls.WebParts.WebPart.

To get started, all we need is an empty ASP.NET web site. Once we have created a web site in Visual Studio, creating the web part is as simple as inheriting from WebPart and overriding a single method. Here is the shell of the class:

[sourcecode language="csharp"]
	public class MyWebPart : System.Web.UI.WebControls.WebParts.WebPart
	{
		protected override void CreateChildControls() {}
	}
[/sourcecode]

So, as you may have guessed, we need to implement code that generates the content for the WebPart just like we would when writing a server control. Probably the simplest thing we could do here is to insert a Label control, making our code look like this:

[sourcecode language="csharp"]
	public class MyWebPart : System.Web.UI.WebControls.WebParts.WebPart
	{
		protected override void CreateChildControls() {
			Label label = new Label();
			label.Text = &quot;Test&quot;;
			Controls.Add( label );
			ChildControlsCreated = true;
                }
	}
[/sourcecode]

The code should look familiar if you have ever written an ASP.NET server control. What we have done so far is exactly what we would have done to create a server control. However, in order to use the WebPart in a page, we need some extra machinery: namely the WebPartManager and the WebPartZone. The WebPartManager coordinates all of the WebParts and WebPartZones on the page, so we only need one of them. WebPartZones can be thought of as the container for a WebPart.

The markup for a basic WebPart page looks something like this:

[sourcecode language="html"]
	&lt;asp:WebPartManager ID=&quot;WebPartManager1&quot; runat=&quot;server&quot; &gt;
	&lt;/asp:WebPartManager&gt;
	&lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;
		&lt;zonetemplate&gt;
          &lt;webparts:MyWebPart
            runat=&quot;server&quot;   
            id=&quot;mywebpart&quot; 
            title=&quot;Simple Label WebPart&quot; /&gt;
        &lt;/zonetemplate&gt;
	&lt;/asp:WebPartZone&gt;
[/sourcecode]

Note that the WebPart gets added to the page in much the same way as a normal ASP.NET custom control. We need to use something like this to register the tag name:

[sourcecode language="html"]
&lt;%@ register tagprefix=&quot;webparts&quot; Namespace=&quot;AppCode&quot; %&gt;
[/sourcecode]

With personalization enabled, the rendered control looks like this:
<a href="http://crmvoyager.files.wordpress.com/2010/07/webpart.png"><img src="http://crmvoyager.files.wordpress.com/2010/07/webpart.png" alt="" title="Webpart" width="311" height="243" class="alignnone size-full wp-image-77" /></a>

There is one final thing that I'll leave you with. After playing around with the WebParts for a while, I accidentally deleted the WebPart from the page and I couldn't get it to display again. This is due to the way that <a href="http://msdn.microsoft.com/en-us/library/z36h8be9.aspx">personalization</a> works. I didn't set up a personalization provider, but somehow it was still being persisted. Personalization can be disabled on the WebPartManager by setting Personalization-Enabled to false, either in code or in the markup. Alternatively, if you'd like to keep personalization enabled, the state can be reset by calling ResetPersonalizationState() on the WebPartManager. I added a button to the page so that I could clear the state easily at runtime.

[sourcecode language="csharp"]
protected void Reset_Personalization( object sender, EventArgs e ) {
		WebPartManager1.Personalization.ResetPersonalizationState();
	}
[/sourcecode]

I'll talk a little bit more about developing WebParts in a later post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date>2010-07-06 18:28:30</wp:post_date>
		<wp:post_date_gmt>2010-07-06 18:28:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-started-with-asp-net-web-parts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278440911]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code spelunking - CRM web service internals</title>
		<link>http://crmvoyager.wordpress.com/2010/07/07/code-spelunking-crm-web-service-internals/</link>
		<pubDate>Wed, 07 Jul 2010 00:03:23 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[I was poking around in some of the CRM libraries in the course of writing a mock CRM web service for testing purposes and I found a few interesting things that I thought would be useful to share. If you have never used the wonderful <a href="http://www.red-gate.com/products/reflector/">.NET Reflector</a> you really owe it to yourself to grab it and poke around in your favorite .NET libraries to see how they work under the hood.

Anyway, on with the analysis. What I wanted to find out is how CRM knew what kind of entity was being passed in to it via the web service. If the entity happened to be a DynamicEntity, things are straightforward as there is a name field. BusinessEntity, however, has no such field. In fact, it seems to serve only as placeholder type, contributing no fields of its own. This was kind of surprising to me, as I would have thought that since every entity has a name, and every instance has an ID that we'd have some common fields here. Otherwise on the server, Microsoft would have to use reflection to figure out what we were passing.

The definition of Microsoft.Crm.Sdk.BusinessEntity looks like this:
[sourcecode language="csharp"]
[Serializable, XmlType(Namespace=&quot;http://schemas.microsoft.com/crm/2006/WebServices&quot;), XmlInclude(typeof(DynamicEntity))]
public abstract class BusinessEntity 
{
    protected BusinessEntity();
}
[/sourcecode]

Notice that there is no superclass, and it does not implement any fields -- only a protected default constructor. I went to the CRM server and grabbed the .NET assemblies for further inspection. I was looking for the implementation of the 'Create()' web service method. It took a little guesswork, but I found the method Microsoft.Crm.Sdk.Crm2007.CrmService.Create(), which looks like the following:

[sourcecode language="csharp"]
[SoapHeader(&quot;CallerOriginToken&quot;), CrmSoapExtension(typeof(CrmAuthenticationSoapExtension)), SoapHeader(&quot;UnknownHeaders&quot;), SoapHeader(&quot;AuthenticationToken&quot;), WebMethod(Description=&quot;Creates an instance of an entity.&quot;), SoapHeader(&quot;CorrelationToken&quot;)]
public Guid Create(BusinessEntity entity)
{
    Exceptions.ThrowIfNull(entity, &quot;entity&quot;);
    base.CheckUnknownHeaders();
    CrmServiceInternal internal2 = new CrmServiceInternal();
    return internal2.Create(&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;, entity, this._correlationToken, base.CallerOriginToken, SecurityLibrary.GetCallerAndBusinessGuids(), base.CurrentCallerId);
} 
[/sourcecode]

We can see that the dirty work gets done by the Create() method on an internal class called CrmServiceInternal. Let's take a look at this method to get the details on the BusinessEntity type that we are passing around:

[sourcecode language="csharp"]
internal Guid Create(string namespaceName, BusinessEntityBase entity, CorrelationToken correlationToken, CallerOriginToken originToken, UserAuth userAuth, Guid callerId)
{
    int primaryObjectTypeCode = this.VerifyAndRetrieveEntityForCategoryMessage(&quot;Create&quot;, &quot;Create&quot;, namespaceName, entity.LogicalName);
    PropertyBag fields = new PropertyBag();
    fields[&quot;OptionalParameters&quot;] = new OptionalParameter[0];
    fields[&quot;Target&quot;] = entity.InternalEntity;
    return (Guid) ExternalMessageDispatcher.Instance.Execute(&quot;Create&quot;, primaryObjectTypeCode, 0, fields, correlationToken, originToken, userAuth, callerId)[&quot;id&quot;];
}
[/sourcecode]

So here we use a field called LogicalName, which wasn't on BusinessEntity when we looked at it before. Looking at the argument list, it takes a single argument of type BusinessEntity, which is what we were expecting, but on navigating to the type, I realized that it was a different type altogether than what we had in the client-side library. This version of BusinessEntity derives from a BusinessEntityBase type, as follows:

[sourcecode type="csharp"]
public class BusinessEntity : BusinessEntityBase
{
    public BusinessEntity();
    public BusinessEntity(DynamicEntity entity, bool skipOuterNode);
}
[/sourcecode]

And this base type has a field for the type of the entity:
[sourcecode language="csharp"]
public abstract class BusinessEntityBase : IXmlSerializable
{
    public DynamicEntity InternalEntity { get; set; }
    public string LogicalName { get; }
    public string PlatformName { get; }
}
[/sourcecode]

So, by virtue of serialization, the types are effectively converted from a type in one hierarchy to one in another unrelated hierarchy. This was a great exercise in understanding what was going on under the hood, but unfortunately didn't help me out much when creating my mock service. I might try to use the internal CRM classes for this to see where it gets me, but since I'm aiming to mock what the client sees, this doesn't seem likely to help.
 
As a parting note, I'll add that the server side implementation of the web service does not actually implement ICrmService that is presented to the client via the SDK.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2010-07-07 00:03:23</wp:post_date>
		<wp:post_date_gmt>2010-07-07 00:03:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-spelunking-crm-web-service-internals</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278461004]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Querying CRM with conditions and filters</title>
		<link>http://crmvoyager.wordpress.com/2010/07/07/querying-crm-with-conditions-and-filters/</link>
		<pubDate>Wed, 07 Jul 2010 03:03:13 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[On more than one occasion I've had to assemble a complex query for retrieving CRM entities. Unfortunately, the QueryExpression API can be pretty confusing. I've actually written several query APIs for other projects myself, and this one still trips me up sometimes. 

The basis for my confusion, and probably the confusion of many others, is that the naming is slightly confusing and it is not obvious at first blush why there is a need for both FilterExpression and ConditionExpression.

To clear up the naming convention, there are two types that are used in the construction of the selection condition: FilterExpression and ConditionExpression. FilterExpression is used to express boolean conjunctions and disjunctions (and and or), and ConditionExpression is used to represent (in)equality, and set membership. There is an inconsistency in naming of the field that holds the filters at the top level however, there being a QueryExpression.Criteria property rather than QueryExpression.Filters.

One way to look at a complex query is that the criteria consist of a tree of FilterExpressions with ConditionExpressions as the terminals. That is, FilterExpression has a collection of other FilterExpressions, whereas ConditionExpressions do not contain any further expressions.

As an example, if we wanted to express the clause:
[sourcecode]
( A = 1 and ( B = 2 or C = 3 ) ) 
[/sourcecode]
we would need two FilterExpressions and three ConditionExpressions. It is easy to see how to construct the ConditionExpressions - we simply create three instances using ConditionOperator.Equal as the operator. For example:

[sourcecode language="csharp"]
ConditionExpression conditionA = new ConditionExpression();
conditionA.AttributeName = &quot;A&quot;;
conditionA.Operator = ConditionOperator.Equal;
conditionA.Values = new int[] { 1 }; 
[/sourcecode]

Notice that the value is placed in an array of integers. ConditionExpression.Values is a collection since we support the possibility of testing for set membership, thus necessitating the use of a collection for the possible values.

Next we create two filters, one each for the 'and' and 'or' expressions:
[sourcecode language="csharp"]
FilterExpression andFilter = new FilterExpression();
andFilter.FilterOperator = LogicalOperator.And;

FilterExpression orFilter = new FilterExpression();
childFilter.FilterOperator = LogicalOperator.Or;

// Now establish the filter hierarchy
andFilter.Filters = new FilterExpression[] { orFilter };
[/sourcecode]

Once the filters are set up, we can apply the conditionals:
[sourcecode language="csharp"]
andFilter.Conditions = new ConditionExpression[] { conditionA };
orFilter.Conditions = new ConditionExpression[] { conditionB, conditionC };
[/sourcecode]

I have organized the code slightly differently than most of the code samples available from Microsoft. I think that looking at the filters as a tree structure makes things clearer. Notice that a ConditionExpression is given the same consideration that a FilterExpression is given when evaluating the entire expression -- the boolean operator is applied to conditionA and the result of  the evaluation of orFilter.

Somehow, I think that this API could have been simpler. I might explore wrapping this API in something a little less confusing, perhaps at the expense of supporting less frequently used operations. Hopefully this gives you a slightly different perspective on constructing Criteria expressions in CRM. I'll cover (the also confusing) LinkEntity in an upcoming post.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2010-07-07 03:03:13</wp:post_date>
		<wp:post_date_gmt>2010-07-07 03:03:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>querying-crm-with-conditions-and-filters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278471794]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[Xitij Thool]]></wp:comment_author>
			<wp:comment_author_email>KTTHOOL@GMAIL.COM</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.179.161.113</wp:comment_author_IP>
			<wp:comment_date>2012-03-07 04:17:58</wp:comment_date>
			<wp:comment_date_gmt>2012-03-07 12:17:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice Post , can u tell us in what manner we will add these FilterCriteria in the QueryExpression?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331131670]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331131671.3042";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331122679.1342";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>76</wp:comment_id>
			<wp:comment_author><![CDATA[Fraser]]></wp:comment_author>
			<wp:comment_author_email>fraserp@krpcomm.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.67.108.174</wp:comment_author_IP>
			<wp:comment_date>2012-05-23 07:06:39</wp:comment_date>
			<wp:comment_date_gmt>2012-05-23 15:06:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When creating the QueryExpression, the Criteria only accepts one filter. How do you plan on getting both your FilterExpression into one Query?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>65</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337785599.5511";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1337798587]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337798587.4976";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[newcome]]></wp:comment_author>
			<wp:comment_author_email>djn125@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.202.178.214</wp:comment_author_IP>
			<wp:comment_date>2012-05-23 11:51:48</wp:comment_date>
			<wp:comment_date_gmt>2012-05-23 19:51:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@fraser - yes, you may only supply one FilterExpression to the QueryExpression, but what we have done in the code sample above is create a hierarchy of filters, the topmost "root" being the "and" expression. Check the line:

[sourcecode language="csharp"]
andFilter.Filters = new FilterExpression[] { orFilter };
[/sourcecode]

where we set up the hierarchy. Once that is set up all we need is the root expression to give to QueryExpression.Critera 

Hope this makes sense.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>76</wp:comment_parent>
			<wp:comment_user_id>2496294</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1337802708]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337802708.5828";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Enabling design mode in ASP.NET WebParts</title>
		<link>http://crmvoyager.wordpress.com/2010/07/07/enabling-design-mode-in-asp-net-webparts/</link>
		<pubDate>Wed, 07 Jul 2010 03:28:24 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[WebPart pages support lots of advanced functionality right out of the box, but there are some complexities in getting everything set up correctly. In a previous post, I pointed out an issue that I had with WebParts personalization support. Another thing that I got tripped up on recently was getting design mode working. 

Design mode is a page viewing mode in which the WebParts on the page can be moved around via drag-and-drop using the mouse. This support is baked in, you just need to know how to enable it. Intuitively it seems like there should be an enum somewhere with the different display modes that you can use to change the mode. It doesn't quite work this way, and the documentation is a little bit confusing on exactly how things are supposed to work.

<a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.webparts.webpartmanager.designdisplaymode.aspx">The documentation</a> gives an example in which the supported DisplayModes are queried from the WebPartManager and their names are added to a drop-down field on the page. Simply stated, all of the possible display modes are stored as static fields of the WebPartManager class rather than as an enum. The display modes supported at runtime for a given WebPartManager instance are found using the SupportedDisplayModes property.

[sourcecode language="csharp"]
foreach( WebPartDisplayMode mode in WebPartManager1.SupportedDisplayModes ) {
     // .....
}
[/sourcecode]

Setting the display mode for the page is done like this:
[sourcecode language="csharp"]
WebPartManager1.DisplayMode = WebPartManager.DesignDisplayMode;
[/sourcecode]

Note that if we try to set a display mode that is not supported by the WebPartManager, a runtime error will result. Also, drag-and-drop doesn't work in all browsers. It didn't work in Google Chrome for me, but it worked fine (go figure) in IE8.

Here is what it looks like in action:
<a href="http://crmvoyager.files.wordpress.com/2010/07/webparts.png"><img src="http://crmvoyager.files.wordpress.com/2010/07/webparts.png" alt="" title="Webparts" width="500" height="220" class="alignnone size-full wp-image-102" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2010-07-07 03:28:24</wp:post_date>
		<wp:post_date_gmt>2010-07-07 03:28:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enabling-design-mode-in-asp-net-webparts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278473306]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using data binding in Silverlight</title>
		<link>http://crmvoyager.wordpress.com/?p=243</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=243</guid>
		<description></description>
		<content:encoded><![CDATA[Observable collections

paths.
dynamically creating data bindings.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date>2010-11-03 14:37:42</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deploying Sandboxed Solutions to SharePoint 2010</title>
		<link>http://crmvoyager.wordpress.com/?p=284</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[As I mentioned in my last post, I'm in the process of finishing several SharePoint deployment articles. This article will focus on explaining what is meant by a sandboxed solution and how it differs from a site solution. I will go through the process of deploying a sandboxed solution and looking at the services that underpin running user code in SharePoint.

Compared to earlier versions of SharePoint, 2010 has a greatly expanded capability for hosting third-party and custom code. This capability comes with the price of additional complexity when planning and executing deployments. However the advantages of deploying code to a more controlled environment that still operates within SharePoint allows more flexibility to roll code out beta code in stages rather than deploying to the entire farm and risking instability.

Code that runs in the SharePoint sandbox is subject to several restrictions, one of which being that so-called "Visual Web Part" projects cannot be deployed as sandboxed solutions. However standard Web Parts may be deployed this way. Confusingly, the only difference between a Visual Web Part and a regular Web Part is that a Visual part uses an ASP.NET user control, an .ascx file, for its main rendering component. If we build the part programmatically we won't run into this limitation. This is enforced from within Visual Studio, so we won't have to worry too much about whether the package will work, but it is worth pointing out here.

The Visual Studio tools have a setting allowing you to specify your intent to deploy the package as a sandboxed solution, but this setting does not seem to affect the actual package that is created. It will let Visual Studio warn you if a security level higher than what is allowed in the sandbox is requested by one of the features that you intend to deploy with the solution.

<i>Visual Studio project properties panel showing sandboxed solution option</i>
<a href="http://crmvoyager.files.wordpress.com/2010/11/vs-sandboxed.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/vs-sandboxed.png" alt="" title="vs-sandboxed" width="493" height="377" class="aligncenter size-full wp-image-286" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2010-11-19 23:02:02</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Model-View-ViewModel in Silverlight</title>
		<link>http://crmvoyager.wordpress.com/?p=291</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=291</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date>2010-11-21 15:40:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Silverlight Application Architecture</title>
		<link>http://crmvoyager.wordpress.com/?p=293</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=293</guid>
		<description></description>
		<content:encoded><![CDATA[I've been through one prototype project and one production project now done in Silverlight, and I wanted to do a wrap-up post on applying my typical design techniques in coming up with a workable architecture for the projects.

Architecture goals:

Service oriented architecture using WCF
Shared base class to define the data types in the application domain
Interfaces for domain actions
Factory for instantiating implementations
Model-View-ViewModel UI architecture

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date>2010-11-22 15:54:08</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hierarchical data binding in Silverlight 4</title>
		<link>http://crmvoyager.wordpress.com/?p=295</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=295</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date>2010-11-22 16:57:42</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Troubleshooting Microsoft SQL queries in production - part 1</title>
		<link>http://crmvoyager.wordpress.com/?p=385</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=385</guid>
		<description></description>
		<content:encoded><![CDATA[I'm fresh off of a troubleshooting scenario involving a pretty big SQL server installation and I thought it would be worth going through the steps to show you how to use the Microsoft-supplied tools to figure out why a query is timing out or failing.

I've broken this tutorial down into two parts. The first part, contained in this post, will cover finding out how to recover the SQL query from a running SQL server instance using SQL Profiler. The second part will go into some steps to take to find out why the query recovered in part 1 is not performing as expected.

Starting up 
<a href="http://crmvoyager.files.wordpress.com/2011/01/trace-properties.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/trace-properties.png" alt="" title="trace-properties" width="500" height="314" class="aligncenter size-full wp-image-391" /></a>

<a href="http://crmvoyager.files.wordpress.com/2011/01/result.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/result.png" alt="" title="result" width="500" height="319" class="aligncenter size-full wp-image-390" /></a>

<a href="http://crmvoyager.files.wordpress.com/2011/01/filter.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/filter.png" alt="" title="filter" width="405" height="313" class="aligncenter size-full wp-image-389" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date>2011-01-27 15:35:58</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Setting up subdomain host headers in IIS7</title>
		<link>http://crmvoyager.wordpress.com/?p=396</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=396</guid>
		<description></description>
		<content:encoded><![CDATA[One of the things few Microsoft Windows admins that I talk to know about is how to get two different Web sites listening on the same IP address and port in IIS7.

In IIS7 we add the host header by setting the host name in the bindings dialog.

m.foo.com works
m.s.foo.com won't ... seems to be a limitation of iis.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>396</wp:post_id>
		<wp:post_date>2011-01-30 13:32:42</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Understanding SiteCore CMS</title>
		<link>http://crmvoyager.wordpress.com/?p=462</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=462</guid>
		<description></description>
		<content:encoded><![CDATA[As a CRM consultant, there is no telling what kind of platforms your clients will want to integrate with. Whether it is Sharepoint, DotNetNuke, or something more esoteric like SiteCore, you've got to figure out which way is up and get up to speed quickly.

As the title suggests, I had to get going on SiteCore recently, and since there is a lot less information out there on it than there is on SharePoint and others, it took longer than it should have to drill into the basics.

To their credit I'll say that once I found my way around the SiteCore SDN articles there was a wealth of good information, but you've got to wade past some fluff and some esoteric stuff to find the gems for getting oriented.

<h2>Getting the terminology</h2>
The very first thing I needed to do was to create a custom layout. Every CMS has a different name for this, SharePoint calls them Web Parts, DNN calls them Modules. Whatever the name, they are usually chunks of ASP.NET code that get inserted into the rendering of the page somehow. Since SiteCore uses different terminology and since the page rendering methodology is a bit different than you are probably used to, I'd read the following <a href="http://sdn.sitecore.net/Developer/Fundamental%20Concepts.aspx">SDN article</a> about the relationship between Items, Templates, Masters, Layouts, SubLayouts. Understanding the terminology and how the pieces fit together is going to make everything else actually make some sense. In my first attempt I just played around in the UI and was pretty confused until I read the fundamental concepts article.

<h2>Creating a "hello world" layout</h2>

Looking in the SiteCore installation path, there are a few sample layouts there already. The default path is:

[sourcecode]
C:\inetpub\wwwroot\SitecoreWebsite\WebSite\layouts
[/sourcecode]

For my very first layout I just put a new file called "hellolayout.ascx" there and SiteCore picked it up. Just for fun, let's use the API to return the logged-in user:

[sourcecode language="csharp"]
&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;true&quot; TargetSchema=&quot;http://schemas.microsoft.com/intellisense/ie5&quot; %&gt;
&lt;h1&gt;
&lt;%=Sitecore.Context.GetUserName()%&gt;
&lt;/h1&gt;
[/sourcecode]

In order to test this code, we have to apply it to an item. Viewing it in the design-time viewer will not execute the C# code that we have embedded in the page. For reference, the design-time viewer is the UI that we see when browsing to the layout in the SiteCore content managment tree.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date>2011-02-25 14:25:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PCI compliance: disabling insecure SSL2.0</title>
		<link>http://crmvoyager.wordpress.com/?p=466</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=466</guid>
		<description></description>
		<content:encoded><![CDATA[Like many of you, I need to get client servers set up with PCI compliance in order to take credit cards from time to time. Part of this compliance usually consists of a questionnaire where you answer some questions about how credit card numbers are handled. In general, the less you handle the actual data, the lower the level of compliance that is required. However, in even the lowest level, a port scan will be performed against the host in question.

It may surprise you that IIS7 by default enables an insecure older variant of SSL. In this post I'm going to show you how to disable it so that you can keep SSL enabled on the box and maintain PCI compliance.

http://blog.techstacks.com/cryptonark.html


Can't locate Modern/Perl.pm in @INC (@INC contains: /etc/perl /usr/local/lib/perl/5.10.1 /usr/local/share/perl/5.10.1 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.10 /usr/share/perl/5.10 /usr/local/lib/site_perl .) at ./cnark.pl line 3.
BEGIN failed--compilation aborted at ./cnark.pl line 3.

$ sudo install libssl-dev
$ sudo cpan Modern::Perl
$ sudo cpan Tie::Hashed::Indexed
$ sudo cpan IO::Socket::SSL
$ sudo cpan Mozilla::CA

dan@X200:~/bin$ ./cnark.pl -h www.ubernote.com -p 443

SSL Certificate Information...
Certificate with Commmon Name www.ubernote.com appears to be valid.


Testing SSLv2 Ciphers...

Testing SSLv3 Ciphers...
    DES-CBC3-SHA -- 168 bits, High Encryption
    RC4-SHA -- 128 bits, Medium Encryption
    RC4-MD5 -- 128 bits, Medium Encryption

Testing TLSv1 Ciphers...
    AES256-SHA -- 256 bits, High Encryption
    DES-CBC3-SHA -- 168 bits, High Encryption
    AES128-SHA -- 128 bits, High Encryption
    RC4-SHA -- 128 bits, Medium Encryption
    RC4-MD5 -- 128 bits, Medium Encryption

Hmm. Looks like SSL2 ciphers aren't working.

http://forums.iis.net/t/1151822.aspx



dan@X200:~$ nmap www.ubernote.com

Starting Nmap 5.21 ( http://nmap.org ) at 2011-04-01 02:31 PDT
Nmap scan report for www.ubernote.com (74.208.204.210)
Host is up (0.081s latency).
rDNS record for 74.208.204.210: u15393951.onlinehome-server.com
Not shown: 990 filtered ports
PORT     STATE SERVICE
25/tcp   open  smtp
53/tcp   open  domain
80/tcp   open  http
110/tcp  open  pop3
143/tcp  open  imap
443/tcp  open  https
2006/tcp open  invokator
3389/tcp open  ms-term-serv
8402/tcp open  unknown
8443/tcp open  https-alt

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date>2011-04-01 01:32:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_64f69f2434b7cac5ac46b3e30be5d04f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_63645aa9bad5d0576a25887f0a8f7d5d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Serialization: CRM entities vs DynamicEntities</title>
		<link>http://crmvoyager.wordpress.com/2010/07/07/serialization-crm-entities-vs-dynamicentities/</link>
		<pubDate>Wed, 07 Jul 2010 20:46:46 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[I did a quick experiment to see what the serialization formats look like for a DynamicEntity and a static entity type as found in the Microsoft.Crm.SdkTypeProxy namespace. The results were predictable by looking at the structure of each type of entity, but I thought that I'd post my results here if for no other reason than to provide you with some canned CRM data that you can use for testing, which was the entire point of this exercise for me. I also wanted to know if CRM entities could be 'round-tripped' -- that is, serialized to xml and then deserialized back to entity instances. The answer is yes, they certainly can. So we can grab some data from a live CRM installation and use it in offline tests. 

The following code illustrates the concept of using .NET serialization to round-trip a .NET type (a CRM entity in our specific case):
[sourcecode language="csharp"]
	public static Object RoundTrip( Type in_type, Object in_instance ) {
			System.Xml.Serialization.XmlSerializer xser = new System.Xml.Serialization.XmlSerializer( in_type );
			
			MemoryStream ms = new MemoryStream();
			xser.Serialize( ms, in_instance );
			ms.Seek( 0, SeekOrigin.Begin );

			Object retval = xser.Deserialize( ms );
			ms.Close();
			return retval;
		}
[/sourcecode]

When we save the intermediate results to disk, we get a file like this for a static product type:
[sourcecode language="xml"]
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;product xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
  &lt;createdby name=&quot;First name Last name&quot; dsc=&quot;0&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;3bbf2574-c324-df11-b753-0800277bde92&lt;/createdby&gt;
  &lt;createdon date=&quot;6/22/2010&quot; time=&quot;3:06 PM&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;2010-06-22T15:06:20-04:00&lt;/createdon&gt;
  &lt;defaultuomid name=&quot;Primary Unit&quot; dsc=&quot;0&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;36d207f3-3d9e-4e29-abf7-de19896e78dc&lt;/defaultuomid&gt;
  &lt;defaultuomscheduleid name=&quot;Default Unit&quot; dsc=&quot;0&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;999cdc43-8207-42f5-b15b-f4afdaee3f0f&lt;/defaultuomscheduleid&gt;
  &lt;exchangerate formattedvalue=&quot;1.0000000000&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;1&lt;/exchangerate&gt;
  &lt;iskit name=&quot;No&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;false&lt;/iskit&gt;
  &lt;isstockitem name=&quot;No&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;false&lt;/isstockitem&gt;
  &lt;modifiedby name=&quot;First name Last name&quot; dsc=&quot;0&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;3bbf2574-c324-df11-b753-0800277bde92&lt;/modifiedby&gt;
  &lt;modifiedon date=&quot;6/22/2010&quot; time=&quot;5:14 PM&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;2010-06-22T17:14:49-04:00&lt;/modifiedon&gt;
  &lt;name xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;Test Product&lt;/name&gt;
  &lt;organizationid name=&quot;danco&quot; dsc=&quot;0&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;c1c701e4-f69c-4363-8dba-41aa5d5754ac&lt;/organizationid&gt;
  &lt;pricelevelid name=&quot;My Price List&quot; dsc=&quot;0&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;4098399d-317e-df11-a711-0800277bde92&lt;/pricelevelid&gt;
  &lt;productid xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;40b0ae3d-317e-df11-a711-0800277bde92&lt;/productid&gt;
  &lt;productnumber xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;PROD1&lt;/productnumber&gt;
  &lt;producttypecode name=&quot;Sales Inventory&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;1&lt;/producttypecode&gt;
  &lt;quantitydecimal formattedvalue=&quot;2&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;2&lt;/quantitydecimal&gt;
  &lt;statecode formattedvalue=&quot;Active&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;Active&lt;/statecode&gt;
  &lt;statuscode name=&quot;Active&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;1&lt;/statuscode&gt;
  &lt;transactioncurrencyid name=&quot;US Dollar&quot; dsc=&quot;0&quot; xmlns=&quot;http://schemas.microsoft.com/crm/2007/WebServices&quot;&gt;447adec9-c324-df11-b753-0800277bde92&lt;/transactioncurrencyid&gt;
&lt;/product&gt;
[/sourcecode]

The DynamicEntity looks like this:
[sourcecode language="csharp"]
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;DynamicEntity xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; Name=&quot;product&quot;&gt;
  &lt;Properties xmlns=&quot;http://schemas.microsoft.com/crm/2006/WebServices&quot;&gt;
    &lt;Property xsi:type=&quot;StateProperty&quot; Name=&quot;statecode&quot;&gt;
      &lt;Value&gt;Active&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;KeyProperty&quot; Name=&quot;productid&quot;&gt;
      &lt;Value&gt;40b0ae3d-317e-df11-a711-0800277bde92&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;CrmBooleanProperty&quot; Name=&quot;iskit&quot;&gt;
      &lt;Value name=&quot;No&quot;&gt;false&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;CrmDateTimeProperty&quot; Name=&quot;createdon&quot;&gt;
      &lt;Value date=&quot;6/22/2010&quot; time=&quot;3:06 PM&quot;&gt;2010-06-22T15:06:20-04:00&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;CrmDateTimeProperty&quot; Name=&quot;modifiedon&quot;&gt;
      &lt;Value date=&quot;6/22/2010&quot; time=&quot;5:14 PM&quot;&gt;2010-06-22T17:14:49-04:00&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;LookupProperty&quot; Name=&quot;defaultuomscheduleid&quot;&gt;
      &lt;Value name=&quot;Default Unit&quot; type=&quot;uomschedule&quot; dsc=&quot;0&quot;&gt;999cdc43-8207-42f5-b15b-f4afdaee3f0f&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;PicklistProperty&quot; Name=&quot;producttypecode&quot;&gt;
      &lt;Value name=&quot;Sales Inventory&quot;&gt;1&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;StringProperty&quot; Name=&quot;name&quot;&gt;
      &lt;Value&gt;Test Product&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;CrmBooleanProperty&quot; Name=&quot;isstockitem&quot;&gt;
      &lt;Value name=&quot;No&quot;&gt;false&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;StatusProperty&quot; Name=&quot;statuscode&quot;&gt;
      &lt;Value name=&quot;Active&quot;&gt;1&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;LookupProperty&quot; Name=&quot;transactioncurrencyid&quot;&gt;
      &lt;Value name=&quot;US Dollar&quot; type=&quot;transactioncurrency&quot; dsc=&quot;0&quot;&gt;447adec9-c324-df11-b753-0800277bde92&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;CrmDecimalProperty&quot; Name=&quot;exchangerate&quot;&gt;
      &lt;Value formattedvalue=&quot;1.0000000000&quot;&gt;1.0000000000&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;LookupProperty&quot; Name=&quot;pricelevelid&quot;&gt;
      &lt;Value name=&quot;My Price List&quot; type=&quot;pricelevel&quot; dsc=&quot;0&quot;&gt;4098399d-317e-df11-a711-0800277bde92&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;LookupProperty&quot; Name=&quot;modifiedby&quot;&gt;
      &lt;Value name=&quot;First name Last name&quot; type=&quot;systemuser&quot; dsc=&quot;0&quot;&gt;3bbf2574-c324-df11-b753-0800277bde92&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;StringProperty&quot; Name=&quot;productnumber&quot;&gt;
      &lt;Value&gt;PROD1&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;LookupProperty&quot; Name=&quot;defaultuomid&quot;&gt;
      &lt;Value name=&quot;Primary Unit&quot; type=&quot;uom&quot; dsc=&quot;0&quot;&gt;36d207f3-3d9e-4e29-abf7-de19896e78dc&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;CrmNumberProperty&quot; Name=&quot;quantitydecimal&quot;&gt;
      &lt;Value formattedvalue=&quot;2&quot;&gt;2&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;LookupProperty&quot; Name=&quot;createdby&quot;&gt;
      &lt;Value name=&quot;First name Last name&quot; type=&quot;systemuser&quot; dsc=&quot;0&quot;&gt;3bbf2574-c324-df11-b753-0800277bde92&lt;/Value&gt;
    &lt;/Property&gt;
    &lt;Property xsi:type=&quot;LookupProperty&quot; Name=&quot;organizationid&quot;&gt;
      &lt;Value name=&quot;danco&quot; type=&quot;organization&quot; dsc=&quot;0&quot;&gt;c1c701e4-f69c-4363-8dba-41aa5d5754ac&lt;/Value&gt;
    &lt;/Property&gt;
  &lt;/Properties&gt;
&lt;/DynamicEntity&gt;
[/sourcecode]

I'll be following up with how I'm using this in my mock CRM implementation that I'm going to use for testing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2010-07-07 20:46:46</wp:post_date>
		<wp:post_date_gmt>2010-07-07 20:46:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>serialization-crm-entities-vs-dynamicentities</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278535609]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting a remote shell with Windows</title>
		<link>http://crmvoyager.wordpress.com/2010/07/12/getting-a-remote-shell-with-windows/</link>
		<pubDate>Mon, 12 Jul 2010 06:50:57 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[Have you ever wanted to do a quick IISReset on a remote server without having to switch to or start a remote desktop session? Shouldn't it be as easy as it is on Linux where you can have a console open for any machine that is running SSH (which is just about every Linux box)?

There are several different ways to get remote commandline access to a Windows machine. The guys at Sysinternals have offered a free tool called <a href="http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx">PSExec</a> for years now that works great if you are on a local network. However, it relies on a lot of tricks that include the Windows file sharing ports which are typically blocked if the machine is behind a firewall. Microsoft, starting with Windows Server 2008, provides its own next-generation shell called PowerShell that is supposed to make all of this pain go away. My experience is that there are so many steps needed to get two machines talking remotely over PowerShell (I'll blog about this sometime, as it can be worth it in some cases -- PowerShell really is quite, er, powerful).

Recently I wrote <a href="http://crmvoyager.wordpress.com/2010/06/29/connecting-to-ms-crm-over-ssh/">an article</a> about creating backhaul SSH tunnels from a remote host back into your development machine. Today, I'm going to show you how you can use a tunnel set up using SSH to get a Windows command prompt on the remote server.

We are going to use a tool called Netcat to accomplish our goal. Netcat for Windows can be downloaded <a href="http://joncraton.org/files/nc111nt.zip">here</a>. We will need this tool on both ends of the connection -- client and server. Netcat needs no installation, but it is handy if we have it in the path somewhere so it can be invoked from the commandline easily. 

Once we have Netcat on both machines we can set up the server to listen on a port of our choosing and serve up cmd.exe over the network. On the client end, we will use Netcat again, but in client mode, to connect to the server and display the output from cmd.exe on the local machine.

On the server we invoke Netcat like so:
[sourcecode]
&gt; nc -l -p 7777 -e &quot;cmd.exe&quot;
[/sourcecode]
Here we are telling Netcat to enter listen mode on port 7777, executing 'cmd.exe' when a client connects. Netcat will forward all input from the network to cmd.exe and return all output back over the network.

On the client end, we connect 
[sourcecode]
&gt; nc localhost 7777
Microsoft Windows [Version 6.0.6001]
Copyright (c) 2006 Microsoft Corporation.  All rights reserved.
&gt;
[/sourcecode]
Wait a minute, why are we connecting to 'localhost' if we really want to get a remote shell? Well in the <a href="http://crmvoyager.wordpress.com/2010/06/29/connecting-to-ms-crm-over-ssh/">previous article</a>, where we set up the SSH tunnel, we configured our backhaul connection to listen on the remote port 7777, and the client is that remote host, so from the client's perspective we need to connect to localhost. Then the tunnel does its thing, which is to forward traffic from the local port 7777 to the remote port, where we have Netcat listening.

We can prove that we are actually on the remote host by doing something like this:
[sourcecode]
&gt; hostname
remote-srvr
&gt;
[/sourcecode]

Hopefully this saves you some time, since now you can just switch to your command window and type 'iisreset' instead of messing with remote desktop. One thing that I'd like to get working, but haven't yet, is some console text editor. I have tried VIM and some others, but they all try to access the local console via some mechanism other than standard out, so they don't work. VIM tries to change the display mode of the console window that the remote Netcat process is running under rather than the local console window that the client is running in. Perhaps if we ran the Netcat server as a service without an attached console things would work. Hopefully someone can help me out in the comments.

One parting note -- the listening Netcat has no security, so anyone on the remote network can connect to it. As long as the remote network is secure and behind the firewall, using Netcat for remote connections shouldn't pose much of a risk, especially since once you are connected no one else can connect to your running Netcat process.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2010-07-12 06:50:57</wp:post_date>
		<wp:post_date_gmt>2010-07-12 06:50:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-a-remote-shell-with-windows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278917459]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Understanding CRM LinkEntities</title>
		<link>http://crmvoyager.wordpress.com/2010/07/13/understanding-crm-linkentities/</link>
		<pubDate>Tue, 13 Jul 2010 03:37:22 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[Anyone that has spent some time developing solutions for Microsoft CRM should be familiar at least with grabbing an entity instance or collection of instances from CRM using CrmService.Retrieve() or CrmSevice.RetrieveMultiple(). It is conceptually straightforward to pass CRM an ID and get the corresponding instance back. While a little more advanced, <a href="http://crmvoyager.wordpress.com/2010/07/07/querying-crm-with-conditions-and-filters/">using FilterExpressions</a> is still pretty easy to visualize, since we are dealing with properties of a single entity. Things start to get a little more complex if we'd like to involve more than a single entity in our selection criteria however.

In CRM, in order to perform a query that takes more than a single entity into consideration we need to use a LinkEntity. Notice that I didn't say that we'd like to perform a query that returns more than a single entity type, since CRM QueryExpression queries are limited to returning a single type of entity. We can get around this limitation by using the FetchXml interface, but the data is returned as Xml rather than BusinessEntity instances, so we would have to pull out what we need by hand.

One of the things that makes LinkEntities confusing initially is the idea that we are traversing the relationship in a particular direction -- that is, there is a 'from' entity and a 'to' entity. In terms of a typical SQL join, we are dealing with sets, so we can express the relation from either end. That is, we could write a query that returns a parent row along with the related detail rows using either of the following SQL statements:

[sourcecode language="sql"]
select detail.* from parent 
inner join detail
on detail.parentid = parent.id
where parent.id = 123

select detail.* from detail
inner join parent 
on detail.parentid = parent.id
where parent.id = 123
[/sourcecode]

However, in CRM, we must start the relation with the entity that we wish to return as the result. So, if we'd like to return the detail entities for a particular parent entity, we'd need to traverse the relationship from detail to parent rather than parent to detail. 

Let's try to write a LinkEntity expression using the example given above. We know that the corresponding SQL statement would be of the second form in the code listing. The LinkEntity is constructed using the entity name and field on each side of the SQL 'on' clause. The only thing to watch out for is the order -- that is, which entity is used as the 'from' side and which is the 'to' side. Since we are going from detail to parent given that we'd like to return the detail entities as the result, we'd use SQL of the form:

[sourcecode language="sql"]
detail.parentid = parent.id
[/sourcecode]

which corresponds to the following LinkEntity construction:

[sourcecode language="csharp"]
LinkEntity linkEntity = new LinkEntity();			
linkEntity.LinkFromEntityName = &quot;detail&quot;;
linkEntity.LinkFromAttributeName = &quot;parentid&quot;;
linkEntity.LinkToEntityName = &quot;parent&quot;;
linkEntity.LinkToAttributeName = &quot;id&quot;;
linkEntity.JoinOperator = JoinOperator.Inner;
[/sourcecode]

That seemed pretty straightforward. There is one more thing that we must do in order to construct a useful query -- add the condition that selects which parent instance we are interested in. I've covered FilterConditions in a <a href="http://crmvoyager.wordpress.com/2010/07/07/querying-crm-with-conditions-and-filters/">previous post</a>, and we are going to construct a FilterCondition in just the same way. Here is the code:

[sourcecode language="csharp"]
FilterExpression filter = new FilterExpression();
filter.FilterOperator = LogicalOperator.And;

ConditionExpression condition = new ConditionExpression();
condition.AttributeName = &quot;id&quot;;
condition.Operator = ConditionOperator.Equal;
condition.Values = new int[] { 123 };

filter.Conditions = new ConditionExpression[] { condition };
[/sourcecode]

Now that we have the filter, the only tricky part is where to put it. Since FilterExpressions don't specify the entity to which they apply, the placement of the expression is critical. Since we want to apply this filter to the parent entity, and the parent entity is the 'from' entity of the LinkCriteria, we'll need to attach it to the LinkCriteria of the LinkEntity rather than the FilterCriteria of the QueryExpression like this:

[sourcecode language="csharp"]
linkEntity.LinkCriteria = filter;
[/sourcecode]

The full query code looks like this, including the creating of the QueryExpression:

[sourcecode language="csharp"]
LinkEntity linkEntity = new LinkEntity();			
linkEntity.LinkFromEntityName = &quot;detail&quot;;
linkEntity.LinkFromAttributeName = &quot;parentid&quot;;
linkEntity.LinkToEntityName = &quot;parent&quot;;
linkEntity.LinkToAttributeName = &quot;id&quot;;
linkEntity.JoinOperator = JoinOperator.Inner;

FilterExpression filter = new FilterExpression();
filter.FilterOperator = LogicalOperator.And;

ConditionExpression condition = new ConditionExpression();
condition.AttributeName = &quot;id&quot;;
condition.Operator = ConditionOperator.Equal;
condition.Values = new int[] { 123 };

filter.Conditions = new ConditionExpression[] { condition };

linkEntity.LinkCriteria = filter;

QueryExpression query = new QueryExpression( in_fromEntity );
query.LinkEntities.Add( linkEntity );
query.ColumnSet = new AllColumns();
[/sourcecode]

Hopefully this post clears up some of the confusing aspects of using LinkEntities. I have spent a long time trying to track down mysterious bugs related to getting the entity order wrong or attaching the FilterCriteria in the wrong place. The documentation doesn't explain this well in my opinion, so hopefully this saves you some grief.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2010-07-13 03:37:22</wp:post_date>
		<wp:post_date_gmt>2010-07-13 03:37:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>understanding-crm-linkentities</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278992242]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[Yusuf]]></wp:comment_author>
			<wp:comment_author_email>yusuf@octaware.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.247.1.169</wp:comment_author_IP>
			<wp:comment_date>2011-05-11 03:28:35</wp:comment_date>
			<wp:comment_date_gmt>2011-05-11 11:28:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, Topic is well explained .Keep posting ...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1305113315.377";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1305146125]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305146125.4646";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[Xitij Thool]]></wp:comment_author>
			<wp:comment_author_email>KTTHOOL@GMAIL.COM</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.179.161.113</wp:comment_author_IP>
			<wp:comment_date>2012-03-07 04:24:52</wp:comment_date>
			<wp:comment_date_gmt>2012-03-07 12:24:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks, it Cleared all my doubts about using LinkEntity.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331123092.4657";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[Phil]]></wp:comment_author>
			<wp:comment_author_email>philip.reed@aesseal.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.159.132.48</wp:comment_author_IP>
			<wp:comment_date>2012-04-13 07:12:05</wp:comment_date>
			<wp:comment_date_gmt>2012-04-13 15:12:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Brilliant.  Thank you so much for this post.
Explains Link Entities much clearer than the SDK Documentation.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334330131.5597";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1334330131]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334329925.3559";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[Phil]]></wp:comment_author>
			<wp:comment_author_email>philip.reed@aesseal.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.159.132.48</wp:comment_author_IP>
			<wp:comment_date>2012-04-13 07:41:47</wp:comment_date>
			<wp:comment_date_gmt>2012-04-13 15:41:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One question, you mention that it is important to please the filter expression in the correct place.
To filter the parent, you assign the condition expression to the LinkEntity.LinkCriteria.  How would you add a filter to the detail entity aswell?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>71</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1334331707]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334331707.7763";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[newcome]]></wp:comment_author>
			<wp:comment_author_email>djn125@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.184.88.194</wp:comment_author_IP>
			<wp:comment_date>2012-04-13 20:57:12</wp:comment_date>
			<wp:comment_date_gmt>2012-04-14 04:57:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Phil, you should be able to add a FilterExpression directly to the QueryExpression using QueryExpression.Criteria. The key is to keep in mind which entity you are dealing with at a particular place in the query object tree. Since in the example above, the top level is the detail entity, which I called the "From" entity (the hypothetical in_fromEntity method parameter) and that is the entity that possesses the field that you want to filter on, you'd add it there.

I think that this API is super-confusing. I wrote an API wrapper called CRMQuery to make common queries easy to write. You can check it out on GitHub. <a href="https://github.com/dnewcome/crmQuery" rel="nofollow">https://github.com/dnewcome/crmQuery</a>

It won't work for every query but I've found that it can simplify the code a lot in many cases.

Good luck.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>72</wp:comment_parent>
			<wp:comment_user_id>2496294</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1334379433]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334379433.8048";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[Phil]]></wp:comment_author>
			<wp:comment_author_email>philip.reed@aesseal.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.159.132.48</wp:comment_author_IP>
			<wp:comment_date>2012-04-15 23:46:17</wp:comment_date>
			<wp:comment_date_gmt>2012-04-16 07:46:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks newcome,

I managed to figure it out just before I saw your reply.
It certainly is quite confusing but im getting the hang of it.
Will take a look at your wrapper.

Thanks again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>73</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1334562378]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334562378.4415";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>.NET references not found in Visual Studio</title>
		<link>http://crmvoyager.wordpress.com/2010/07/16/net-references-not-found-in-visual-studio/</link>
		<pubDate>Fri, 16 Jul 2010 19:31:27 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[I just had this happen to me a second time, and I didn't recall what I did the first time so I'm blogging it now. The issue is that you add a reference to some library in Visual Studio and it just won't pick up the reference. There are a lot of things that can cause this, but the one that gets me is the platform target setting of the project. If you are building for a specific CPU the project will try to resolve references to any assemblies using the same CPU target. Most of the time we are building purely managed assemblies, so the setting is 'Any CPU'. Sometimes new projects get created by Visual studio with x86 as the target platform (not sure why this is) so none of your references work until you recall to change the setting back to 'Any CPU'. If you don't know what I'm talking about, take a look at the following screenshots:
[gallery order="DESC"]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2010-07-16 19:31:27</wp:post_date>
		<wp:post_date_gmt>2010-07-16 19:31:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>net-references-not-found-in-visual-studio</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1279308687]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Installing ASP.NET 4.0 on Server2003/IIS6</title>
		<link>http://crmvoyager.wordpress.com/2010/08/02/installing-asp-net-4-0-on-server2003iis6/</link>
		<pubDate>Mon, 02 Aug 2010 16:35:20 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[I was deploying an application for a client today when I realized that they didn't have the 4.0 framework installed on the target machine. I've done this plenty of times, but apparently I forget this one configuration step each time. For the benefit of myself and hopefully others, here is a description of the problem and the solution.

Problem: we need to install a 4.0 application to a server that is running IIS6 and doesn't have the 4.0 framework yet installed.

Initially, hitting the page gives us the following error:

Line 19: 	/&gt; Line 20: 	&lt;system.web&gt; <span style="color:red;">Line 21: 		&lt;compilation debug="true" targetFramework="4.0"/&gt; </span>Line 22: 	&lt;/system.web&gt; Line 23: &lt;/configuration&gt;

Ok, great, so all we have to do is install .NET 4.0. We'll fire off the web installer from <a href="http://www.microsoft.com/downloads/details.aspx?familyid=9cfb2d51-5ff4-4491-b0e5-b386f32c0992&amp;displaylang=en">here</a>

Once we have things installed, we can select 4.0 as the framework for our site in the IIS6 configuration page for the site:

<a href="http://crmvoyager.files.wordpress.com/2010/08/set-site-4-0.png"><img class="alignnone size-full wp-image-135" title="set-site-4.0" src="http://crmvoyager.files.wordpress.com/2010/08/set-site-4-0.png" alt="" width="472" height="458" /></a>

So far, so good. Restart IIS and browse to the page, and:
<h1>The page cannot be found</h1>
The page you are looking for might have been  removed, had its name changed, or is temporarily unavailable.

<hr />Please try the following:
<ul>
	<li>Make sure that the Web site address displayed in the address bar of your  browser is spelled and formatted correctly.</li>
	<li>If you reached this page by clicking a link, contact the Web site  administrator to alert them that the link is incorrectly formatted.</li>
	<li>Click the <a href="http://localhost:9982/bacb/Default.aspx">Back</a> button to try  another link.</li>
</ul>
<h2>HTTP Error 404 - File or directory not found.
Internet Information  Services (IIS)</h2>
Hmm.. a 404 error? Double check that .aspx files are registered to the new aspnet ISAPI filter:

<a href="http://crmvoyager.files.wordpress.com/2010/08/aspx-registration.png"><img class="alignnone size-full wp-image-134" title="aspx-registration" src="http://crmvoyager.files.wordpress.com/2010/08/aspx-registration.png" alt="" width="406" height="448" /></a>

Yes, they are registered. What else could cause a 404 error for our aspx pages? Other file types work: xml, html, etc.

This is the part that I always forget:

<a href="http://crmvoyager.files.wordpress.com/2010/08/service-extension-4.png"><img class="alignnone size-full wp-image-136" title="service-extension-4" src="http://crmvoyager.files.wordpress.com/2010/08/service-extension-4.png" alt="" width="500" height="265" /></a>

By default, new extensions are disabled. We have to enable the ISAPI extension that processes 4.0 framework pages.

Hopefully this helps someone out. It will help me the next time.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2010-08-02 16:35:20</wp:post_date>
		<wp:post_date_gmt>2010-08-02 16:35:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>installing-asp-net-4-0-on-server2003iis6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1280766920]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating GUIDs with Javascript Windows scripting host</title>
		<link>http://crmvoyager.wordpress.com/2010/08/18/creating-guids-with-windows-scripting-javascript/</link>
		<pubDate>Wed, 18 Aug 2010 21:44:17 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[I need to do some scripting from time to time, and I usually use Javascript to do everything. I needed to generate GUIDs for some CRM data that I wanted to create programmatically. I found <a href="http://blogs.technet.com/b/heyscriptingguy/archive/2005/02/21/how-can-i-create-a-guid-using-a-script.aspx">this article</a> from the Microsoft Scripting Guy.

He gave the example in VBScript, so here is the equivalent in JScript:
[sourcecode language="javascript"]
function guidGen() {
    var typeLib = new ActiveXObject( &quot;Scriptlet.TypeLib&quot; );
    return typeLib.Guid;
}
[/sourcecode]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2010-08-18 21:44:17</wp:post_date>
		<wp:post_date_gmt>2010-08-18 21:44:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-guids-with-windows-scripting-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1282167857]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Including multiple script files with Windows scripting</title>
		<link>http://crmvoyager.wordpress.com/2010/08/18/including-multiple-script-files-with-windows-scripting/</link>
		<pubDate>Wed, 18 Aug 2010 22:03:50 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[I'm using a Javascript library in order to do some data manipulation, and I wondered if there was a way to include the source JS file in my script. There is nothing like an include directive in WSH but it does support a mechanism for managing script files that is very similar to how it would work in a Web browser. To do this we create a file with the .wsf extension:

[sourcecode language="xml"]
&lt;job&gt;
  &lt;script language=&quot;JScript&quot; src=&quot;library.js&quot;/&gt;
  &lt;script language=&quot;JScript&quot; src=&quot;main.js&quot;/&gt;
    &lt;script language=&quot;JScript&quot;&gt;
       WScript.Echo( doFunction() );
    &lt;/script&gt;
&lt;/job&gt;
[/sourcecode]

Note that we can include files as well as inline code. The wsf script can now be invoked on the commandline with cscript as you would any vbs or js script file.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2010-08-18 22:03:50</wp:post_date>
		<wp:post_date_gmt>2010-08-18 22:03:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>including-multiple-script-files-with-windows-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1282169030]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating versioned output folders with Visual Studio (msbuild)</title>
		<link>http://crmvoyager.wordpress.com/2010/08/19/creating-versioned-output-folders-with-visual-studio/</link>
		<pubDate>Thu, 19 Aug 2010 14:39:18 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[I've been messing with several ways of doing binary code releases recently with mixed success. Ideally I want to be able to build a solution with msbuild and have the output moved into folders for debug and release, with the assembly version and the target framework having separate folder locations for each. In other words, the bin\ folder would look like this:

[sourcecode language="csharp"]
bin\
  1.0.0.0\
    v3.5\
      Debug\
      Release\
[/sourcecode]

The main requirement is that the modifications that I need to make must be compatible with Visual Studio. Other developers have to be able to use the project files normally and they have to do something sensible by default.

The other part of the problem is that I want the version number to be read out of the AssemblyInfo.cs file so that the folder name and the actual assembly version are always in sync. Unfortunately my attempts at reading AssemblyInfo.cs haven't worked out. Due to the peculiar behavior of msbuild when building Visual Studio project files, I'm not able to dynamically change the value of a property based on the results of a custom build task that reads the version number out of the file. There is enough there for another post on this, but that will have to come another time.

My new approach is to just feed the version number manually to a batch file that will call msbuild with the appropriate property value set.

Let's look at the changes that we need to make to the .csproj file. First we look at the OutputPath property and change it to use the target framework version and a custom property that we will define called PointVersion. The property definition looks like this:

[sourcecode language="xml"]
 &lt;OutputPath&gt;bin\$(PointVersion)\$(TargetFrameworkVersion)\Debug\&lt;/OutputPath&gt;
[/sourcecode]

I'm going to do the same change for the release configuration. The next thing is to define PointVersion and give it a default value. The default value is going to be SNAPSHOT, since if we aren't doing a release, we want to keep overwriting the same output rather than bumping the version number all the time or mistakenly updating the code of already-released versions. I want to avoid having binaries floating around that have the same version number but potentially different code. Here is the property definition:

[sourcecode language="xml"]
&lt;PointVersion&gt;SNAPSHOT&lt;/PointVersion&gt;
[/sourcecode]

Note that this is declared under the main section of the .csproj file. Now that this is set up, building the project from Visual Studio will give us a folder structure like this:

[sourcecode language="csharp"]
bin\
  SNAPSHOT\
    v3.5\
      Debug\
      Release\
[/sourcecode]

We're getting pretty close. Now we want a script called publish.bat that we can use to build all configurations that we want with one action. The very simplest thing we can do is to put several parameterized calls to msbuild into a batch file like this:

[sourcecode language="shell"]
msbuild /property:Configuration=Debug /property:PointVersion=%1
msbuild /property:Configuration=Release /property:PointVersion=%1
[/sourcecode]

which we can call with the version number as the first parameter like this:

[sourcecode language="shell"]
c:\&gt; publish.cmd 1.0.9.0
[/sourcecode]

This is not completely ideal, as I'd rather be able to bump the version in the AssemblyInfo.cs file. The next step is to grab the regular expression from the msbuild task that I found and run it in the batch file probably. I wish things would have worked out within msbuild, but it seems that this kind of thing is endemic to build systems in general.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2010-08-19 14:39:18</wp:post_date>
		<wp:post_date_gmt>2010-08-19 14:39:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-versioned-output-folders-with-visual-studio</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1282228758]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Working with DynamicEntity properties</title>
		<link>http://crmvoyager.wordpress.com/2010/08/24/working-with-dynamicentity-properties/</link>
		<pubDate>Tue, 24 Aug 2010 18:42:01 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[After working on several client projects involving DynamicEntities, I have a few things to get written up from my notes. Since DynamicEntities, by definition, are not strongly-typed (in terms of CRM entities, of course they are concrete .NET types themselves) they require a bit of casting-and-cajoling in order to work with.

The first thing to note is that if a field is empty in CRM, DynamicEntity objects that are passed back from the CRM service won't have this field in the properties collection at all. This means that we have to check for the field before we even start. Accessing the collection via its string indexer will throw an exception if the property doesn't exist. In code:

[sourcecode language="csharp"]
if( dynamicEntity.Properties.Contains( &quot;myprop&quot; ) ) { 
     // throws if &quot;myprop&quot; doesn't exist in the collection
     myProp = de.Properties[&quot;myprop&quot; ];
}
[/sourcecode]

The second big thing is that, while we need an actual Property instance when adding properties to a DynamicEntity, they are not returned when read back from the collection. The DynamicEntity doesn't even keep a reference to the Property instance under the hood -- it basically throws it away. In code:

[sourcecode language="csharp"]
// adding
DynamicEntity de = new DynamicEntity();
de.Properties.Add( new CrmNumberProperty( &quot;num&quot;, new CrmNumber( 42 ) ) );

// retrieving
CrmNumber num = ( CrmNumber )de.Properties[ &quot;num&quot; ];
[/sourcecode]

I'll post a few more things later and hopefully some code to keep this kind of complexity in check.

Update:
I just wanted to add a little tidbit brought up by someone about iterating over a PropertyCollection. When performing an iteration over a collection of properties, there is an implicit conversion to Property that happens in the iteration statement. Take this sample code:

[sourcecode language="csharp"]
foreach( &lt;strong&gt;Property prop in in_entity.Properties&lt;/strong&gt; ) {
				if( prop.Name.IndexOf( in_entity.Name + &quot;id&quot; ) != -1 ) {
					return ( (Key) ( &lt;strong&gt;( KeyProperty )&lt;/strong&gt;prop ).Value).Value;
				}
			}

[/sourcecode]

I've bolded the conversion to Property as well as the cast back to KeyProperty. We still start out with a Key object, but it apparently GetEnumerator() wraps things up into a Property object behind the scenes.

Here is the disassembled code for PropertyCollection.InternalGetEnumerator():

[sourcecode language="csharp"]
private IEnumerator&lt;Property&gt; InternalGetEnumerator()
{
    List&lt;Property&gt; list = new List&lt;Property&gt;();
    foreach (KeyValuePair&lt;string, object&gt; pair in this._nameToPropertyValue)
    {
        list.Add(PropertyFactory.Instance.CreateInstance(pair.Key, pair.Value));
    }
    return list.GetEnumerator();
}
[/sourcecode]

Here we see that internally there is a PropertyFactory that wraps the raw value up into a Property.

Hopefully this sheds some light on this confusing behavior.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2010-08-24 18:42:01</wp:post_date>
		<wp:post_date_gmt>2010-08-24 18:42:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-with-dynamicentity-properties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1282675321]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating a PayPal PayFlow test account</title>
		<link>http://crmvoyager.wordpress.com/2010/09/09/creating-a-paypal-payflow-test-account/</link>
		<pubDate>Thu, 09 Sep 2010 22:48:29 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[Several of our clients use PayPal as their payment gateway, so we have some general library code that deals with the PayPal payment gateway (PayFlow Pro).

In order to test our our code, of course we needed a sandbox account on the PayPal servers. However, it is not obvious how this works. Fortunately, I came across <a href="http://www.richardcastera.com/2009/10/13/how-to-create-a-sandbox-paypal-payflow-account/">this post</a> that describes how to get a test account set up. It is a bit counterintuitive, but you go through the signup process for a full account and just abort at the last step.

Hopefully this post adds some weight to this guy's post (It worked great for me).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date>2010-09-09 22:48:29</wp:post_date>
		<wp:post_date_gmt>2010-09-09 22:48:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-a-paypal-payflow-test-account</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1284072509]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CRM API quirks</title>
		<link>http://crmvoyager.wordpress.com/2010/09/09/crm-api-quirks/</link>
		<pubDate>Thu, 09 Sep 2010 23:12:29 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[I come across oddities and oversights pretty frequently in the CRM SDK/API. The latest one is that there is no way to write a generic method to pull a property value out of a CRM Property type. Let me show you what I'd like to write:

[sourcecode language="csharp"]
public static TResult GetPropertyValue&lt;T, TResult&gt;( T in_property ) where T : Property
{
      try {
        return ( ( T )in_property ).Value;
     }
     catch{
        return default( TResult );
    }
}
[/sourcecode]

This doesn't work since Property doesn't define a value parameter. It is up to the individual derived classes to define this. I can understand maybe they didn't want to constrain all Property types to have a value, but it would be nice to have IDataProperty or some kind of interface that defines the Value parameter. To put this into perspective, the SDK code that handles this simple function is nearly 100 lines of code, and relies on runtime type identification (reflection) in order to determine how to cast the value properly.

[sourcecode language="csharp"]
       private object GetPropertyValue(object prop)
        {
            Type propertyType = prop.GetType();
            if( propertyType == typeof( StringProperty ) ) {
                return ( (StringProperty )prop ).Value;
            }
            else if (propertyType == typeof(CrmDateTimeProperty)) {
               ...
           }
       ...
     }
[/sourcecode]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2010-09-09 23:12:29</wp:post_date>
		<wp:post_date_gmt>2010-09-09 23:12:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>crm-api-quirks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1284073951]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Key properties in CRM</title>
		<link>http://crmvoyager.wordpress.com/2010/09/21/key-properties-in-crm/</link>
		<pubDate>Tue, 21 Sep 2010 01:53:01 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[I was debugging a piece of code just now when I realized that my problem was in an assumption that I had made about Key properties in a DynamicEntity.

I thought that a Key field was a unique key for the entity instance, which it is, sort of. There apparently can be more than one Key field in an entity instance, so my code that was supposed to return the ID of an entity instance wasn't working because it was finding a second Key field:

[sourcecode language="csharp"]
		public static Guid GetDynamicEntityId( DynamicEntity in_entity ) {
			foreach( object prop in in_entity.Properties ) {
				if( prop is KeyProperty ) {
					return ( ( Key )( ( KeyProperty )prop ).Value ).Value;
				}
			}
			return Guid.Empty;
		}
[/sourcecode]

I'm at a loss now for a good way to return the ID of an entity instance. You could always assume that it is going to be the entity name + 'id', but I don't think that is 100% reliable. I could be wrong though. Since the IDs are GUIDs, I have no idea why it makes any sense to have more than one key (or a composite key). I'm still looking into this one.

Update:
I ended up with a hack that just looks at the entity name and tacks on 'id' to the end and searches for this string pattern in the attribute names. This feels pretty dirty, but I don't know what else to do.

Here is the code:

[sourcecode language="csharp"]
	public static Guid GetDynamicEntityId( DynamicEntity in_entity ) {
			foreach( Property prop in in_entity.Properties ) {
				if( prop.Name.IndexOf( in_entity.Name + &quot;id&quot; ) != -1 ) {
					return ( (Key) ( ( KeyProperty )prop ).Value).Value;
				}
			}
			return Guid.Empty;
		}
[/sourcecode]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2010-09-21 01:53:01</wp:post_date>
		<wp:post_date_gmt>2010-09-21 01:53:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>key-properties-in-crm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1285033983]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building SharePoint projects with CruiseControl</title>
		<link>http://crmvoyager.wordpress.com/2010/10/06/building-sharepoint-projects-with-cruisecontrol/</link>
		<pubDate>Wed, 06 Oct 2010 00:09:50 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Short version</strong>: 

See <a href="http://msdn.microsoft.com/en-us/library/ff622991.aspx">this MSDN article</a>.

<strong>Longer version:</strong>

I needed to get another developer's WebParts building under my <a href="http://confluence.public.thoughtworks.org/display/CCNET/Welcome+to+CruiseControl.NET">CruiseControl</a> server today. After checking the code out on the build box I realized that I would need a few dependencies that were not available since SharePoint was not installed on the build machine. After grabbing the obvious references I needed to build the project and changing the project references around I got to a point where MSBuild was giving me the following error:

[sourcecode language="bash"]
C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Common.targets(1835,9):
error MSB3091: Task failed because &quot;resgen.exe&quot; was not found, or the correct
Microsoft Windows SDK is not installed. 
[/sourcecode]


Ok, so apparently I needed to install the Windows SDK on the build box. More specifically, I needed to grab the .NET SDK, which is now distributed as part of the Windows SDK as of the .NET 4.0 Framework. Thankfully the Web installer allows you to install just the .NET components, so I didn't have to download the entire ISO image just to grab the .NET SDK.

I ran msbuild again and got the following error:

[sourcecode language="bash"]
C:\Program Files\CruiseControl.NET\...\SharePoint.WebParts.csproj(153,3): er
ror MSB4019: The imported project &quot;C:\Program Files\MSBuild\Microsoft\VisualStu
dio\v10.0\SharePointTools\Microsoft.VisualStudio.SharePoint.targets&quot; was not fo
und. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the
 file exists on disk.
[/sourcecode]

I copied the targets over from another machine that had Visual Studio installed, and now I got another error:

[sourcecode language="bash"]
C:\Program Files\MSBuild\Microsoft\VisualStudio\v10.0\SharePointTools\Microso
ft.VisualStudio.SharePoint.targets(343,5): error : Could not load file or assem
bly 'Microsoft.VisualStudio.SharePoint.Designers.Models, Version=10.0.0.0, Cult
ure=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The s
ystem cannot find the file specified.
[/sourcecode]

I searched around for Microsoft.VisualStudio.SharePoint.Designers.Models.dll but I didn't find it right away. I thought that it was time to start Googling around to see where this tunnel ends and turned up <a href="http://msdn.microsoft.com/en-us/library/ff622991.aspx">this document</a> from Microsoft.

This outlines exactly what I was trying to figure out in the steps above. Unfortunately it looks like a lot of work so I have to bail and just install CruiseControl on one of the SharePoint machines for now. I'll be sure to update this if I give it another shot.

UPDATE: 
I did get CruiseControl to build a SharePoint project on a machine without SharePoint installed on it. Every detail that you need to make this work is in the MSDN article for getting TFS builds to work. The only difference is that you will kick off the msbuild process from CruiseControl instead of TFS. One drawback to building on a machine that does not have SharePoint is that you won't be able to run automated tests that involve calls to SharePoint functionality. If you are careful about your design though, a lot of functionality can be tested without SharePoint since most Web Part functionality is now actually part of ASP.NET.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2010-10-06 00:09:50</wp:post_date>
		<wp:post_date_gmt>2010-10-06 00:09:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-sharepoint-projects-with-cruisecontrol</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286323791]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan]]></wp:comment_author>
			<wp:comment_author_email>jonathanperez@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.189.79.114</wp:comment_author_IP>
			<wp:comment_date>2012-06-03 19:42:23</wp:comment_date>
			<wp:comment_date_gmt>2012-06-04 03:42:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sometimes the only information needed is to know that it can be done.  thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338781343.8454";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1338782937]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1338782938.0274";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>85</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Scharinger]]></wp:comment_author>
			<wp:comment_author_email>timscharinger@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/timswe</wp:comment_author_url>
			<wp:comment_author_IP>90.227.113.73</wp:comment_author_IP>
			<wp:comment_date>2012-07-26 05:55:54</wp:comment_date>
			<wp:comment_date_gmt>2012-07-26 13:55:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for sharing! I've also hit the problem with "Microsoft.VisualStudio.SharePoint.Designers.Models".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1343310954.6872971057891845703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"timswe";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1343335298]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1343335298.7902109622955322265625;s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Silverlight unit testing</title>
		<link>http://crmvoyager.wordpress.com/2010/10/11/silverlight-unit-testing/</link>
		<pubDate>Mon, 11 Oct 2010 21:31:55 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[I've been on a tear with Microsoft Silverlight development, and now I've paused for a second and I'm wondering how can I test this stuff like I would with a <a href="http://seleniumhq.org/">regular website</a>?

Well it turns out that I'm not the only one to think this. The <a href="http://silverlight.codeplex.com/">Silverlight Toolkit</a> guys have included the <a href="http://code.msdn.microsoft.com/silverlightut">Silverlight Unit Test Framework</a> in their distribution. I just got the bits installed, and I'll be trying it out shortly so hold tight for some future posts on getting tests built for Silverlight apps.

<a href="http://www.jeff.wilcox.name/2008/03/silverlight2-unit-testing/">This</a> is the first tutorial that I'm going to look at, since it goes through the details of hooking into the UI. Some of the other tutorials don't go into this.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2010-10-11 21:31:55</wp:post_date>
		<wp:post_date_gmt>2010-10-11 21:31:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silverlight-unit-testing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286832718]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Silverlight content positioning - expanding to fill container</title>
		<link>http://crmvoyager.wordpress.com/2010/10/11/silverlight-content-positioning-expanding-to-fill-container/</link>
		<pubDate>Mon, 11 Oct 2010 21:33:24 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=192</guid>
		<description></description>
		<content:encoded><![CDATA[I just started writing some new Silverlight controls for a client project and I was struggling with trying to get a tab control to span the full width of its container. I was reading everywhere that setting Width="Auto" was the way to accomplish this in Silverlight4, rather than the old way of doing it, which was setting Width="*". However no matter what I did, I couldn't get my control to span its container.

Here was the code:

[sourcecode language="xml"]
  &lt;Grid x:Name=&quot;LayoutRoot&quot; Background=&quot;White&quot; Width=&quot;Auto&quot; Height=&quot;Auto&quot;&gt;
        &lt;sdk:TabControl Height=&quot;Auto&quot; Width=&quot;Auto&quot; HorizontalAlignment=&quot;Left&quot; Name=&quot;tabControl1&quot; VerticalAlignment=&quot;Top&quot; SelectionChanged=&quot;tabControl1_SelectionChanged&quot;&gt;
            &lt;sdk:TabItem Header=&quot;Details&quot; Name=&quot;tabItem1&quot; Width=&quot;Auto&quot; Height=&quot;Auto&quot;&gt;
                    &lt;Canvas Width=&quot;Auto&quot; Height=&quot;Auto&quot;&gt;
                        &lt;Button Height=&quot;12&quot; Margin=&quot;0,0,82,-6&quot; Width=&quot;124&quot; Content=&quot;Back&quot;&gt;&lt;/Button&gt;
                        &lt;Button Height=&quot;12&quot; Margin=&quot;0,0,82,-6&quot; Width=&quot;124&quot; Content=&quot;Next&quot;&gt;&lt;/Button&gt;
                    &lt;/Canvas&gt;
           &lt;/sdk:TabItem&gt;
      &lt;/sdk:TabControl&gt;
  &lt;/Grid&gt;
[/sourcecode]

The Grid element was filling its container just fine using Width="Auto", but its child TabControl was still not expanding. Finally I started removing attributes on the TabControl to get to the bare basics of what could work. After I removed the alignment properties I started getting somewhere. Here is the new code for the TabControl:

[sourcecode language="xml"]
 &lt;sdk:TabControl &lt;strong&gt;Height=&quot;Auto&quot; Width=&quot;Auto&quot; Name=&quot;tabControl1&quot; SelectionChanged=&quot;tabControl1_SelectionChanged&quot;&gt;
[/sourcecode]

This makes sense if you think about the alignment directives as CSS floats. There is no equivalent in CSS for the VerticalAlignment property, but it looks like the HorizontalAlignment is roughly analogous to a float. In HTML/CSS, floating a block level element causes it to contract in size to the dimensions of its contents. This is roughly what I was seeing here. Removing the float let the element expand to its container.

Hopefully the hour I spent messing with this helps somebody else out.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2010-10-11 21:33:24</wp:post_date>
		<wp:post_date_gmt>2010-10-11 21:33:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silverlight-content-positioning-expanding-to-fill-container</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286832807]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[Chuck Callebs]]></wp:comment_author>
			<wp:comment_author_email>andycallebs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://sudoit.org</wp:comment_author_url>
			<wp:comment_author_IP>65.5.133.195</wp:comment_author_IP>
			<wp:comment_date>2011-06-10 07:40:27</wp:comment_date>
			<wp:comment_date_gmt>2011-06-10 15:40:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This helped me out quite a bit. I'm finding it frustrating that the simplest things take so much initial trial and error. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307720427.8096";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1309362392]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309362392.8569";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Embedding Silverlight into a WebPart</title>
		<link>http://crmvoyager.wordpress.com/2010/10/12/embedding-silverlight-into-a-webpart/</link>
		<pubDate>Tue, 12 Oct 2010 20:14:15 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[A current project required me to drop a <a href="http://www.silverlight.net/">Silverlight</a> control into a <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.webparts.webpart.aspx">WebPart </a>for inclusion in a Microsoft <a href="http://sharepoint.microsoft.com/en-us/Pages/default.aspx">SharePoint </a>site. In the past, I think that the Silverlight component could be created programmatically like any other ASP.NET control, but if I understand correctly, this support has been dropped from the latest version of Silverlight (4.0 as of this writing). 

As you may know, WebParts do not natively support the use of the ASP.NET templating engine in order to assist with rendering its contents. That is, we can't create a corresponding markup file as we do with .aspx or .ascx components. We can work around this by using <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.loadcontrol.aspx">LoadControl()</a> in order to render a user control (.ascx file) within the body of the WebPart's CreateChildControls() method, but I wanted to see if I could avoid having to create a separate user control just for embedding my Silverlight component.

I found two currently supported approaches to adding Silverlight content to a page in version 4: using an object tag or <a href="http://msdn.microsoft.com/en-us/library/cc265155(VS.95).aspx">client-side using Javascript</a>. Since I wasn't doing much else with Javascript on the client, I wanted to stick to a server-side solution. My attempts at programmatically creating the Silverlight control as <a href="http://blogs.msdn.com/b/andreww/archive/2009/03/12/silverlight-web-part-in-sharepoint.aspx">outlilned here</a> failed, so what I ended up doing was to embed the object tag into an <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.htmlcontrols.htmlgenericcontrol.aspx">HtmlGenericControl </a>directly in the WebPart. Here is the code:

[sourcecode language="csharp"]
	public class SilverlightPart : WebPart
	{
		protected override void CreateChildControls() {
			this.Title = &quot;Embedded Silverlight&quot;;
			HtmlGenericControl control = new HtmlGenericControl( &quot;div&quot; );
			control.InnerHtml = @&quot;&lt;object data='data:application/x-silverlight-2,' type='application/x-silverlight-2' width='100%' height='300px'&gt;
				&lt;param name='source' value='ClientBin/SilverlightWizard.xap'/&gt;
				&lt;param name='onError' value='onSilverlightError' /&gt;
				&lt;param name='background' value='white' /&gt;
				&lt;param name='minRuntimeVersion' value='4.0.50401.0' /&gt;
				&lt;param name='autoUpgrade' value='true' /&gt;
				&lt;a href='http://go.microsoft.com/fwlink/?LinkID=149156&amp;v=4.0.50401.0' style='text-decoration:none'&gt;
 					&lt;img src='http://go.microsoft.com/fwlink/?LinkId=161376' alt='Get Microsoft Silverlight' style='border-style:none'/&gt;
				&lt;/a&gt;
			&lt;/object&gt;&quot;;
			Controls.Add( control );
			ChildControlsCreated = true;
		}
	}
[/sourcecode]

One small thing to note is that we need to specify a height for the Silverlight control when it appears in a WebPart zone. Setting width to 100% is fine, but setting the height must be done using a specific height due to the layout logic used by the zones.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2010-10-12 20:14:15</wp:post_date>
		<wp:post_date_gmt>2010-10-12 20:14:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>embedding-silverlight-into-a-webpart</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286914455]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Referencing a Silverlight UserControl</title>
		<link>http://crmvoyager.wordpress.com/2010/10/13/creating-a-silverlight-usercontrol/</link>
		<pubDate>Wed, 13 Oct 2010 01:52:10 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[Funny how a lot of details are glossed over in the copious blog coverage that surrounds Silverlight. Creating UserControls is supposed to be dead easy, and it is relatively easy, but the method by which we register the control on the page eluded me for far too long, so here I aim to make the process just a little less painful for those who come after me.

Creating the UserControl is very easy. Given that you probably already have at least one UserControl in your Silverlight application -- the "main" page is a user control -- you can simply copy this and use it as the base of your new user control.

You'll notice that some of the Microsoft-supplied controls use an XML prefix such as "sdk:" for their user controls. For example, putting a TabControl into the .xaml file results in some markup that looks like so:

[sourcecode language="xml"]
&lt;sdk:TabControl Height=&quot;Auto&quot; Width=&quot;Auto&quot; Name=&quot;tabControl1&quot;&gt;
    ...
&lt;/sdk:TabControl&gt;
[/sourcecode]

We must do the same when instantiating our UserControls,  so any markup we add to the XAML file must be declared as part of a namespace. The <a href="http://msdn.microsoft.com/en-us/library/cc189061(VS.95).aspx">documentation </a>was difficult to find until I figured out what to search for -- Microsoft has a particular namespace root for referencing assemblies and types in XAML files. This namespace root is "clr-namespace". In order to add a namespace prefix that references our new UserControl types, we need to declare the namespace prefix using a literal "clr-namespace" in the URI. For example, if we have a type called MyUserControl that is in the .NET namespace MyProject, our namespace ends up being "clr-namespace:MyProject". In a XAML file we just need to add this XML namespace prefix somewhere in the file so that it is in scope where we need it. Practically speaking such prefixes are nearly always declared in the root element of the document, so we'll do the same. Here is what my code ended up looking like:

[sourcecode language="xml"]
&lt;UserControl x:Class=&quot;MyProject.MainPage&quot;
    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
     ....
    xmlns:myprefix=&quot;clr-namespace:MyProject&quot;/&gt;
[/sourcecode]

I have omitted several of the default namespace prefixes for clarity. To instantiate a UserControl type defined in the "MyProject" namespace, we need only to write an XML element with the name of our type, prefixed by the XML namespace prefix that we just defined. Here is a sample:

[sourcecode language="xml"]
&lt;myprefix:MyUserControl Height=&quot;Auto&quot; Width=&quot;Auto&quot;&gt;&lt;/myprefix:MyUserControl&gt;
[/sourcecode]

According to the more general <a href="http://msdn.microsoft.com/en-us/library/ms747086.aspx">documentation </a>for WPF, of which Silverlight is a derivative, the assembly name may be specified in the URI format as follows:

[sourcecode language="xml"]
xmlns:custom=&quot;clr-namespace:SDKSample;assembly=SDKSampleLibrary&quot;
[/sourcecode]

Hopefully this sheds some light on a detail seemingly glossed over in many Silverlight articles and tutorials.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2010-10-13 01:52:10</wp:post_date>
		<wp:post_date_gmt>2010-10-13 01:52:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-a-silverlight-usercontrol</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286934732]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data binding in Silverlight</title>
		<link>http://crmvoyager.wordpress.com/2010/10/13/data-binding-in-silverlight/</link>
		<pubDate>Wed, 13 Oct 2010 03:22:59 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[One of the most compelling features of Microsoft Silverlight is the ability to display data in a rich and dynamic grid view. This grid view shares many features of its big siblings over in ASP.NET, but there are some differences to watch out for. I'm going to focus on one difference that affected me in a recent project in order to focus this post and keep things short.

<strong>There is no DataSet in Silverlight</strong>

What, you ask, how can we do advanced data binding without DataSets? I asked the same thing, but the answer lies in the .NET Framework 4's <a href="http://msdn.microsoft.com/en-us/library/ms668604.aspx">ObservableCollection</a>. System.Collections.ObjectModel.ObservableCollection provides a notification interface in the form of events that are raised when items are added or removed from the list. This allows the Silverlight GridView UI to stay updated when the underlying data changes.

In order to create a bindable data structure, I created a POCO (plain old C# object) that had the fields I wished to display like so:

[sourcecode language="csharp"]
	public class Product
	{
		public string name { get; set; }
		public string productid { get; set; }
		public string price { get; set; }
               ...
      }
[/sourcecode]

Once we have a class to represent the list items, we instantiate the generic list using the new type:

[sourcecode language="csharp"]
ObservableCollection&lt;Product&gt; itemsource = new ObservableCollection&lt;Product&gt;();
[/sourcecode]

The ObservableCollection supports all list operations, so building the list works just like any other IList:
[sourcecode language="csharp"]
itemsource.Add( new Product() );
[/sourcecode]

Finally we can bind the new collection to the grid as follows:
[sourcecode language="csharp"]
dataGrid.ItemsSource = itemsource;
[/sourcecode]

This is just the tip of the iceberg with databinding in Silverlight. In a forthcoming post I'm going to show how Silverlight supports binding to nested collections.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2010-10-13 03:22:59</wp:post_date>
		<wp:post_date_gmt>2010-10-13 03:22:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>data-binding-in-silverlight</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286940180]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Applying styles in Silverlight</title>
		<link>http://crmvoyager.wordpress.com/2010/10/14/applying-styles-in-silverlight/</link>
		<pubDate>Thu, 14 Oct 2010 05:10:11 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[Microsoft made a big deal about the separation of design and application structure in Silverlight with the introduction of Expression Blend and Expression Studio. Now I'm at a point where I want to style my Silverlight applications, so I started digging into Silverlight styles.

I was horrified initially when I started coming across code samples like this where we have to explicitly add the style rule that we want to apply to each individual control:
[sourcecode language="xml"]
&lt;Button x:Name=&quot;button1&quot; Content=&quot;First Button&quot; Style=&quot;{StaticResource ButtonStyle}&quot;/&gt;
[/sourcecode]

I didn't want to have to go through my application and add all of these Style attributes. I was expecting something like CSS where I could apply styles based on the existing document structure.

Fortunately in Silverlight 4 there is a styling method referred to as implicit styling, where we can avoid having to set the style individually on each element. Most of the examples that I found initially were for earlier versions of Silverlight.

This is what an expliclit style definition would look like when placed in a resources section:
[sourcecode language="xml"]
&lt;Style x:Key=&quot;ButtonStyling&quot; TargetType=&quot;Button&quot;&gt;
    &lt;Setter Property=&quot;Background&quot; Value=&quot;Yellow&quot;/&gt;
&lt;/Style&gt;
[/sourcecode]

Here is what the same style looks like when using implicit styling
[sourcecode language="xml"]
&lt;Style TargetType=&quot;Button&quot;&gt;
    &lt;Setter Property=&quot;Background&quot; Value=&quot;Yellow&quot;/&gt;
&lt;/Style&gt;
[/sourcecode]

The only difference is that we don't specify a key. According to <a href="http://www.silverlightshow.net/items/Implicit-Styles-in-Silverlight-4.aspx">this blog post</a>, the key is actually set implicitly by Silverlight, much the same as an anonymous type actually has a name internally to the compiler.

In case it wasn't obvious, creating a control that receives an implicit style just means that we omit the Style attribute entirely:
[sourcecode language="xml"]
&lt;Button x:Name=&quot;button1&quot; Content=&quot;First Button&quot;/&gt;
[/sourcecode]

We can override the implicit style with an explicit style by specifying the Style, however:

[sourcecode language="xml"]
&lt;Button x:Name=&quot;button1&quot; Content=&quot;First Button&quot; Style=&quot;{StaticResource ButtonStyle}&quot;/&gt;
[/sourcecode]

At this point I should point out that Silverlight styles are implemented using a Silverlight mechanism called <a href="http://msdn.microsoft.com/en-us/library/system.windows.resourcedictionary(VS.95).aspx">ResourceDictionaries</a>. Many examples out on the net define dictionary items using x:Name, but in Silverlight 4 we should be using x:Key. Name still works but is considered to be a legacy attribute.

ResourceDictionary implements DependencyProperty, and so we can define members of the Application or UserControl's dictionaries using dot notation like this:

[sourcecode language="xml"]
&lt;Application.Resources&gt;
  &lt;Style TargetType=&quot;Button&quot; x:Key=&quot;GelButton&quot; &gt;
   ...
   &lt;/Style&gt;
&lt;Application.Resources&gt;
[/sourcecode]

ResourceDictionaries <a href="http://weblogs.asp.net/fredriknormen/archive/2009/03/31/silverlight-3-0-split-style-and-template-into-different-files-and-merge-resources.aspx">can be merged</a>, so we can define styles in several places and merge them into a single dictionary. Unfortunately this is necessary for applying several style definitions to the same control, unlike in CSS where we are free to define as many cascading sections as we wish. Silverlight 4 supplies a mechanism for explicitly cascading styles using the BasedOn attribute.

The following example from the <a href="http://www.silverlightshow.net/items/Implicit-Styles-in-Silverlight-4.aspx">Silverlight Show</a> blog shows how BasedOn works:

[sourcecode language="xml"]
&lt;Style x:Key=&quot;BasedStyle&quot; TargetType=&quot;Button&quot;&gt;
    &lt;Setter Property=&quot;FontSize&quot; Value=&quot;16&quot;/&gt;
&lt;/Style&gt;
 
&lt;Style TargetType=&quot;Button&quot; BasedOn=&quot;{StaticResource BasedStyle}&quot;&gt;
    &lt;Setter Property=&quot;Background&quot; Value=&quot;Red&quot;/&gt;
    &lt;Setter Property=&quot;Foreground&quot; Value=&quot;Black&quot;/&gt;
&lt;/Style&gt;
[/sourcecode] 

    
    


I'm going to get back to styling my app now. Till next time, style away.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2010-10-14 05:10:11</wp:post_date>
		<wp:post_date_gmt>2010-10-14 05:10:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>applying-styles-in-silverlight</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287033014]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Observations on ObservableCollection</title>
		<link>http://crmvoyager.wordpress.com/2010/10/15/observations-on-observablecollection/</link>
		<pubDate>Fri, 15 Oct 2010 01:01:48 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=215</guid>
		<description></description>
		<content:encoded><![CDATA[In a <a href="http://crmvoyager.wordpress.com/2010/10/13/data-binding-in-silverlight/">previous post</a> I extolled the virtues of the new .NET ObservableCollection and its wonderful databinding goodness. Well I have experienced the flip side of the coin today, having gotten the proverbial horns after taunting the bull.

Ok enough bull. What happened was that I had a conflict between two different definitions of the same ObservableCollection type. Yes, it is defined in both System.Windows.dll and in System.dll. The difference is that System.Windows.dll is a Silverlight assembly and defines some types that are intended for use in the more limited Silverlight environment. So what happens is that I want to define an interface in my service that returns an ObservableCollection for me to consume in my Silverlight app. The service is a full-fledged .NET 4.0 app that references System.dll, and the Silverlight app references System.Windows.dll. We can reference Silverlight assemblies in regular .NET projects but we can't reference regular .NET assemblies in Silverlight projects. 

Keeping the previous assertions in mind, my first thought was to just reference the Silverlight assembly, System.Windows.dll in my Service app and use the ObservableCollection type defined there. In order to do this, we have to disambiguate the assembly references by using an <a href="http://www.codeproject.com/KB/cs/aliases.aspx">alias</a>. In the property page of the assembly reference for System.Windows.dll, I changed the Alias "global" to "silverlight" and declared an extern at the top of my file like this:

[sourcecode language="csharp"]
extern alias silverlight;
[/sourcecode]

Once I had this set up, I could reference the Silverlight version of ObservableCollection thusly:


[sourcecode language="csharp"]
silverlight::System.Collections.ObjectModel.ObservableCollection collection;
[/sourcecode]

This seemed to work at first, but I ended up getting errors when I ran the project. I'm still not sure why this didn't work out, maybe I'll look into it some more. If anyone has any ideas let me know in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2010-10-15 01:01:48</wp:post_date>
		<wp:post_date_gmt>2010-10-15 01:01:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>observations-on-observablecollection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287104508]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WSPBuilder and SharePoint deployment layout - where does this stuff end up?</title>
		<link>http://crmvoyager.wordpress.com/2010/10/15/wspbuilder-and-sharepoint-deployment-layout-where-does-this-stuff-end-up/</link>
		<pubDate>Fri, 15 Oct 2010 01:29:50 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[I had the dubious pleasure of trying to figure out how to get some Web Parts that I developed deployed to a SharePoint site in order to demo for a client. I had the Web Parts working in a test host outside of SharePoint so I figured it wouldn't be a big deal to get them pushed to a real SharePoint installation. Well, you might guess it took me a little longer to work this situation out, since I'm taking the time to write about it here.

<h2>First attempt -- manual deployment</h2>

The first shot I took was to drop the binaries out to the SharePoint server as outlined <a href="http://technet.microsoft.com/en-us/library/cc261736.aspx">here</a>. It should be possible to drop the assemblies under the bin/ folder of the SharePoint site, allow the assembly as safe code in web.config, and pull it into the Web Part catalog using the following admin page:

[sourcecode language="xml"]
http://&lt;MyServer&gt;/_layouts/newdwp.aspx 
[/sourcecode]

Individual SharePoint sites are set up under the IIS Inetpub/ folder structure by default, so this is roughly the path we are looking at:

[sourcecode language="xml"]
C:\inetpub\wwwroot\wss\VirtualDirectories\80
[/sourcecode]

Needless to say I couldn't get this to work. The problem was that nothing showed up in the admin page. The assembly was being loaded since I was getting errors if I messed up the web.config file, but alas, no luck getting the parts to display.

<h2>Second attempt -- using WSPBuilder</h2>

Having failed at a quick and dirty approach, I moved my Web Parts to proper WSPBuilder Web Part projects. This is what you get if you create a new Visual Web Part project in Visual Studio. I also tried to create a WSPBuilder deployment project, but this didn't do what I wanted. There seemed to be a place where you could put your Web Part code, but it didn't look like what I wanted. Someone feel free to correct me on this.

One small note when creating a WSPBuilder project is that we want to give it the specific SharePoint site we want to work with, as this is the worker process that Visual Studio will attach to. So if the site is on a different port, you'll want to specify the full URL like this assuming that the site is on port 5559:

[sourcecode language="xml"]
http://myhost:5559/
[/sourcecode]

After un-mangling the default names and namespaces and moving my existing code into the new project layout, I hit F5 and crossed my fingers. The Web Parts get installed under a catalog section called "Custom". I was almost there at this point, but for some reason WSPBuilder was not adding the correct namespaces to the trusted assemblies list in web.config. I figured this out by having the site open in Windows Explorer and noticing that WSPBuilder was making backup copies of web.config every time I deployed. When you stop debugging it restores the previous web.config, removing any changes to the trusted assemblies configuration.

I manually added the assembly to web.confg like this:

[sourcecode language="xml"]
      &lt;SafeControl Assembly=&quot;EventWebParts, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6e5bb8b2abdf55b5&quot; Namespace=&quot;EventWebParts&quot; TypeName=&quot;*&quot; Safe=&quot;True&quot; SafeAgainstScript=&quot;False&quot; /&gt;
[/sourcecode]

So now that I had my code running I poked around to figure out where things were ending up. SharePoint puts things generally in one of three places:

1) The GAC
2) IIS root (inetpub)
3) SharePoint "hive" C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\14\TEMPLATE\FEATURES\

By default, WSPBuilder seems to install the assemblies in the GAC. There is a configuration option clearly visible on the project for this setting. The .webpart xml configuration goes into the hive, and changes to web.config happen under the IIS root.

Hopefully this helps you to figure out where the heck all of this stuff ends up when deploying Web Parts to SharePoint. It takes a while to get used to.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2010-10-15 01:29:50</wp:post_date>
		<wp:post_date_gmt>2010-10-15 01:29:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wspbuilder-and-sharepoint-deployment-layout-where-does-this-stuff-end-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287106191]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_22187015c7acc64502018b283c402962</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_93383950a25111aba2f418d28018ffd3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_902a8ed880360956344044d63e0cce1c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a65f5e022ff309bdd90465bce0e8bd65</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What&#039;s in a Silverlight .XAP</title>
		<link>http://crmvoyager.wordpress.com/2010/10/15/whats-in-a-silverlight-xap/</link>
		<pubDate>Fri, 15 Oct 2010 06:07:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[Microsoft Silverlight applications are distributed in archive files with a .xap file extension. This model mirrors the deployment strategy of Flash .swf files and several other binary web application types. However, these files aren't as opaque as they seem on the surface. On further inspection we find that .xap files are simple zip archives with a different file extension.

Using an archive viewer (<a href="http://www.7-zip.org/">7zip </a>is my tool of choice here -- seriously, I'll wait while you go grab it) we can open the .xap up and examine its contents.

<a href="http://crmvoyager.files.wordpress.com/2010/10/xap.png"><img src="http://crmvoyager.files.wordpress.com/2010/10/xap.png" alt="" title="xap" width="500" height="290" class="aligncenter size-full wp-image-226" /></a>

We can see that along with the assemblies required to run the Silverlight code, we have two configuration files in the archive -- AppManifest.xaml and ServiceReferences.ClientConfig. These two files provide the assembly references and service references for the application, respectively. Following are samples of these two files:

AppManifest.xaml:
[sourcecode language="xml"]
&lt;Deployment xmlns=&quot;http://schemas.microsoft.com/client/2007/deployment&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; EntryPointAssembly=&quot;SilverlightWizard&quot; EntryPointType=&quot;SilverlightWizard.App&quot; RuntimeVersion=&quot;4.0.50401.0&quot;&gt;
  &lt;Deployment.Parts&gt;
    &lt;AssemblyPart x:Name=&quot;SilverlightWizard&quot; Source=&quot;SilverlightWizard.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;SilverlightClassLibrary1&quot; Source=&quot;SilverlightClassLibrary1.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.ComponentModel.DataAnnotations&quot; Source=&quot;System.ComponentModel.DataAnnotations.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.ServiceModel.DomainServices.Client&quot; Source=&quot;System.ServiceModel.DomainServices.Client.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.ServiceModel.DomainServices.Client.Web&quot; Source=&quot;System.ServiceModel.DomainServices.Client.Web.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.ServiceModel.Web.Extensions&quot; Source=&quot;System.ServiceModel.Web.Extensions.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.Windows.Controls.Data&quot; Source=&quot;System.Windows.Controls.Data.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.Windows.Controls.Data.Input&quot; Source=&quot;System.Windows.Controls.Data.Input.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.Windows.Controls&quot; Source=&quot;System.Windows.Controls.dll&quot; /&gt;
    &lt;AssemblyPart x:Name=&quot;System.Windows.Data&quot; Source=&quot;System.Windows.Data.dll&quot; /&gt;
  &lt;/Deployment.Parts&gt;
&lt;/Deployment&gt;
[/sourcecode]

ServiceReferences.ClientConfig
[sourcecode language="xml"]
&lt;configuration&gt;
    &lt;system.serviceModel&gt;
        &lt;bindings&gt;
            &lt;basicHttpBinding&gt;
                &lt;binding name=&quot;EventsSoap&quot; maxBufferSize=&quot;2147483647&quot; maxReceivedMessageSize=&quot;2147483647&quot;&gt;
                    &lt;security mode=&quot;None&quot; /&gt;
                &lt;/binding&gt;
            &lt;/basicHttpBinding&gt;
        &lt;/bindings&gt;
        &lt;client&gt;
            &lt;endpoint address=&quot;http://localhost:4589/Events.asmx&quot; binding=&quot;basicHttpBinding&quot;
                bindingConfiguration=&quot;EventsSoap&quot; contract=&quot;ServiceReference1.EventsSoap&quot;
                name=&quot;EventsSoap&quot; /&gt;
        &lt;/client&gt;
    &lt;/system.serviceModel&gt;
&lt;/configuration&gt;
[/sourcecode]

Normally we wouldn't need to touch these files, but in the case of a moved webservice location, knowing that the endpoint is defined here can be a lifesaver. We can use 7zip to edit the client config in-place to change the endpoint url of a service that the Silverlight application references.

Hopefully this shows you that you shouldn't take .xap files at face value -- there is more there than meets the eye.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2010-10-15 06:07:00</wp:post_date>
		<wp:post_date_gmt>2010-10-15 06:07:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>whats-in-a-silverlight-xap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287122821]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dealing with exceptions in WCF services</title>
		<link>http://crmvoyager.wordpress.com/2010/10/19/dealing-with-exceptions-in-wcf-services/</link>
		<pubDate>Tue, 19 Oct 2010 17:15:44 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=230</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Overview</strong>

Windows Communication Foundation Web services handle exceptions differently than regular .NET code. So in much the same that we re-throw CRM exceptions, we have to handle .NET exceptions at the top-level of our service methods in order to avoid the dreaded generic "NotFound" errors that we get when a WCF service fails for some reason.

For code that calls WCF services we can construct a FaultException to wrap the general exception that is thrown like this:

[sourcecode language="csharp"]
		try {
				
                            // perform the action that could throw an exception
			}
			catch( Exception e ) {
				throw new FaultException(
					new FaultReason( e.Message ),
					new FaultCode( e.GetType().ToString() )
				);
			}
[/sourcecode]

However in Silverlight this doesn't seem to work as expected. I still get a "Not Found" exception. Back to the drawing board.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date>2010-10-19 17:15:44</wp:post_date>
		<wp:post_date_gmt>2010-10-19 17:15:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dealing-with-exceptions-in-wcf-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287508546]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Allowing cross-site WCF service calls</title>
		<link>http://crmvoyager.wordpress.com/2010/10/19/allowing-cross-site-wcf-service-calls/</link>
		<pubDate>Tue, 19 Oct 2010 18:33:21 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[One thing that I often forget during Silverlight development is that unless the Silverlight application and any services that it calls are hosted by the same server, the calls will fail due to security policy by default. This means that in Visual Studio you will have to use IIS for all sites and services unless everything is hosted under the same instance of WebDev.Webserver (the built-in development server in .NET).

In order to run things under IIS in Vista we have to run Visual Studio as an administrator, which is a pain and seems unnecessary. Fortunately Microsoft supplies us with a security policy escape hatch for WCF services in the form of a ClientAccessPolicy.xml file. 

Here is a policy file that I use frequently that allows access from any client, but is also insecure, so you shouldn't deploy something like this beyond your local development workstation:

[sourcecode language="xml"]
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;access-policy&gt;
  &lt;cross-domain-access&gt;
    &lt;policy&gt;
      &lt;allow-from http-request-headers=&quot;*&quot;&gt;
        &lt;domain uri=&quot;*&quot;/&gt;
      &lt;/allow-from&gt;
      &lt;grant-to&gt;
        &lt;resource path=&quot;/&quot; include-subpaths=&quot;true&quot;/&gt;
      &lt;/grant-to&gt;
    &lt;/policy&gt;
  &lt;/cross-domain-access&gt;
&lt;/access-policy&gt;
[/sourcecode]

Place the file in the root of the domain, and Silverlight should be able to call it from a different server hostname or port. Note that this file needs to be at the <em>domain</em> root rather than the root of the WCF service in order to be found by the Silverlight plugin.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2010-10-19 18:33:21</wp:post_date>
		<wp:post_date_gmt>2010-10-19 18:33:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>allowing-cross-site-wcf-service-calls</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287513201]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Silverlight host page for development and debugging</title>
		<link>http://crmvoyager.wordpress.com/2010/10/19/silverlight-host-page-for-development-and-debugging/</link>
		<pubDate>Tue, 19 Oct 2010 18:50:37 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[When you first get into Silverlight development using Visual Studio, you probably created a new project using the Visual Studio project wizard for Silverlight applications. During this process you are asked if you want to create a default host page for the Silverlight application. 
<a href="http://crmvoyager.files.wordpress.com/2010/10/silverlight-project.png"><img src="http://crmvoyager.files.wordpress.com/2010/10/silverlight-project.png" alt="" title="silverlight-project" width="500" height="393" class="aligncenter size-full wp-image-235" /></a>

If we let Visual Studio create a new web site to host the Silverlight app as shown in the previous screenshot, it is equivalent to selecting the following option later on in an existing web site. 
<a href="http://crmvoyager.files.wordpress.com/2010/10/add-silverlight.png"><img src="http://crmvoyager.files.wordpress.com/2010/10/add-silverlight.png" alt="" title="add-silverlight" width="500" height="372" class="aligncenter size-full wp-image-236" /></a>

Adding a Silverlight project to a web site will cause that project to be built and the .xap archive will be published to a ClientBin/ folder under the web site.

If we elect not to create a separate web site for the Silverlight application a test html page called TestPage.html is generated in the bin folder of the Silverlight project, and the web browser will be launched, referencing the file on the local filesystem rather than using a web server.

The consequences of the local file access are that web service calls will not work unless a ClientAccessPolicy file is set up on the service. See my previous posts on this for details.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2010-10-19 18:50:37</wp:post_date>
		<wp:post_date_gmt>2010-10-19 18:50:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silverlight-host-page-for-development-and-debugging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287514237]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Silverlight single-click checkbox DataGrid columns</title>
		<link>http://crmvoyager.wordpress.com/2010/11/01/silverlight-single-click-checkbox-datagrid-columns/</link>
		<pubDate>Mon, 01 Nov 2010 17:22:43 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[The title for this post is a mouthful so let me describe the back story a little bit. In Microsoft Silverlight applications we often use DataGrid controls that are databound with a boolean data field that is represented by a check box. Silverlight provides a built-in column type of DataGridCheckBoxColumn, which will display the underlying boolean data field as a standard CheckBox control inline in the DataGrid cell.

Setting up a DataGrid column using a DataGridCheckBoxColumn looks like this:

[sourcecode language="xml"]
&lt;sdk:DataGrid.Columns&gt;
              &lt;sdk:DataGridTextColumn Header=&quot;Name&quot; Binding=&quot;{Binding Name}&quot; /&gt;
             &lt;sdk:DataGridCheckBoxColumn Header=&quot;Select&quot; Binding=&quot;{Binding Selected}&quot; /&gt;
&lt;/sdk:DataGrid.Columns&gt;
[/sourcecode]

However the default behavior of a databound cell in a DataGrid is to require a click on the cell itself before we can edit its contents. In the case of text fields this makes a lot of sense. You don't want to enter edit mode immediately upon selecting a row in the grid. However, in the case of a check box, it is often the case that we'll want to quickly check off several items in the list. Having to select the cell first means that each selection action requires two clicks in order to change the state of the check box.

The first click on the check box leaves the DataGrid looking like this:
<a href="http://newcome.files.wordpress.com/2010/11/checkbox1.png"><img src="http://newcome.files.wordpress.com/2010/11/checkbox1.png" alt="" title="checkbox1" width="190" height="81" class="aligncenter size-full wp-image-1168" /></a>

There doesn't seem to be much out there on forums or blogs about this issue save for <a href="http://forums.silverlight.net/forums/p/35476/106883.aspx">this forum posting</a>. One of the commenters has it almost right and a second commenter corrects him, but the resulting code is never provided. I had to fix this in my own application, so here is what I came up with:

[sourcecode language="xml"]
           &lt;sdk:DataGridTemplateColumn&gt;
                        &lt;sdk:DataGridTemplateColumn.CellEditingTemplate&gt;
                            &lt;DataTemplate&gt;
                                &lt;CheckBox IsThreeState=&quot;False&quot; IsChecked=&quot;{Binding Path=Selected, Mode=TwoWay}&quot; HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; /&gt;
                            &lt;/DataTemplate&gt;
                        &lt;/sdk:DataGridTemplateColumn.CellEditingTemplate&gt;
                    &lt;/sdk:DataGridTemplateColumn&gt;
[/sourcecode]

The solution to this problem was out there, but none of the sources described the actual problem well enough to be found easily by searching. Hopefully this post rectifies that situation.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date>2010-11-01 17:22:43</wp:post_date>
		<wp:post_date_gmt>2010-11-01 17:22:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>silverlight-single-click-checkbox-datagrid-columns</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1288632167]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan Miller]]></wp:comment_author>
			<wp:comment_author_email>jmiller@blah.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.9.224.137</wp:comment_author_IP>
			<wp:comment_date>2011-02-11 08:36:16</wp:comment_date>
			<wp:comment_date_gmt>2011-02-11 16:36:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That worked perfect!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297442176.9029";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297459645]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297459645.7492";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[newcome]]></wp:comment_author>
			<wp:comment_author_email>djn125@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.180.86.146</wp:comment_author_IP>
			<wp:comment_date>2011-02-11 13:28:25</wp:comment_date>
			<wp:comment_date_gmt>2011-02-11 21:28:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad to hear it. Hopefully you spent less time figuring it out than I did.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>12</wp:comment_parent>
			<wp:comment_user_id>2496294</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297459706]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1297459706.083";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Nicwin]]></wp:comment_author>
			<wp:comment_author_email>DomeWinterstein@gmx.de</wp:comment_author_email>
			<wp:comment_author_url>http://abilis.de</wp:comment_author_url>
			<wp:comment_author_IP>85.115.7.239</wp:comment_author_IP>
			<wp:comment_date>2011-03-14 05:13:52</wp:comment_date>
			<wp:comment_date_gmt>2011-03-14 13:13:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Strange, there is no difference, i still have to click my Checkbox 2 times, did you bound your CheckBox to an Bool-Property?

I'm within an ObservableCollection, so i have to Update the SelectedItem and not just a Prop]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300108432.9371";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1300134228]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1300134228.478";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[wxp]]></wp:comment_author>
			<wp:comment_author_email>wu_xiaoping@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>142.240.200.10</wp:comment_author_IP>
			<wp:comment_date>2012-03-19 05:13:34</wp:comment_date>
			<wp:comment_date_gmt>2012-03-19 13:13:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's great solution!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332162814.2818";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>83</wp:comment_id>
			<wp:comment_author><![CDATA[R]]></wp:comment_author>
			<wp:comment_author_email>rasaonnet@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.170.96.169</wp:comment_author_IP>
			<wp:comment_date>2012-07-14 05:37:56</wp:comment_date>
			<wp:comment_date_gmt>2012-07-14 13:37:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[1.5 year on, your solution still rocks :).
Thank you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342273076.8375";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1342334796]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342334796.8194";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Creating Configurable Web Part Properties</title>
		<link>http://crmvoyager.wordpress.com/2010/11/16/creating-configurable-web-part-properties/</link>
		<pubDate>Tue, 16 Nov 2010 06:43:06 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=253</guid>
		<description></description>
		<content:encoded><![CDATA[I've been creating tons of ASP.NET Web Parts for use in various clients' SharePoint portals recently, and I've come to a point where I need to handle some configuration in some of the parts.

For those of you familiar with SharePoint, you'll recall that each SharePoint site has its own web.config file under the site root of the particular site that you are working with. The configuration that I'm going to detail here could be done by adding an element to the web.config site or even via a web service call or other custom configuration mechanism. However, while looking around for solutions I realized that there is a powerful and flexible configuration system built in to the ASP.NET Web Parts mechanism in the form of <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.webparts.iwebeditable.aspx">IWebEditable</a>. Using this mechanism we will be able to allow our configuration options to be set by users during the page editing process right on the SharePoint site. Unfortunately, the <a href="http://msdn.microsoft.com/en-us/library/dd584174(office.11).aspx">code samples</a> from Microsoft are pretty verbose and don't explain the basics in a very straightforward manner. We don't have to implement IWebEditable ourselves, as <tt>WebPart</tt> already implements it for us, we just have to know how to mark our properties so that they can be changed by the configuration mechanism.

<h3>The Scenario:</h3>

Let's say I have a <a href="http://crmvoyager.wordpress.com/2010/10/12/embedding-silverlight-into-a-webpart/">Web Part that displays a Silverlight application</a>. Silverlight apps are deployed using <a href="http://crmvoyager.wordpress.com/2010/10/15/whats-in-a-silverlight-xap/">.xap archives</a>, which are simply .zip files with an included manifest telling Silverlight which resources are included and where any WCF service endpoints are located. In my Web Part I'd like to be able to specify the location of the Silverlight application so that I don't have to hard-code the path.

<h3>The Solution:</h3>

Fortunately the solution is pretty simple. We just need to add a .NET property to the Web Part class and adorn it with the right attributes. In the following code snippet I have defined a string property called <tt>SilverlightUrl</tt> that I'll use for storing my Silverlight .xap file path:

[sourcecode language="csharp"]
[WebBrowsable( true ), Category( &quot;Silverlight&quot; ),
WebDisplayName( &quot;Silverlight URL&quot; ),
WebDescription( &quot;web url to Silverlight XAP package&quot; ),
Personalizable( PersonalizationScope.User )]
public string SilverlightUrl { get; set; }
[/sourcecode]

Note that there are five different attributes applied to this single property. The most important attribute is <tt>WebBrowsable</tt>. This makes the field visible to an editor part. I'll cover editor parts in the next section, but just know that most of the attributes are for controlling how the field shows up in the property editor part. <tt>Category</tt>,<tt>WebDisplayName</tt>and<tt>WebDescription</tt> describe how the field is grouped, named, and described in the editor part, respectively. The <tt>Personalizable</tt> attribute is important in controlling the conditions under which the editor part is shown at all. In our example I have set it to <tt>User</tt> scope in order to get the editor to show up without toggling the <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.webparts.personalizationscope.aspx">personalization scope</a>. I'll cover personalization scope in another post, but just know that if we aren't in the right scope the editor will not be shown when we put the page into edit mode. This is something that tripped me up for a while when trying to get <tt>WebBrowsale</tt> properties working initially.

<h3>Testing:</h3>

Just publishing our code to SharePoint as-is will be enough for us to configure our Web Part as desired. However, I always develop and debug my code in a simple test page outside of SharePoint, so I'll cover setting things up to test <tt>EditDisplayMode</tt> also.

In addition to the typical <tt>WebPartManager</tt> and <tt>WebPartZone</tt> on the page we will need an <tt>EditorZone</tt>. The particular editor that we are interested in is the <tt><a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.webparts.propertygrideditorpart.aspx">PropertyGridEditorPart</a></tt>. The ASP.NET markup would look something like this:

[sourcecode language="xml"]
&lt;asp:EditorZone ID=&quot;EditorZone1&quot; runat=&quot;server&quot; &gt;
      &lt;ZoneTemplate&gt;
        &lt;asp:PropertyGridEditorPart Title=&quot;Edit Custom Properties&quot; ID=&quot;PropertyGridEditorPart1&quot; runat=&quot;server&quot;/&gt;
      &lt;/ZoneTemplate&gt;
    &lt;/asp:EditorZone&gt;
[/sourcecode]

In order to toggle edit mode, we'll want to put an ASP.NET button on the page and wire it up to something like this:

[sourcecode language="csharp"]
protected void Enable_Edit( object sender, EventArgs e ) {
	WebPartManager1.DisplayMode = WebPartManager.EditDisplayMode;
}
[/sourcecode]

By default, ASP.NET will set the Web Part page up in <tt>PersonalizationScope.User</tt> mode, meaning that we are editing per-user configuration rather than configuration that all site users will see. If we set the <tt>Personalizable</tt> attribute on our property to <tt>PersonalizationScope.Shared</tt> we would not see the editor part at all.

If everything is working correctly, when <tt>EditDisplayMode</tt> is toggled, the <tt>PropertyGridEditorPart</tt> will show up on the page like this:<a href="http://crmvoyager.files.wordpress.com/2010/11/propertygrideditor.jpg"><img src="http://crmvoyager.files.wordpress.com/2010/11/propertygrideditor.jpg" alt="" title="propertygrideditor" width="500" height="76" class="aligncenter size-full wp-image-255" /></a>

There are some more related areas to explore when dealing with Web Part user configuration but I'll have to follow up on these topics in a future post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2010-11-16 06:43:06</wp:post_date>
		<wp:post_date_gmt>2010-11-16 06:43:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-configurable-web-part-properties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1289889788]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deploying Web Parts to Microsoft SharePoint 2010</title>
		<link>http://crmvoyager.wordpress.com/2010/11/19/deploying-web-parts-to-microsoft-sharepoint/</link>
		<pubDate>Fri, 19 Nov 2010 09:35:53 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<i>This is the first of several SharePoint-related articles that I have in the works, all dealing with code deployment and feature configuration.</i>

<h3>Background</h3>

Microsoft SharePoint allows developers to build custom UI pieces called Web Parts that plug into a standard SharePoint page at design time. These Web Parts can be extremely powerful, but unfortunately deployment scenarios can be confusing since Web Parts are just one small part of the SharePoint extensibility story and the documentation can be difficult to decipher as a result. In this post I'm going to go through the most straightforward deployment scenario, perhaps mentioning other possibilities in passing, to be covered in later articles.

Although there are other ways to get code deployed to SharePoint, the main mechanism by which custom or third-party code is introduced to a running SharePoint environment is via the <a href="http://msdn.microsoft.com/en-us/library/bb862721(office.12).aspx">SharePoint solution</a> package. Solutions typically have a .wsp file extension, and are actually archives in the Microsoft .cab file format. Solution packages contain an XML manifest file, .NET assemblies and other resources.

One other important thing to note regarding the layout of a SharePoint solution is that a solution may contain one or more features. Features are units of functionality that may be enabled and disabled from within SharePoint. The relationship between features and solutions allows quite a bit of flexibility when setting up the capabilities of individual site collections, but again poses many opportunities for error and confusion.

The last thing to note before we get started with an example is that as of SharePoint 2010 solutions may be deployed in a sandbox environment in addition to being deployed at the farm level. It is possible to deploy the same solution at many levels, but unpredictable behavior may result if the features from both deployments of the solution are available in the same site.

<h3>Creating the Package</h3>

We are going to build a .wsp package using Visual Studio 2010 and deploy it at the farm level of a fresh installation of Windows Sharepoint Foundation 2010. Assuming you already have a Web Part project in your Visual Studio solution, all we need to do is check a few properties on the project and build the package. Take a look at the following screenshot of the project properties for the Web Part project. The most important things here are the <tt>Sandboxed Solution</tt> and <tt>Assembly Deployment Target</tt>. We will need to create a non-sandboxed package in order to accommodate visual web parts -- that is, web parts whose layout is determined by an ascx user control. Visual Studio has a special project type for visual Web Parts and it will generate an error if we try to build a sandboxed package that contains visual web parts. The second issue is that for a farm-level deployment we must use the global assembly cache, hence the <tt>Assembly Deployment Target</tt> setting.

<i>Visual Studio project properties pane</i>
<a href="http://crmvoyager.files.wordpress.com/2010/11/visual-studio-properties.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/visual-studio-properties.png" alt="" title="visual-studio-properties" width="500" height="328" class="aligncenter size-full wp-image-266" /></a>

Once these settings are checked and we are sure that our web parts are included in the feature and the feature is included in the package, we can build the .wsp file. The build is triggered via the project context menu. Open the menu and select <tt>Package</tt> in order to build the .wsp, which will appear in the <tt>/bin</tt> folder of the Web Part project.

<i>Creating the .wsp Package in Visual Studio</i>
<a href="http://crmvoyager.files.wordpress.com/2010/11/visual-studio-package.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/visual-studio-package.png" alt="" title="visual-studio-package" width="436" height="354" class="aligncenter size-full wp-image-269" /></a>

<h3>Deploying the Code</h3>

Now that we have the .wsp file, we need to pull the package into SharePoint. SharePoint provides a scriptable tool called <tt>stsadm</tt> as well as a PowerShell cmdlet, since the PowerShell interface is what Microsoft will be moving forward with in the future, I'll stick with using the cmdlet. We'll need to have access to the SharePoint Central Administration site in order to complete the deployment. Open the SharePoint Management Shell from the Start menu and type the following:

[sourcecode language="bash"]
Add-SPSolution -LiteralPath c:\path\to\solution.wsp
[/sourcecode]

Notice that the <b>full</b> path to the package is necessary.

Once the solution is added, we should browse to the System Settings area and click on Manage Farm Solutions as seen here:

<i>Taking a Look at the Installed Package</i>
 <a href="http://crmvoyager.files.wordpress.com/2010/11/central-admin.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/central-admin.png" alt="" title="central-admin" width="500" height="238" class="aligncenter size-full wp-image-272" /></a>

This lets us see the added package and deploy it to any site collections that we wish to use the features on. Since we are deploying the .wsp files from the farm level, we "push" the solution down to the individual site collections, making the features visible to the sites. Once the feature is enabled the web parts should be visible in the web part gallery.

There are several other paths that we could have taken to get our code onto the SharePoint server, but this will suffice for the time being. Hopefully this helps out others in their journey to deploy code successfully to SharePoint.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2010-11-19 09:35:53</wp:post_date>
		<wp:post_date_gmt>2010-11-19 09:35:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deploying-web-parts-to-microsoft-sharepoint</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1290159357]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[Kuldeep Bansal]]></wp:comment_author>
			<wp:comment_author_email>batrasomesh@yahoo.in</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.199.155.232</wp:comment_author_IP>
			<wp:comment_date>2011-12-22 06:47:18</wp:comment_date>
			<wp:comment_date_gmt>2011-12-22 14:47:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Check this helpful link...
http://mindstick.com/Articles/9e1d1fe1-7e51-4d01-86ec-f1f679631a7e/?Create%20and%20Deploy%20Visual%20WebPart%20in%20SharePoint%202010

Its also contain a nice post with understandable code.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1324565238.867";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Enabling user (sandboxed) code in SharePoint 2010</title>
		<link>http://crmvoyager.wordpress.com/2010/11/25/enabling-user-sandboxed-code-in-sharepoint-2010/</link>
		<pubDate>Thu, 25 Nov 2010 02:17:34 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[With SharePoint 2010 Microsoft has added the ability to run code in a more protected and limited environment than the fully-trusted farm deployment level. This allows individual site owners to install third-party code without risking the stability and integrity of the entire SharePoint server farm or even an individual server.

As you'd expect, there are certain things you won't be able to do from the sandbox, such as access the filesystem or use .ascx user controls in your web parts. However, the added control over the code can make this tradeoff worth it if you can deal with the limitations.

I'm going to show a few points of configuration for the user code service in this post. The user code service is the mechanism by which SharePoint runs the sandboxed code. In normal non-sandbox code execution, the third-party code runs in-process with the rest of SharePoint in the ASP.NET w3wp.exe process. As you probably know, this is the familiar ASP.NET worker process that forms the actual IIS application pool that runs our .NET code within IIS. In order to isolate the sandbox from this main SharePoint process, Microsoft has another process that is hosted outside of IIS completely. In order to do this, there is a Windows service called the SharePoint 2010 User Code Host. The short name of the service is SPUserCodeV4 and the process name is SPUCHostService.exe. 

<em>Windows services console</em>
<a href="http://crmvoyager.files.wordpress.com/2010/11/uc-service.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/uc-service.png" alt="" title="UC-service" width="500" height="341" class="aligncenter size-full wp-image-300" /></a>


This process also spawns two other processes, SPUCWorkerProcess.exe and SPUCWorkerProcessProxy.exe. We can attach a debugger to SPUCWorkerProcess.exe in order to debug user code. 

<em>Process Explorer showing the process hierarchy of SPUCHostService</em>
<a href="http://crmvoyager.files.wordpress.com/2010/11/processes.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/processes.png" alt="" title="processes" width="500" height="335" class="aligncenter size-full wp-image-301" /></a>

Ok, now that we know a bit about how the code is run on the server at the OS level, we need to look at one more thing. Under the SharePoint central administration site we can go to the server and look at all of the services that are running on the machine.

<em>SharePoint service administration console</em>
<a href="http://crmvoyager.files.wordpress.com/2010/11/central-admin-services.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/central-admin-services.png" alt="" title="central-admin-services" width="500" height="291" class="aligncenter size-full wp-image-299" /></a>

Although we can start and stop the service directly in Windows, the SharePoint management console will not always stay in sync with whether the service is actually running. It is better to manage the services through the central administration console, as stopping the service there will also set its startup type to "Disabled" so that the service does not start back up on a server reboot.

Hopefully this gives you a bit more background on the sandbox or user code service in SharePoint 2010.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2010-11-25 02:17:34</wp:post_date>
		<wp:post_date_gmt>2010-11-25 02:17:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enabling-user-sandboxed-code-in-sharepoint-2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1290651455]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SharePoint 2010 Web Parts vs. Visual Web Parts </title>
		<link>http://crmvoyager.wordpress.com/2010/11/25/sharepoint-2010-web-parts-vs-visual-web-parts/</link>
		<pubDate>Thu, 25 Nov 2010 03:30:23 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[I have read a lot of SharePoint documentation and articles recently, and one confusing point that kept getting glossed over was whether there was a difference between what was called a "Visual" Web Part and a Web Part by any other name.

The answer is, there is a difference, but not in the .NET type. There is a difference in how the part is implemented and its project type in Visual Studio. The short answer is that a Web Part is "visual" if its implementation includes an ASP.NET user control, i.e. an .ascx file. Creating a project of type "Visual Web Part" from the Visual Studio project wizard creates a project that looks like this:

<a href="http://crmvoyager.files.wordpress.com/2010/11/solution.png"><img src="http://crmvoyager.files.wordpress.com/2010/11/solution.png" alt="" title="solution" width="334" height="407" class="aligncenter size-full wp-image-306" /></a>

Notice the automatically-created .ascx user control. Indeed, the code in the Web Part is the same as we would find on a normal part, but in the implementation the user control is instantiated programmatically like this:

[sourcecode language="csharp"]
    public class VisualWebPart1 : WebPart
    {
        private const string _ascxPath = 
			@&quot;~/_CONTROLTEMPLATES/VisualWebPartProject2/VisualWebPart1/VisualWebPart1UserControl.ascx&quot;;

        protected override void CreateChildControls()
        {
            Control control = Page.LoadControl(_ascxPath);
            Controls.Add(control);
        }
    }
[/sourcecode]

Trying to deploy this project as a sandboxed solution will fail, since user controls violate the constraints placed on code that runs in the sandbox. There is nothing intrinsically about the code that would prevent its installation as a sandboxed solution, but it will fail when the solution is activated.

<h3>Changing a Visual Web Part to a regular Web Part</h3>

We can change the Web Part type by manually editing the .spdata file in the project. Visual Studio won't allow direct access to this file, so we'll have to browse to it on the filesystem and edit it in notepad.

[sourcecode language="xml"]
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;ProjectItem Type=&quot;Microsoft.VisualStudio.SharePoint.VisualWebPart&quot; DefaultFile=&quot;VisualWebPart1UserControl.ascx&quot; SupportedTrustLevels=&quot;FullTrust&quot; SupportedDeploymentScopes=&quot;Site&quot; xmlns=&quot;http://schemas.microsoft.com/VisualStudio/2010/SharePointTools/SharePointProjectItemModel&quot;&gt;
  &lt;Files&gt;
    &lt;ProjectItemFile Source=&quot;Elements.xml&quot; Target=&quot;VisualWebPart1\&quot; Type=&quot;ElementManifest&quot; /&gt;
    &lt;ProjectItemFile Source=&quot;VisualWebPart1.webpart&quot; Target=&quot;VisualWebPart1\&quot; Type=&quot;ElementFile&quot; /&gt;
    &lt;ProjectItemFile Source=&quot;VisualWebPart1UserControl.ascx&quot; Target=&quot;CONTROLTEMPLATES\VisualWebPartProject2\VisualWebPart1\&quot; Type=&quot;TemplateFile&quot; /&gt;
  &lt;/Files&gt;
  &lt;SafeControls&gt;
    &lt;SafeControl Name=&quot;SafeControlEntry1&quot; Assembly=&quot;$SharePoint.Project.AssemblyFullName$&quot; Namespace=&quot;VisualWebPartProject2.VisualWebPart1&quot; TypeName=&quot;*&quot; IsSafe=&quot;true&quot; IsSafeAgainstScript=&quot;false&quot; /&gt;
  &lt;/SafeControls&gt;
&lt;/ProjectItem&gt;
[/sourcecode]

We are interested only in this line:

[sourcecode language="xml"]
&lt;ProjectItem Type=&quot;Microsoft.VisualStudio.SharePoint.VisualWebPart&quot; DefaultFile=&quot;VisualWebPart1UserControl.ascx&quot; SupportedTrustLevels=&quot;FullTrust&quot; 
[/sourcecode]

We can change the <tt>Type</tt> from <tt>VisualWebPart</tt> to <tt>WebPart</tt> and <tt>SupportedTrustLevels</tt> from <tt>FullTrust</tt> to <tt>All</tt>.

The resulting code looks like this:


[sourcecode language="xml"]
&lt;ProjectItem Type=&quot;Microsoft.VisualStudio.SharePoint.WebPart&quot; DefaultFile=&quot;VisualWebPart1UserControl.ascx&quot; SupportedTrustLevels=&quot;All&quot; 
[/sourcecode]

Once the change is made, reload the project in Visual Studio, and its type should be recognized as a normal web part. Be sure to remove the user control before attempting to deploy as a sandboxed solution!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2010-11-25 03:30:23</wp:post_date>
		<wp:post_date_gmt>2010-11-25 03:30:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sharepoint-2010-web-parts-vs-visual-web-parts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1290655824]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Explained: Visual web parts VS Standard web parts]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.randomizzzer.com/2011/06/explained-visual-web-parts-vs-standard-web-parts/</wp:comment_author_url>
			<wp:comment_author_IP>69.175.44.162</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 06:47:29</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 14:47:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] web part. The process doesn&#8217;t look all that hard and it is explained in detailed in the CRM Voyager.  Tags: visual web part, web [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1309358850.149";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1309362348]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309362348.7227";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[Devin]]></wp:comment_author>
			<wp:comment_author_email>me@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://NA</wp:comment_author_url>
			<wp:comment_author_IP>69.92.76.206</wp:comment_author_IP>
			<wp:comment_date>2011-08-14 18:57:32</wp:comment_date>
			<wp:comment_date_gmt>2011-08-15 02:57:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you...this was confusing and not well documented]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313377053.4185";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1313552844]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1313552844.5617";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[SharePoint 2010 Web Parts vs. Visual Web Parts &laquo; neerajsharepointmania]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://neerajsharepointmania.wordpress.com/2011/03/17/sharepoint-2010-web-parts-vs-visual-web-parts/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.24</wp:comment_author_IP>
			<wp:comment_date>2012-03-17 01:50:31</wp:comment_date>
			<wp:comment_date_gmt>2012-03-17 09:50:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I have read a lot of SharePoint documentation and articles recently, and one confusing point that kept getting glossed over was whether there was a difference between what was called a “Visual” Web Part and a Web Part by any other name. The answer is, there is a difference, but not in the .NET type. There is a difference in how the part is implemented and its project type in Visual Studio. The short answer is that a Web Part is “visual” if its implementation includes an ASP.NET user control, i.e. an .ascx file. Creating a project of type “Visual Web Part” from the Visual Studio project wizard creates a project that looks like this:  Notice the automatically-created .ascx user control. Indeed, the code in the Web Part is the same as we would find on a normal part, but in the implementation the user control is instantiated programmatically like this:     [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331977832.5359";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>SharePoint Web Part Error When Switching Deployment Types</title>
		<link>http://crmvoyager.wordpress.com/2010/11/30/sharepoint-web-part-error-when-switching-deployment-types/</link>
		<pubDate>Tue, 30 Nov 2010 06:32:49 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=313</guid>
		<description></description>
		<content:encoded><![CDATA[I just had to deal with this error once again after having redeployed some SharePoint 2010 Web Part code as a farm solution after having been installed as a sandboxed solution.

The error text is:

[sourcecode]
Web Part Error: The request could not be completed because the specified solution was not found.

Show Error Details 
Hide Error Details 

[SPUserCodeExecutionPipelineFailedException: The request could not be completed because the specified solution was not found.]
  at Microsoft.SharePoint.UserCode.SPUserCodeExecutionManager.VerifyExecutionAllowed(Guid siteCollectionId, SPUserCodeExecutionContext executionContext) 
  at Microsoft.SharePoint.UserCode.SPUserCodeExecutionManager.Execute(Type userCodeWrapperType, SPSite site, SPUserCodeExecutionContext executionContext) 
  at Microsoft.SharePoint.UserCode.SPUserCodeWebPartRemoteExecutionHelper.&lt;&gt;c__DisplayClassa.b__9() 
  at Microsoft.SharePoint.Utilities.SecurityContext.RunAsProcess(CodeToRunElevated secureCode) 
  at Microsoft.SharePoint.UserCode.SPUserCodeWebPartRemoteExecutionHelper.ExecuteRequestInSandBox(HttpContext context, SPWeb web, SPWebPartManager manager, SPUserCodeWebPart userCodeWebPart)  
[/sourcecode]

This typically happens when either a web part has been added to a SharePoint page already and then the code is redeployed in another location or the Web Part gallery has not updated after the code was redeployed.

In the first case, all that we need to do is delete the Web Part from the page and re-add it from the gallery. In the latter case, we'll have to go into the web part gallery and delete all of the web parts and then re-deploy the solution.

Either way it is not a big deal, but it helps to know where to look and what is going on.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2010-11-30 06:32:49</wp:post_date>
		<wp:post_date_gmt>2010-11-30 06:32:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sharepoint-web-part-error-when-switching-deployment-types</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1291098769]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Attaching Visual Studio 2010 as a Silverlight Debugger</title>
		<link>http://crmvoyager.wordpress.com/2010/12/02/attaching-visual-studio-as-a-silverlight-debugger/</link>
		<pubDate>Thu, 02 Dec 2010 07:50:29 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=315</guid>
		<description></description>
		<content:encoded><![CDATA[Debugging Silverlight 4 applications under Visual Studio is a nice advantage of the tight integration that Microsoft provides with their tooling for rich Internet application development. However, it can be somewhat confusing if you get off the beaten path at all or if you end up with a mis-configured project setting somewhere down the road.

As you might have seen in one of my <a href="http://crmvoyager.wordpress.com/2010/10/19/silverlight-host-page-for-development-and-debugging/">previous posts</a>, setting up one of the Web applications in your solution as the host project for your Silverlight code is not very difficult.

When the project is started for the first time Visual Studio will prompt you with the following dialog:
<a href="http://crmvoyager.files.wordpress.com/2010/12/warningmessage.png"><img src="http://crmvoyager.files.wordpress.com/2010/12/warningmessage.png" alt="" title="warningmessage" width="497" height="221" class="aligncenter size-full wp-image-316" /></a>

Choosing yes to this dialog will enable Silverlight debugging and save the dialog preference in the .user file for the project. Deleting the .user file will cause Visual Studio to prompt you once again for this setting. However, we can manually enable Silverlight debugging very easily on the properties pane for the Web site that is hosting the Silverlight component. The following screen shot shows you where the setting is:
<a href="http://crmvoyager.files.wordpress.com/2010/12/hostproject.png"><img src="http://crmvoyager.files.wordpress.com/2010/12/hostproject.png" alt="" title="hostproject" width="500" height="382" class="aligncenter size-full wp-image-318" /></a>

It is worth noting that the tradeoff we make for Silverlight debugging is that Visual Studio will not attach itself as a Javascript debugger as it normally would. If you are having trouble visualizing what that means, consider the next screenshot showing how Visual Studio normally loads the Javascript code up for inspection right in the Solution Explorer:
<a href="http://crmvoyager.files.wordpress.com/2010/12/scriptdebugging.png"><img src="http://crmvoyager.files.wordpress.com/2010/12/scriptdebugging.png" alt="" title="scriptdebugging" width="277" height="199" class="aligncenter size-full wp-image-317" /></a>

Attaching Visual Studio as a Silverlight debugger affects <tt>System.Diagnostics.Debugger.IsAttached</tt> in the running Silverlight code. The default boilerplate code that is generated by Visual Studio uses this to detect how to deal with unhandled exceptions at the top level of the application in App.xaml.cs. If a debugger isn't attached it attempts to write the exception details out to the browser using Javascript. See the following code snippet:

[sourcecode language="csharp"]
	private void Application_UnhandledException( object sender, ApplicationUnhandledExceptionEventArgs e ) {
			// If the app is running outside of the debugger then report the exception using
			// the browser's exception mechanism. On IE this will display it a yellow alert 
			// icon in the status bar and Firefox will display a script error.
			if( !System.Diagnostics.Debugger.IsAttached ) {

				// NOTE: This will allow the application to continue running after an exception has been thrown
				// but not handled. 
				// For production applications this error handling should be replaced with something that will 
				// report the error to the website and stop the application.
				e.Handled = true;
				Deployment.Current.Dispatcher.BeginInvoke( delegate { ReportErrorToDOM( e ); } );
			}
		}
[/sourcecode]

Hopefully this give you a little insight on what is going on when you attempt to debug Silverlight code from within Visual Studio and how to get the debugger attached again if something gets messed up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2010-12-02 07:50:29</wp:post_date>
		<wp:post_date_gmt>2010-12-02 07:50:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>attaching-visual-studio-as-a-silverlight-debugger</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1291276230]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scripting SharePoint 2010 Solution Installations</title>
		<link>http://crmvoyager.wordpress.com/2010/12/05/scripting-sharepoint-2010-solution-installations/</link>
		<pubDate>Sun, 05 Dec 2010 04:56:06 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=324</guid>
		<description></description>
		<content:encoded><![CDATA[I was just working up some installation instructions for a client's SharePoint solutions when I realized that I should probably be creating some scripts to reduce the number of manual steps required to get the solution installed and working.

The thing that really pushed the issue for me was the initial addition of the SharePoint solution to the farm solution store. As you may know, the Web interface for managing farm solutions only allows the removal of existing solutions, <a href="http://msdn.microsoft.com/en-us/library/aa544500.aspx">not the addition of new ones.</a> So as a first step I thought I'd share what I figured out initially about scripting the SharePoint Management Shell.

<h3>SharePoint Management Shell Overview</h3>
Before we go any further, we need to understand what the SharePoint Management Shell is all about. In versions of SharePoint prior to 2010 Microsoft included a command line tool called stsadm.exe for scripting operations against the server. Although it is included in 2010, it has been deprecated in favor of the <a href="http://en.wikipedia.org/wiki/Windows_PowerShell">PowerShell</a>-based management shell.

In order to figure out what is going on when we run the management shell, take a look at the shortcut properties to find out which script is being run. Here is the path that I found:

[sourcecode]
C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\14\CONFIG\POWERSHELL\Registration\SharePoint.ps1
[/sourcecode]

Taking a look at the contents of the script we see something like the following:

[sourcecode]
$ver = $host | select version
if ($ver.Version.Major -gt 1)  {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}
Add-PsSnapin Microsoft.SharePoint.PowerShell
Set-location $home
[/sourcecode]

Ok now we are getting somewhere. In order to write a PowerShell script that imports the SharePoint management cmdlets we can call <tt>Add-PsSnapin</tt> and gain access to the tools that we need. I later found this to be documented on MSDN <a href="http://msdn.microsoft.com/en-us/library/ee537913.aspx">here</a>.

<h3>Creating a SharePoint Solution Upload Script</h3>
The simple script that I came up with to get the client through the hoop of getting the solution imported into SharePoint looks like this:

[sourcecode]
C:\Windows\System32\WindowsPowerShell\v1.0\PowerShell.exe  ^
	-Command  &quot;&amp; { &quot;^
		&quot;Add-PsSnapin Microsoft.SharePoint.PowerShell; &quot;^
		&quot;Add-SPSolution -LiteralPath %cd%\ClientSolution.wsp &quot;^
	&quot;}&quot;
[/sourcecode]

Note that this is a batch file which invokes the PowerShell Windows executable. We could probably just write a PowerShell script and hope that the client's machine is set up correctly so that he can run the .ps1 file directly, but I didn't want to count on it. The downside is that the version of PowerShell is hard coded into the path. These are all refinements for a later date though.

The command syntax for PowerShell literal command scripts looks like <tt></tt> where <tt></tt> is any number of semicolon-delimited PowerShell commands. The carets are just Windows batch file line break characters so that we can format the script for readability.

One last thing about the SharePoint <tt>Add-SPSolution</tt> cmdlet. I covered this in a <a href="http://crmvoyager.wordpress.com/2010/11/19/deploying-web-parts-to-microsoft-sharepoint/">previous post</a>, but it bears repeating here -- we must use the full path to the .wsp file in the <tt>-LiteralPath</tt> argument. In the script above I used %cd% to pass the current directory in, but we could use other tricks to allow this to be independent of how we call the script. I'll save that for a later post on Windows batch files.

Hopefully this gives you a jump on automating some SharePoint tasks. There are a lot of ways to improve this, so I'll be sure to post more as I go.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date>2010-12-05 04:56:06</wp:post_date>
		<wp:post_date_gmt>2010-12-05 04:56:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scripting-sharepoint-2010-solution-installations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1291524969]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Full-Stack SharePoint + Silverlight Debugging with Visual Studio 2010</title>
		<link>http://crmvoyager.wordpress.com/2010/12/06/full-stack-sharepoint-silverlight-debugging-with-visual-studio-2010/</link>
		<pubDate>Mon, 06 Dec 2010 22:33:29 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=339</guid>
		<description></description>
		<content:encoded><![CDATA[So you've gotten your Silverlight-based SharePoint Web Parts working in a test harness but when it comes time to get the whole stack out there under the target SharePoint site things aren't working. Of course it helps to have good logging in place, but sometimes we just want to get the debugger attached to see what is going on.

Creating a SharePoint project in Visual Studio sets things up to attach the debugger to the SharePoint site automatically, so stepping through ASP.NET Web Part code is easy enough right off the bat. Likewise, creating a Silverlight application prompts you to enable Silverlight debugging on the host site.

The question I had recently is, what happens when you want to attach the debugger to a Silverlight project while it is actually running inside of SharePoint and not the generated test site in Visual Studio?

Fortunately the answer is very simple. Assuming the SharePoint Web Part project is already set up to deploy to the target SharePoint site, we only need to make one more configuration change to the SharePoint project to turn on Silverlight debugging. The screen shot below shows it all:

<i>Visual Studio 2010 SharePoint Project Properties Pane</i>
<a href="http://crmvoyager.files.wordpress.com/2010/12/silverlight-sharepoint-debug.jpg"><img src="http://crmvoyager.files.wordpress.com/2010/12/silverlight-sharepoint-debug.jpg" alt="" title="silverlight-sharepoint-debug" width="500" height="244" class="aligncenter size-full wp-image-340" /></a>

All we need to do is go under the <tt>SharePoint</tt> tab of the Web Part project and specify Silverlight debugging instead of Javascript debugging. Once this is set, running the project will attach the debugger to SharePoint, letting you set breakpoints in the Web Part code itself and also set breakpoints in any Silverlight code that gets loaded up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date>2010-12-06 22:33:29</wp:post_date>
		<wp:post_date_gmt>2010-12-06 22:33:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>full-stack-sharepoint-silverlight-debugging-with-visual-studio-2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1291674809]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cross-Domain Silverlight 4 Application (.xap) Hosting</title>
		<link>http://crmvoyager.wordpress.com/2010/12/07/cross-domain-silverlight-4-application-xap-hosting/</link>
		<pubDate>Tue, 07 Dec 2010 06:03:08 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[One aspect of Silverlight application deployment recently caused me a significant amount of pain -- the security rules governing where the Silverlight browser plug-in will and will not load code from and under what circumstances.

There is a lot of talk about making cross-domain service calls from Silverlight, but not a lot of coverage given to hosting the application packages (.xap files) themselves. In my case, I was loading the .xap file in a SharePoint Web Part. The .xap file was hosted on a separate IIS web site on the same server but running on a different port. This had always worked for me in the past so I thought nothing of hosting the code on a separate site.

However, later on after adding some new features to the Silverlight application I was no longer able to deploy my code to SharePoint successfully. I tried a small "hello world" Silverlight application and everything worked fine. I also tried moving my application under the SharePoint site and got it to work.

So the question I had was, what was different about my application that was preventing it from working in a cross-domain situation? Fortunately I found out about <a href="http://msdn.microsoft.com/en-us/library/cc838264(VS.95).aspx">EnableHtmlAccess</a> via this <a href="http://timheuer.com/blog/archive/2010/06/10/troubleshooting-debugging-silverlight-cross-domain-xap-hosting.aspx">blog post</a> by Tim Heuer. 

It turns out that the Silverlight browser plug-in will happily load code from any domain as long as it doesn't try to access the host page in any way, including reading any Javascript variables on the page. The change that I made to my application was a call to read some configuration value from the Web Part that hosted the Silverlight application, thus triggering the security restriction. Here is what the code looked like:

[sourcecode language="csharp"]
public static ScriptObject GetJsVariable( string in_name ) { 
	return ( ScriptObject )HtmlPage.Window.GetProperty( in_name );
}
[/sourcecode]

To solve this problem, we can either just host the code on the same domain, or we can make a small change to the way that the Silverlight plugin is embedded in the page. I don't want to have to maintain a static source file in the SharePoint hive, so I added the following code to my Web Part:

[sourcecode language="html"]
&lt;object data='data:application/x-silverlight-2,' type='application/x-silverlight-2' width='100%' height='100%'&gt;
				&lt;param name='source' value='ClientBin/MyApplication.xap'/&gt;
				&lt;param name='onError' value='onSilverlightError' /&gt;
				&lt;param name='background' value='white' /&gt;
				&lt;param name='minRuntimeVersion' value='4.0.50401.0' /&gt;
				&lt;param name='autoUpgrade' value='true' /&gt;
				&lt;param name='enableHtmlAccess' value='true' /&gt;
				&lt;a href='http://go.microsoft.com/fwlink/?LinkID=149156&amp;v=4.0.50401.0' style='text-decoration:none'&gt;
 					&lt;img src='http://go.microsoft.com/fwlink/?LinkId=161376' alt='Get Microsoft Silverlight' style='border-style:none'/&gt;
				&lt;/a&gt;
			&lt;/object&gt;
[/sourcecode]

Note the addition of
[sourcecode language="html"]
&lt;param name='enableHtmlAccess' value='true' /&gt;
[/sourcecode]

Once I had this parameter set everything started working again. One thing that I'd like to be able to do is to display an error message instead of just displaying an empty Silverlight plugin. The SharePoint Silverlight content control that ships with SharePoint 2010 does this, but I'm not sure what how it does it. I'll look into it at some point when I get time, but in the meantime if anyone knows I'd love to hear from you.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2010-12-07 06:03:08</wp:post_date>
		<wp:post_date_gmt>2010-12-07 06:03:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cross-domain-silverlight-4-application-xap-hosting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1291701789]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[newcome]]></wp:comment_author>
			<wp:comment_author_email>djn125@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.180.86.146</wp:comment_author_IP>
			<wp:comment_date>2011-01-13 12:29:09</wp:comment_date>
			<wp:comment_date_gmt>2011-01-13 20:29:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd try hosting the .xap from the same domain to see if you have issues loading. If it still doesn't load, you may have issues elsewhere. Make sure that the Silverlight app is set to raise a Javascript error on unhandled exception (check out the code snippet <a href="http://crmvoyager.wordpress.com/2010/12/02/attaching-visual-studio-as-a-silverlight-debugger/" rel="nofollow">here</a>) so that you can see if there is an exception during the load of your code rather than a security issue. Also check the MIME type of the .xap file being served up. IIS7 sets this automatically but IIS6 does not. Also check out Tim's blog post I linked to about a third thing called ExternalCallersFromCrossDomain that may apply in your case. Good luck.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>10</wp:comment_parent>
			<wp:comment_user_id>2496294</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1294950549]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294950549.6353";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Nicholas McCready]]></wp:comment_author>
			<wp:comment_author_email>nmccready@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>198.91.70.120</wp:comment_author_IP>
			<wp:comment_date>2011-01-13 07:45:26</wp:comment_date>
			<wp:comment_date_gmt>2011-01-13 15:45:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This appears to be my problem, but enableHtmlAccess is already there and set to true. I am at a loss to why I am having this problem. Fidler is also not helping me much as it just shows me that the .xap is hung up somewhere. Anyideas?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1294949839]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:12:"1294949839.6";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294933526.6586";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Migrating SDK Code from CRM4 to CRM5 (2011)</title>
		<link>http://crmvoyager.wordpress.com/2010/12/08/migrating-sdk-code-from-crm4-to-crm5-2011/</link>
		<pubDate>Wed, 08 Dec 2010 20:58:30 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=354</guid>
		<description></description>
		<content:encoded><![CDATA[Now that the CRM5 beta is <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=0c7dcc45-9d41-4e2e-8126-895517b4274c">generally available</a> (and many of us were privy to the preview code) it's time to start dusting off those data access libraries and shaking them up to 2011 spec. If you've written any custom application code using the <tt>Microsoft.Crm.Sdk</tt> library, you'll want to tune in here. Fortunately, I didn't run into too many issues but there were a few gotchas that I'll go into here in this post.

I was upgrading my open-source CRM query library, <a href="https://github.com/dnewcome/crmQuery">CrmQuery</a> (which has saved us a ton of time over in our shop - I highly recommend that you check it out), so what I cover here is going to be limited to what I ran into during that migration. I'll follow up with more posts when I start finding out more.

<h2>Namespace and Library Differences</h2>

First off, you'll need to reference the <tt>Microsoft.Xrm.Sdk.dll</tt> library in your project. This replaces the CRM4 library <tt>Microsoft.Crm.Sdk.dll</tt>. Most of the types are the same name. Anywhere you'd use the namespaces:

[sourcecode language="csharp"]
using Microsoft.Crm.Sdk;
using Microsoft.Crm.Sdk.Query;
[/sourcecode]

Becomes:

[sourcecode language="csharp"]
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
[/sourcecode]

This was a bit confusing to me since I was familiar with the interim 4.0 SDK release that introduced what Microsoft referred to as "Xrm" which was basically a set of extensions and a new code generator to allow building proxies for the CRM services that could be queried using Linq. However in the 5.0 SDK, Microsoft has used the Xrm naming convention throughout the entire SDK, replacing most of the old Crm namespaces.

<h2>Type Differences</h2>

Certain base types have been removed, one of which being the column set base type which was used for anything that specified a list of columns to return or deal with in CRM. The use of the following type:

[sourcecode language="csharp"]
ColumnSetBase
[/sourcecode]

Becomes simply:

[sourcecode language="csharp"]
ColumnSet
[/sourcecode]

As a consequence, there is no <tt>Allcolumns</tt> type to represent all of the fields of an entity. Instead we create an instance of <tt>ColumnSet</tt> using a specialized constructor to indicate that we intend to specify all columns:


[sourcecode language="csharp"]
ColumnSet cols = new ColumnSet( true );
[/sourcecode]

<h2>Collection Types</h2>
Members that formerly used the <tt>ArrayList</tt> type are now implemented using generic lists in the form of <tt>DataCollection</tt> For example:

[sourcecode language="csharp"]
LinkEntity.LinkEntities
[/sourcecode]

Is no longer an <tt>ArrayList</tt>. Likewise, <tt>ConditionExpression.Values</tt> is now of the type:

[sourcecode language="csharp"]
[DataMemberAttribute]
public DataCollection&lt;Object&gt; Values { get; }
[/sourcecode]

Notice also that there is no setter, so code that creates a collection and set this property will no longer work.

That's it for now. If you liked this articled be sure to follow me on <a href="http://twitter.com/dnewcome">Twitter</a> and if you're interested in what we're doing with CRM and other Microsoft technologies, be sure to follow us on Twitter <a href="http://twitter.com/AltaiSystems">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date>2010-12-08 20:58:30</wp:post_date>
		<wp:post_date_gmt>2010-12-08 20:58:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>migrating-sdk-code-from-crm4-to-crm5-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1291841911]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deploying referenced assemblies in CRM 2011 plugins and workflows</title>
		<link>http://crmvoyager.wordpress.com/2011/01/14/deploying-referenced-assemblies-in-crm-2011-plugins-and-workflows/</link>
		<pubDate>Sat, 15 Jan 2011 05:31:04 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=366</guid>
		<description></description>
		<content:encoded><![CDATA[If you've ever developed a more complex plugin or custom workflow for Microsoft CRM that relies on external libraries you know that it can be tricky to get everything working correctly. The problem is that when the dll is registered using the Plugin Registration Tool included with the CRM SDK, only the metadata for the assembly containing the plugin is actually considered by the tool. This can cause issues at runtime even if the plugin appears to have been registered correctly.

Briefly, there are three ways to deal with referenced code:

<h4>1 - Install the assemblies in the Global Assembly Cache.</h4>

Installing the assemblies into the assembly cache will allow you to take full advantage of the GACs versioning system, preventing conflicting versions of the same assembly if multiple versions are needed. The downside is that installation of the plugin will require a separate step potentially involving gacutil.exe, which may not be desirable for some deployments. If possible though, the GAC method is the preferred installation method.

<h4>2 - Install the assemblies in %Program Files%\Microsoft Dynamics CRM\Server\bin\assembly</h4>

As a stopgap method that avoids the GAC but still allows you to deploy referenced assemblies to the CRM server, CRM 2011 will look in the assembly folder under its own installation path while probing for needed assemblies. The upside of this method is that it is easy to deploy dlls by simply copying them to the appropriate folder. The downside is that if many plugins use different versions of the same assembly there could be version conflicts that are difficult to track down.

<h4>3 - Include all code in one assembly.</h4>

The least desirable option in my opinion is to cram all of the code into the same assembly. If you have access to all of the source code involved you could implement a solution like <a href="http://blogs.inetium.com/blogs/azimmer/archive/2010/03/27/another-options-for-referencing-external-assemblies-from-plugins.aspx">this</a> where all of the source files are linked from external locations into the same Visual Studio project. If you don't have the source code, there is a tool from Microsoft called ILMerge that can take multiple assemblies and combine them into a single output assembly. This kind of thing should be taken as a last resort only if for some reason it is not feasible to install the assemblies in one of the first two ways I outlined above.

Hopefully this gives you some insight on how assembly references work in CRM 2011 and lets you hit the ground running.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date>2011-01-14 21:31:04</wp:post_date>
		<wp:post_date_gmt>2011-01-15 05:31:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deploying-referenced-assemblies-in-crm-2011-plugins-and-workflows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1295069465]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[RyanonRails]]></wp:comment_author>
			<wp:comment_author_email>ryan.michael.jones@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.RyanonRails.com</wp:comment_author_url>
			<wp:comment_author_IP>96.52.169.44</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 10:03:59</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 18:03:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article. 

Went searching around to try and find out the best way to deploy external references for my CRM 2011 plugin and this was pretty much the only decent site I could find.

I think I'll be using the GAC way (although I could see this being annoying to have to register all of the dll's across many servers, it does seem the best option though).

Thanks again!
Ryan]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303754639.6624";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1303766850]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303766850.3352";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[ben]]></wp:comment_author>
			<wp:comment_author_email>benpatterson_fieldpoint@hotmail.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.14.173.90</wp:comment_author_IP>
			<wp:comment_date>2011-06-03 07:04:34</wp:comment_date>
			<wp:comment_date_gmt>2011-06-03 15:04:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can also bring the assembly into the sandbox as a web resource.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307121302]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307121302.5481";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307113475.1003";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[RyanonRails]]></wp:comment_author>
			<wp:comment_author_email>ryan.michael.jones@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.RyanonRails.com</wp:comment_author_url>
			<wp:comment_author_IP>96.52.169.44</wp:comment_author_IP>
			<wp:comment_date>2011-06-29 10:46:09</wp:comment_date>
			<wp:comment_date_gmt>2011-06-29 18:46:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I actually found a pretty slick solution and blogged about it step by step here: 

http://www.ryanonrails.com/2011/06/30/put-all-references-within-crm2011-plugin-1-dll/

It essentially allows you to have 1 DLL, with the other DLL's inside of it!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1309373170]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309373171.2272";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[Ivan Kovacek]]></wp:comment_author>
			<wp:comment_author_email>ikovacek@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.201.163.146</wp:comment_author_IP>
			<wp:comment_date>2012-06-15 05:09:02</wp:comment_date>
			<wp:comment_date_gmt>2012-06-15 13:09:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If i want my plugin to be a part of an Crm solution, and I want to be able to export the solution to other crm at another server, I suppose that I would have to manually add the referenced dll to GAC on the new server? Seems like a bad practice, actually.

I have one more question.
Lets say I have few plugin assemblies, all using the same referenced library, and I want to use ILMerge for every plugin assembly. Each of the plugins would actually contain the same library. I suppose i could have some problems when updating assemblies to crm independently, taking into consideration that assembly  of "the referenced" library will change too?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339765742.7312";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1339808626]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339808626.4972";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>How to enable trace logging in Microsoft CRM 2011</title>
		<link>http://crmvoyager.wordpress.com/2011/01/14/how-to-enable-trace-logging-in-microsoft-crm-2011/</link>
		<pubDate>Sat, 15 Jan 2011 06:59:16 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[Hello again CRM fans. I'm tearing through a bunch of client code upgrades from the old CRM to the new 2011 stuff. In the process, I'm taking notes on what is different and what is the same. Fortunately enabling tracing is just the same as it was in CRM 4.0, but since there don't seem to be any articles out there that validate this, I'm posting it here. 

In case you didn't know already, there are a few registry keys that control the behavior of the CRM trace log file. Here is the <a href="http://support.microsoft.com/kb/907490">MSDN article</a> that describes the different registry keys involved.

If you are in a hurry, there are only three keys that you really need: one to specify the file name, and two flags to actually enable tracing. 

[sourcecode]
TraceDirectory
TraceEnabled
TraceRefresh
[/sourcecode]

Here is a screenshot to help you out:
<a href="http://crmvoyager.files.wordpress.com/2011/01/registry.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/registry.png?w=300" alt="" title="registry" width="300" height="223" class="aligncenter size-medium wp-image-370" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date>2011-01-14 22:59:16</wp:post_date>
		<wp:post_date_gmt>2011-01-15 06:59:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-enable-trace-logging-in-microsoft-crm-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1295074758]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[kabbourat]]></wp:comment_author>
			<wp:comment_author_email>kabbourat@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.2.91.222</wp:comment_author_IP>
			<wp:comment_date>2011-04-19 04:19:22</wp:comment_date>
			<wp:comment_date_gmt>2011-04-19 12:19:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks for the article, I can't trace my custo messages in he files even using the Itrasincservice.Trace(" here is my messages "); 

when i Search for the string in the log files I can't find it !! 

there's any ideas ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303215562.9877";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1303235589]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303235590.1968";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Hooman]]></wp:comment_author>
			<wp:comment_author_email>hooman.golparvar@cpaaustralia.com.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.190.252.2</wp:comment_author_IP>
			<wp:comment_date>2011-04-06 19:47:17</wp:comment_date>
			<wp:comment_date_gmt>2011-04-07 03:47:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the article, Looking at CRM RC 2011 version, the keys has not been specified in HKEY_LOCAL_MACHINE -&gt; Software -&gt; Microsoft -&gt; MSCRM any ideas?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302148037.9629";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1302171584]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302171584.8102";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[newcome]]></wp:comment_author>
			<wp:comment_author_email>djn125@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.180.86.146</wp:comment_author_IP>
			<wp:comment_date>2011-04-07 02:20:56</wp:comment_date>
			<wp:comment_date_gmt>2011-04-07 10:20:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@hooman - just create the needed keys including the parent keys, as they won't be there by default.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2496294</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1302171657]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302171657.9362";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[mkonrad]]></wp:comment_author>
			<wp:comment_author_email>wowkram@gmx.net</wp:comment_author_email>
			<wp:comment_author_url>http://mkonrad.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>212.63.90.194</wp:comment_author_IP>
			<wp:comment_date>2011-09-02 00:34:55</wp:comment_date>
			<wp:comment_date_gmt>2011-09-02 08:34:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@ kabbourat
Tracingservice is only written when an exception is thrown.

A simple way to enable tracing is using the diag tool.
http://mscrmtools.blogspot.com/2011/04/new-tool-crmdiagtool-2011.html]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314952495.3895";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1314992960]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314992961.0147";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[timo pakkala]]></wp:comment_author>
			<wp:comment_author_email>timo.pakkala@etera.fi</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.111.39.83</wp:comment_author_IP>
			<wp:comment_date>2012-03-21 00:58:40</wp:comment_date>
			<wp:comment_date_gmt>2012-03-21 08:58:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Any idea why do I keep getting this error?

CrmTrace encountered an error. Additional Info:Error in LoadLocalServerRegistrySettings [Unable to cast object of type 'System.String[]' to type 'System.String'.], Stack Trace :    at System.Environment.GetStackTrace(Exception e, Boolean needFileInfo)
   at System.Environment.get_StackTrace()
   at Microsoft.Crm.CrmTraceSettings.Load(String traceDirectory)
   at Microsoft.Crm.CrmTrace.get_RefreshTrace()
   at Microsoft.Crm.CrmTrace.Write(Guid orgId, TraceCategory traceCategory, TraceLevel traceLevel, Int32 skipFrames, String format, Object[] args)
   at Microsoft.Crm.CrmTrace.TraceFormat(Guid orgId, TraceCategory traceCategory, TraceLevel traceLevel, String format, Object[] args)
   at Microsoft.Crm.Sandbox.SandboxWorkerMain.Main(String[] arguments) (Reporting Process:Microsoft.Crm.Sandbox.WorkerProcess, AppDomain:C:\Program Files\Microsoft Dynamics CRM\Server\bin\)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332320321.4977";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1332355724]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332355724.6693";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>84</wp:comment_id>
			<wp:comment_author><![CDATA[chandpals]]></wp:comment_author>
			<wp:comment_author_email>chandpals007@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>112.79.40.90</wp:comment_author_IP>
			<wp:comment_date>2012-07-21 00:59:33</wp:comment_date>
			<wp:comment_date_gmt>2012-07-21 08:59:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I hv moble trace]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342861173.7621";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Setting up a Silverlight 4 development environment</title>
		<link>http://crmvoyager.wordpress.com/2011/01/16/setting-up-a-silverlight-4-development-environment/</link>
		<pubDate>Mon, 17 Jan 2011 03:51:31 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=373</guid>
		<description></description>
		<content:encoded><![CDATA[I had to run through a complete workstation setup recently including installation of Visual Studio and the Silverlight development tools so I wanted to write up a quick blog post to document the process.

I started off with a clean installation of Visual Studio 2010. This will install some project templates for Silverlight by default but unfortunately this will not be sufficient for development out of the box. At the minimum we will need to have the Silverlight developer runtime in addition to the project templates. Additionally, the templates included in the VS2010 installer are for an older 3.0 version of Silverlight. Not quite what we want.

To rectify all of this, we need to install the Silverlight 4 Tools for Visual studio, available from Microsoft <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=b3deb194-ca86-4fb6-a716-b67c2604a139&amp;displaylang=en">here</a>.

The installer includes the following components. This can be used to check for previously installed software that may have come from previous attempts to get everything installed. 

<ul>
<li>Silverlight 4 developer runtime</li>
<li>Silverlight 4 SDK (software development kit)</li>
<li>Update for Visual Studio 2010 and Visual Web Developer Express 2010 (KB982218)</li>
<li>Silverlight 4 Tools for Visual Studio 2010</li>
<li>WCF RIA Services V1.0 for Silverlight 4</li>
<li>F# Runtime for Silverlight 4</li>
</ul>

<a href="http://crmvoyager.files.wordpress.com/2011/01/sl4tools-install.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/sl4tools-install.png?w=300" alt="" title="sl4tools-install" width="300" height="252" class="aligncenter size-medium wp-image-375" /></a>
Although the developer runtime is listed among the components that this package should install, I've found that it must be installed separately as outlined below.

Grab the file Silverlight_Developer.exe from <a href="http://go.microsoft.com/fwlink/?LinkId=146060">here</a> and install.
<a href="http://crmvoyager.files.wordpress.com/2011/01/sl4-developer-install.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/sl4-developer-install.png?w=300" alt="" title="sl4-developer-install" width="300" height="146" class="aligncenter size-medium wp-image-378" /></a>

Once both of these packages have been installed you should be able to open Visual Studio and create a new Silverlight project as shown in the screenshot below.

<a href="http://crmvoyager.files.wordpress.com/2011/01/new-sl-project.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/new-sl-project.png?w=300" alt="" title="new-sl-project" width="300" height="203" class="aligncenter size-medium wp-image-379" /></a>

If everything has been installed properly you should get prompted for a project options dialog for setting up the new Silverlight project.
<a href="http://crmvoyager.files.wordpress.com/2011/01/new-sl4-app.png"><img src="http://crmvoyager.files.wordpress.com/2011/01/new-sl4-app.png?w=300" alt="" title="new-sl4-app" width="300" height="212" class="aligncenter size-medium wp-image-380" /></a>

Hopefully this helps you get up and running with your Silverlight development environment.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>373</wp:post_id>
		<wp:post_date>2011-01-16 19:51:31</wp:post_date>
		<wp:post_date_gmt>2011-01-17 03:51:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>setting-up-a-silverlight-4-development-environment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1295236291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Create a fully standalone Microsoft CRM 2011 environment on Amazon EC2</title>
		<link>http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/</link>
		<pubDate>Sun, 13 Feb 2011 07:57:22 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=403</guid>
		<description></description>
		<content:encoded><![CDATA[I set up a development environment that I can share in the cloud with my colleagues and partners for sharing ideas and quick demos. There are already a few articles out there that can help you get the latest CRM 2011 bits set up on a virtual machine, but I didn't find anything specific to EC2 or anything on installing everything on one server including Active Directory (so the whole setup is completely self-contained), so I'm writing up my experiences here for you. Keep in mind that we are installing a release candidate here, as the final bits aren't available yet.

Briefly, the steps are:

<ul>
<li>Create Windows Server 2008 EC2 instance</li>
<li>Promote instance to Active Directory domain controller</li>
<li>Install IIS+ASP.NET</li>
<li>Install Sql Server 2008 R2</li>
<li>Install CRM 2011</li>
</ul>

For this guide I'm assuming that you have met a few prerequisites:
<ul>
<li>An Amazon AWS account</li>
<li>An MSDN subscription or retail copy of SQL Server 2008 R2</li>
<li>The CRM 2011 RC <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c3f82c6f-c123-4e80-b9b2-ee422a16b91d">bits</a></li>
</ul>

Also, I won't belabor every individual installation step. I'll cover the high points necessary to get things installed so that CRM 2011 won't have any installation issues. This means I'll be accepting the default installation details for SQL Server. If you need to customize things feel free to do so, but I haven't tested other configurations so it may not work as expected.

There is a great guide <a href="http://crmscape.blogspot.com/2010/09/creating-ms-crm-2011-vm-part-1-of-2.html">here</a> for installing the CRM 2011 Beta on a local virtual machine. He mentions that it will take a full day to set up, but using Amazon's available Windows images, we should be able to get that time down to about 3 hours. If you already have an EC2 image set up with a password set and have the SQL Server installation media you might be able to do this in just over two hours.

<h2>Start the EC2 instance</h2>

Signing up for an Amazon Web Services account is a prerequisite for all of this. I won't go into it here, but there is now a nice <a href="https://console.aws.amazon.com">management console</a> for AWS, so starting up EC2 instances is now pretty easy using the web. The critical piece is getting the right server image the first time. We want the following three things:

<ul>
<li>An EBS based image</li>
<li>Windows Server 2008 64bit</li>
<li>Without SQL Server pre-installed</li>
</ul>
<a href="http://crmvoyager.files.wordpress.com/2011/02/ami.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/ami.png" alt="" title="ami" width="500" height="332" class="aligncenter size-full wp-image-415" /></a>
It is important not to use a SQL server image, as you will pay more per hour and it won't have Reporting Services installed anyway. 64bit is important because the CRM release candidate is 64bit only. EBS is important if you want to stop the server later without rebuilding everything. The alternative to EBS is AMI, which is backed by S3. In order to keep your changes (i.e. all of the stuff we are going to be installing) with an AMI instance will require you to "bundle" the instance every time new changes are made that you want to keep. I recommend EBS since it is much simpler and only slightly more expensive. Detailed instructions on launching a Windows instance and decrypting the admin password can be found <a href="http://www.michaelckennedy.net/blog/2010/01/31/BuildingWindowsMachinesInAmazonEC2.aspx">here</a>. I won't go into it here since it is beyond the scope of this article.

There is one critical configuration step to take before we proceed. By default, Windows EC2 instances have dynamic hostnames which are generated when the instance boots up. This will cause problems later on once we have promoted the box to the domain controller role and have SQL server installed. Forgetting this step is not fatal, but changing the host name on a domain controller can be a pain, so best to avoid having to do it altogether.

Amazon achieves the dynamic naming using a Windows service that is installed on the base image. We can configure the behavior of this service using a tool called ec2 service properties, which can be found in the start menu. All we need to do is uncheck the setting for "Set Computer Name" per the following screenshot:

<a href="http://crmvoyager.files.wordpress.com/2011/02/ec2-setname.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/ec2-setname.png" alt="" title="ec2-setname" width="482" height="571" class="aligncenter size-full wp-image-464" /></a>

<h2>Promote server to Active Directory domain controller</h2>

The first thing that I do (after changing the admin password - we'll be rebooting a few times) is promote the server to an Active Directory domain controller. CRM requires a domain, and since we are going for a self-contained installation, we have to promote the CRM server itself to the domain controller role. Ordinarily it is a bad idea for a domain controller to have any other server role, but for a development environment this will be fine. Additionally, promoting the server before we install SQL helps avoid additional configuration steps as a result of the server's name and user accounts changing.

Promoting a domain controller is done from the commandline by running

[sourcecode]
c:\&gt;dcpromo.exe 
[/sourcecode]

The promotion takes a while, so I grab the SQL Server install media from MSDN during this time. Transfer rates from MS are pretty fast and it should download by the time the DC is ready to go.

<a href="http://crmvoyager.files.wordpress.com/2011/02/newdomain.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/newdomain.png" alt="" title="newdomain" width="500" height="476" class="aligncenter size-full wp-image-433" /></a>

<a href="http://crmvoyager.files.wordpress.com/2011/02/domain-name.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/domain-name.png" alt="" title="domain name" width="500" height="475" class="aligncenter size-full wp-image-434" /></a>

We'll also need to install an ISO mounting program to install SQL Server. I use MagicDisc, which can be found <a href="http://www.magiciso.com/tutorials/miso-magicdisc-overview.htm">here</a>. Get the 64 bit Vista version for Server 2008. In the case that you are using Server 2008 R2, get the Windows 7 version.

You'll have to reboot after dcpromo has done its thing. Remember to use the new domain name when you log back into the server. The login will require domain\user now that the server is in a domain (it <em>is</em> the domain!).

<h2>Install SQL Server 2008 R2</h2>
Once the SQL installation media is ready, install MagicDisc and mount the ISO. Run the setup and select a new SQL installation. I used the defaults for everything, installing all services. The most important thing to get installed beyond SQL Server itself is SSRS, so at the very least make sure that Reporting Services is checked off. 

Since we have promoted the server to domain controller status, the default local accounts cannot be used as the SQL Server service accounts. Create a new non-admin user called 'sqlserver' and use that as the service account. 

<a href="http://crmvoyager.files.wordpress.com/2011/02/sqlserver-account.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/sqlserver-account.png" alt="" title="sqlserver-account" width="500" height="374" class="aligncenter size-full wp-image-422" /></a>

<a href="http://crmvoyager.files.wordpress.com/2011/02/sqlserver-user.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/sqlserver-user.png" alt="" title="sqlserver-user" width="500" height="375" class="aligncenter size-full wp-image-421" /></a>


Also note that the SQL Browser service needs to be manually enabled and started. This will be necessary later on in order for the CRM installer to find the SQL server instance.

<a href="http://crmvoyager.files.wordpress.com/2011/02/sql-default-install.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/sql-default-install.png" alt="" title="sql-default-install" width="500" height="376" class="aligncenter size-full wp-image-417" /></a>

<h2>Install IIS and ASP.NET</h2>

Installing IIS is accomplished by adding the Web server role to the server using the server management console. Just note that in addition to the IIS role we'll need ASP.NET, which must be selected separately. Once these two things are selected, the installer will install them both simultaneously.

<a href="http://crmvoyager.files.wordpress.com/2011/02/webserver-role.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/webserver-role.png" alt="" title="webserver-role" width="500" height="359" class="aligncenter size-full wp-image-418" /></a>

<a href="http://crmvoyager.files.wordpress.com/2011/02/asp-net.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/asp-net.png" alt="" title="asp.net" width="500" height="362" class="aligncenter size-full wp-image-419" /></a>

<h2>Install CRM 2011 Release Candidate</h2>

Now for the moment we have been waiting for. Run the CRM 2011 RC installer. If the .NET Framework 4.0 is not installed, the CRM installer will install it and ask you to reboot, which is a minor annoyance, but the installer will stop and wait for you to do it, so don't let it go unattended for too long or you'll never make it in under three hours! I used the defaults everywhere possible and set the service accounts to "Network Service". You'll have to browse for the SQL Server instance but the installer should find the SRSS server automatically.

<a href="http://crmvoyager.files.wordpress.com/2011/02/orgname.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/orgname.png" alt="" title="orgname" width="500" height="435" class="aligncenter size-full wp-image-429" /></a>

<a href="http://crmvoyager.files.wordpress.com/2011/02/service-accounts.png"><img src="http://crmvoyager.files.wordpress.com/2011/02/service-accounts.png" alt="" title="service accounts" width="500" height="432" class="aligncenter size-full wp-image-430" /></a>

I had a lot of missteps along the way to getting all of this installed, but on the last run I sailed through it in under 3 hours including getting the 4GB SQL Server installation media from MSDN. Hopefully you have similar results and you won't have to spend a whole day setting things up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>403</wp:post_id>
		<wp:post_date>2011-02-12 23:57:22</wp:post_date>
		<wp:post_date_gmt>2011-02-13 07:57:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>create-a-fully-standalone-crm-2011-environment-on-amazon-ec2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1297583843]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Ken Heiman]]></wp:comment_author>
			<wp:comment_author_email>kheiman61@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.195.171.156</wp:comment_author_IP>
			<wp:comment_date>2011-03-12 06:55:23</wp:comment_date>
			<wp:comment_date_gmt>2011-03-12 14:55:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Alternatively you can build a fully functional virtual CRM Server locally (using vmware or some such) and use Amazon's AMI tools to upload it once you have it working. You do have to fiddle with some conversion to change your VMDK to a format that works, but there is a tool available from VMWare that does it. I did this with Dynamics AX, and assume it would also work for CRM. The EBS-backed images are great for demos, etc, as you can just turn them on when needed, and preserve your changes when stopped.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299941723.9283";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1299960255]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299960255.6362";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Christian]]></wp:comment_author>
			<wp:comment_author_email>info@vogelgesang-consulting.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.vogelgesang-consulting.de</wp:comment_author_url>
			<wp:comment_author_IP>78.48.236.37</wp:comment_author_IP>
			<wp:comment_date>2011-06-05 04:25:39</wp:comment_date>
			<wp:comment_date_gmt>2011-06-05 12:25:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a ton for this useful blog! I was able to finish the CRM 2011 installation in 2,5 hrs! Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307276739.2952";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307285748]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1307285748.943";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[James Carter]]></wp:comment_author>
			<wp:comment_author_email>james84939@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.techyv.com</wp:comment_author_url>
			<wp:comment_author_IP>203.223.94.65</wp:comment_author_IP>
			<wp:comment_date>2011-07-16 11:55:17</wp:comment_date>
			<wp:comment_date_gmt>2011-07-16 19:55:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This article is a great one. It describes all clearly. I really liked it. It’s very helpful. I was looking for such articles. I have read a article here "http://www.techyv.com/article/amazon-ec2-22-steps"  which is almost like this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310846117.7456";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1319181853]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319181853.5666";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Accessing metadata in Microsoft CRM 2011</title>
		<link>http://crmvoyager.wordpress.com/2011/02/18/accessing-metadata-in-microsoft-crm-2011/</link>
		<pubDate>Fri, 18 Feb 2011 22:32:54 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=441</guid>
		<description></description>
		<content:encoded><![CDATA[I have been porting a lot of code over from CRM4 to the new CRM 2011 recently. I was investigating how to get some code converted that uses the MetadataService in CRM4 but I wasn't finding out much about it on the web.

If you are looking for the metadata service in 2011 you can stop now, because there isn't one. The new way of doing things is just to make your metadata requests to the main Web service.

The message classes are named the same, so the code will be mostly compatible once you set things up to use the 2011 Web service.

The namespaces you'll need in most cases will be:

[sourcecode langauge="csharp"]
// for service proxy type, IOrganizationService/OrganizationServiceProxy
using Microsoft.Xrm.Sdk.Client;

// needed for 'RetrieveXXXRequest' types
using Microsoft.Xrm.Sdk.Messages;

// needed for actual metadata descriptor types
using Microsoft.Xrm.Sdk.Metadata;
[/sourcecode]

For example, one of the things that I use metadata for is to get the text values that are in a CRM picklist. The following code snippet will query CRM 2011 metadata for the gendercode field on the contact entity and print out the values.

[sourcecode language="csharp"]
IOrganizationService serviceProxy = new OrganizationServiceProxy(
	Config.OrganizationUri,
	null,
	(System.Net.NetworkCredential)System.Net.CredentialCache.DefaultCredentials,
	null
);

RetrieveAttributeRequest request = new RetrieveAttributeRequest();
request.EntityLogicalName = &quot;contact&quot;;
request.LogicalName = &quot;gendercode&quot;;

RetrieveAttributeResponse response = ( RetrieveAttributeResponse )serviceProxy.Execute( request );
PicklistAttributeMetadata picklist = ( PicklistAttributeMetadata )response.AttributeMetadata;

foreach( OptionMetadata option in picklist.OptionSet.Options ) {
	Console.WriteLine( option.Label.UserLocalizedLabel.Label );
}

[/sourcecode]

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date>2011-02-18 14:32:54</wp:post_date>
		<wp:post_date_gmt>2011-02-18 22:32:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>accessing-metadata-in-microsoft-crm-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1298068376]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[Shweta Mittal]]></wp:comment_author>
			<wp:comment_author_email>shwetamittal_117@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.linkedin.com/pub/shweta-mittal/15/3a3/810</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.83</wp:comment_author_IP>
			<wp:comment_date>2011-04-08 18:32:14</wp:comment_date>
			<wp:comment_date_gmt>2011-04-09 02:32:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey thanks very much. I was running into an error while trying to run the execute command from RetrieveAttributeResponse. Your commented namespace references helped me a lot. 

// needed for 'RetrieveXXXRequest' types  

using Microsoft.Xrm.Sdk.Messages;  

Thanks again
Shweta]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302316334.1166";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1302318707]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302318707.7198";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[newcome]]></wp:comment_author>
			<wp:comment_author_email>djn125@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.127.182.33</wp:comment_author_IP>
			<wp:comment_date>2011-04-08 19:17:31</wp:comment_date>
			<wp:comment_date_gmt>2011-04-09 03:17:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@shweta glad that little detail helped you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>22</wp:comment_parent>
			<wp:comment_user_id>2496294</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1302319051]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302319051.4452";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>How to list process IDs for IIS7 worker processes</title>
		<link>http://crmvoyager.wordpress.com/2011/02/25/how-to-list-process-ids-for-iis7-worker-processes/</link>
		<pubDate>Fri, 25 Feb 2011 19:30:06 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=448</guid>
		<description></description>
		<content:encoded><![CDATA[In Microsoft IIS7, all management commands have been consolidated under the appcmd.exe commandline tool. In the past there was a collection of VBscripts that allowed you to script access to IIS.

One of the things that I need to do that can't be done in the GUI is to list which application pools are running under which w3wp.exe worker process instances. Using the Windows task manager will show you the process IDs but won't show you which application pools are being served by each. The inetmgr tool will show you the application pools but won't show you the process information.

Under IIS6 there was a script called iisapp.vbs that would show you the running w3wp processes, their PIDs and the application pool that they were serving. Under IIS7 this functionality has been merged into appcmd.exe.

Appcmd was not in the path for me, so I had to add it using:

[sourcecode]
c:\&gt; set path=%path%;C:\Windows\System32\inetsrv
[/sourcecode]

Then we can run
[sourcecode]
C:\Program Files (x86)\ICW&gt;appcmd list wp
[/sourcecode]

to get:

[sourcecode]
WP &quot;5260&quot; (applicationPool:CRMAppPool)
WP &quot;5736&quot; (applicationPool:SharePoint - 80)
WP &quot;4460&quot; (applicationPool:SecurityTokenServiceApplicationPool)
WP &quot;4700&quot; (applicationPool:2d129968e2144980a7614f288ac778fd)
WP &quot;5684&quot; (applicationPool:Sitecore6.0AppPool)
[/sourcecode]

Short and sweet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2011-02-25 11:30:06</wp:post_date>
		<wp:post_date_gmt>2011-02-25 19:30:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-list-process-ids-for-iis7-worker-processes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1298662206]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[jc]]></wp:comment_author>
			<wp:comment_author_email>cal_jc@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.160.37.15</wp:comment_author_IP>
			<wp:comment_date>2012-06-18 04:04:45</wp:comment_date>
			<wp:comment_date_gmt>2012-06-18 12:04:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[thanks - this was the command I was searching today and found here just what I was looking for]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340021086.0335";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1340038831]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340038831.8776";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Assembly binding redirection in ASP.NET</title>
		<link>http://crmvoyager.wordpress.com/2011/02/25/assembly-binding-redirection-in-asp-net/</link>
		<pubDate>Fri, 25 Feb 2011 20:07:05 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[When dealing with signed strongly-named assemblies in .NET, we've all come across the dreaded

[sourcecode]
BadImageFormatException &quot;An attempt was made to load a program with an incorrect format&quot;
[/sourcecode]

Or

[sourcecode]
System.IO.FileLoadException: Could not load file or assembly 'Utility, Version=1.1.0.2, Culture=neutral, PublicKeyToken=37dd581281d764f7' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)
[/sourcecode]

In the first case, we need to find the right dll for the platform that we are on, i.e. 64bit vs 32bit. In my case the first error led to the second, since once I found the right dll, of course the version number was newer, and I could not find the older version to download.

Of course in .NET desktop apps, we could add an assembly binding redirect to get the right .dll loaded up provided that we have it. In a Web application, it is just as easy, you just have to add a runtime section directly under the main configuration tag.

For example, I wanted to drop a different version of SQLite into my SiteCore installation, so I grabbed the <a href="http://sourceforge.net/projects/sqlite-dotnet2/files/SQLite%20for%20ADO.NET%202.0/">System.Data.SQLite binaries</a> and dropped the one that I wanted into SiteCore's \bin directory. Then I tried to load up the site and looked at the error message to see which version it was looking for. Once we know what it is looking for, we can write a binding redirection in the web.config file like this:

[sourcecode language="xml"]
 &lt;runtime&gt;
    &lt;assemblyBinding xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot;&gt;
      &lt;dependentAssembly&gt;
        &lt;assemblyIdentity name=&quot;System.Data.SQLite&quot;
                          publicKeyToken=&quot;db937bc2d44ff139&quot;
                          culture=&quot;neutral&quot; /&gt;
        &lt;bindingRedirect oldVersion=&quot;1.0.48.0&quot;
                         newVersion=&quot;1.0.66.0&quot;/&gt;
      &lt;/dependentAssembly&gt;
    &lt;/assemblyBinding&gt;
  &lt;/runtime&gt;
[/sourcecode]

Here is the <a href="http://msdn.microsoft.com/en-us/library/eftw1fys.aspx">documentation for bindingRedirect</a> from MSDN. It doesn't explicitly cover redirects in Web applications, and there is a lot of confusing information out on the web about this. Hopefully this post clears some of it up.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2011-02-25 12:07:05</wp:post_date>
		<wp:post_date_gmt>2011-02-25 20:07:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assembly-binding-redirection-in-asp-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1298664427]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using ASP.NET Web Parts in Sitecore CMS</title>
		<link>http://crmvoyager.wordpress.com/2011/04/01/using-asp-net-web-parts-in-sitecore-cms/</link>
		<pubDate>Sat, 02 Apr 2011 01:22:21 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=469</guid>
		<description></description>
		<content:encoded><![CDATA[I'm going to share with you a technique for re-using simple Microsoft ASP.NET Web Parts in content management systems other than SharePoint. I'll be using <a href="http://www.sitecore.net/">Sitecore </a>for this article but the technique should apply to DotNetNuke and others. This is useful for keeping a consistent library of Web components that can share the same code base. Of course, the limitation here is that if we use any SharePoint-specific code we'll have to either write separate parts or try to abstract out the vendor-specific code. In my case, I had some code to retrieve the logged-in user. I won't show that code in this post for simplicity, but later I'll show you a technique that I've used to allow pluggable authentication code so the code is reusable except for the very small part that touches SharePoint directly.

In this example I'm going to use a very simple Web Part that I've created to easily test and illustrate the concept and nothing more. Here is the code:

[sourcecode language="csharp"]
using System;
using System.Data;
using System.Collections.Generic;
using System.ComponentModel;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;

namespace WebParts
{
    [ToolboxItemAttribute(false)]
    public class IFramePart : WebPart
    {
        protected override void CreateChildControls()
        {
            this.Title = &quot;IFrame&quot;;
				HtmlGenericControl iframe = new HtmlGenericControl( &quot;iframe&quot; );
				iframe.Attributes.Add( &quot;src&quot;, &quot;http://www.google.com&quot;);
            Controls.Add(iframe);
            ChildControlsCreated = true;
        }
    }
}
[/sourcecode]

This Web Part contains an IFrame that points to Google. If we render this and see the Google home page we know it is working. Later on we can use <a href="http://crmvoyager.wordpress.com/2010/11/16/creating-configurable-web-part-properties/">Web Part configurable properties</a> to allow this url to be set using the design mode of ASP.NET Web Parts.

In Sitecore, in order to make this code available in the CMS, we'll have to create an App_Code folder under the site root and place the file there. Sitecore is an ASP.NET Web site, and its behavior is no different than one that you'd create in Visual Studio. That is, there are special folders under the site like App_Code, App_Config and App_Data. Speaking of App_Data, some version of SQL Server (Express works) must be installed in order to take advantage of Web Part personalization features. That is, the state of the Web Part (hidden, collapsed) will be persisted to a database under App_Data automatically if we use personalization features. In my example we will so double-check that SQL Server is available and started, and that the App_Data folder is present under the Sitecore root.

I'm going to create the Web Part UI in Sitecore as a sublayout. This is basically another name for an .ascx UserControl in Sitecore terminology. The code for the UserControl looks like this:

[sourcecode language="html"]
&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;true&quot; TargetSchema=&quot;http://schemas.microsoft.com/intellisense/ie5&quot; %&gt;
&lt;%@ register tagprefix=&quot;webParts&quot; Namespace=&quot;WebParts&quot;%&gt;

&lt;div&gt;
		&lt;asp:WebPartManager ID=&quot;WebPartManager1&quot; runat=&quot;server&quot;&gt;
		&lt;/asp:WebPartManager&gt;
	&lt;table&gt;
	&lt;tr&gt;&lt;td&gt;
	&lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; width=&quot;800px&quot; runat=&quot;server&quot;&gt;
		&lt;zonetemplate&gt;
			&lt;webParts:IFramePart Height=&quot;200px&quot;
				runat=&quot;server&quot;   
				id=&quot;IFramePart1&quot; 
				AllowZoneChange=&quot;true&quot;/&gt;         
		&lt;/zonetemplate&gt;
		
	&lt;/asp:WebPartZone&gt;
	
	&lt;/td&gt;
	&lt;td&gt;
	&lt;asp:EditorZone ID=&quot;EditorZone1&quot; runat=&quot;server&quot; &gt;
      &lt;ZoneTemplate&gt;
        &lt;asp:PropertyGridEditorPart Title=&quot;Edit Custom Properties&quot; ID=&quot;PropertyGridEditorPart1&quot; runat=&quot;server&quot; /&gt;
		
		&lt;asp:AppearanceEditorPart ID=&quot;AppearanceEditorPart1&quot; 
          runat=&quot;server&quot; /&gt;
        &lt;asp:LayoutEditorPart ID=&quot;LayoutEditorPart1&quot; 
          runat=&quot;server&quot; /&gt;
		&lt;asp:BehaviorEditorPart ID=&quot;BehaviorEditorPart1&quot; runat=&quot;server&quot; /&gt;
		
      &lt;/ZoneTemplate&gt;
    &lt;/asp:EditorZone&gt;
	&lt;/td&gt;&lt;/tr&gt;
	&lt;/table&gt;
	&lt;asp:Button runat=&quot;server&quot; onclick=&quot;Reset_Personalization&quot; Text=&quot;Reset Personalization&quot;/&gt;
	&lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; onclick=&quot;Enable_Edit&quot; Text=&quot;Enable Edit&quot;/&gt;
	&lt;script runat=&quot;server&quot;&gt;
	void Reset_Personalization( object sender, EventArgs e ) {
		WebPartManager1.Personalization.ResetPersonalizationState();
	}
	void Enable_Edit( object sender, EventArgs e ) {
		WebPartManager1.DisplayMode = WebPartManager.EditDisplayMode;
	}
	&lt;/script&gt;
    &lt;/div&gt;
[/sourcecode]


In order to add this code to the site, we'll have to create a new sublayout in the Sitecore manager view and browse to the new file under the Sitecore site on the filesystem. The sublayouts should end up under SitecoreWebsite\WebSite\Layouts.

There is some extra code here that I should explain now. The primary advantage of having a Web Part, in addition to code reuse, is that there are built-in provisions for editing the part at design time once it is in the page. By adding an EditorZone in addition to the required WebPartZone and WebPartManager we are able to enable this default editor behavior in the page. I've added a button at the bottom of the UserControl that enables edit mode.

In order to use this in a Sitecore layout, I applied the included SampleLayout to a Sitecore data object and added my custom control. Editing won't work in the Sitecore designer, so go back to the data object and choose "preview". In preview, all of the functionality of the WebPart should be available.

Here is what it looks like when we are finished:

<a href="http://crmvoyager.files.wordpress.com/2011/04/sc-webpart.jpg"><img src="http://crmvoyager.files.wordpress.com/2011/04/sc-webpart.jpg" alt="" title="sc-webpart" width="500" height="336" class="aligncenter size-full wp-image-476" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date>2011-04-01 17:22:21</wp:post_date>
		<wp:post_date_gmt>2011-04-02 01:22:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-asp-net-web-parts-in-sitecore-cms</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1301707343]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scripting Silverlight 4 applications with Javascript</title>
		<link>http://crmvoyager.wordpress.com/2011/04/12/scripting-silverlight-4-applications-with-javascript/</link>
		<pubDate>Tue, 12 Apr 2011 21:31:36 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=479</guid>
		<description></description>
		<content:encoded><![CDATA[I was improving the design of some Silverlight code recently where the application was designed to be controlled externally from another Silverlight application. I'll cover how to do this in two parts. The first part is exposing some API to the browser via the <a href="http://msdn.microsoft.com/en-us/library/cc645076(v=vs.95).aspx">Html bridge</a>.

In order to make a type scriptable in Silverlight all we need to do is add an attribute to the type definition and register it with the Html page. My code looks something like this:

[sourcecode language="csharp"]
[ScriptableType]
	public partial class MainPage : UserControl
	{
			
		public MainPage() {
			InitializeComponent();
			HtmlPage.RegisterScriptableObject(&quot;MainPage&quot;, this);
			
	...
[/sourcecode]

This code will register the class as scriptable on the page. Here is the method that I wanted to expose to Javascript:

[sourcecode language="csharp"]
	[ScriptableMember]
		public void SetEventByID( string in_eventID ) {		
				ApplicationState.SetEventByID( in_eventID );
		}
[/sourcecode]

Notice that we have marked this member with a ScriptableMemberAttribute. Since the type is already marked as a ScriptableType, this is not necessary, I've just shown it as an alternative to marking the entire type as scriptable, thus exposing all of its immediate (non-inherited) members.

For more details on exposing Silverlight code to Javascript, I highly recommend that you read <a href="http://msdn.microsoft.com/en-us/library/cc645085(v=vs.95).aspx">this MSDN article</a>.

The calling code in Javascript looks like this:
[sourcecode langauge="javascript"]
document.getElementById('silverlight').Content.MainPage.SetEventByID( '097346E8-9917-DD11-96BD-0003FF464654' );
[/sourcecode]

Note that we get the Silverlight host object on the page by ID (which happens to be 'silverlight' in this example) and access the type by its name via the Content attribute exposed by Silverlight.

In the next installment I'll show how we can call out to a Javascript function in the page for the other half of our Silverlight-to-Silverlight communication scheme.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>479</wp:post_id>
		<wp:post_date>2011-04-12 13:31:36</wp:post_date>
		<wp:post_date_gmt>2011-04-12 21:31:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scripting-silverlight-4-applications-with-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1302643897]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Handling errors with the CRM 2011 Web services API</title>
		<link>http://crmvoyager.wordpress.com/2011/04/13/handling-errors-with-the-crm-2011-web-services-api/</link>
		<pubDate>Wed, 13 Apr 2011 19:59:42 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=488</guid>
		<description></description>
		<content:encoded><![CDATA[Early on in my experiences with CRM programming I learned to do whatever I can to get meaningful error responses from the server. Nothing is more difficult than having a Web service call fail and not being able to tell what happened by looking at the stack trace. 

Since the CRM API is delivered using .NET Web services, we are crossing some process and protocol boundaries. In particular, CRM adheres to the SOAP standard of returning errors as <a href="http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383507">SOAP faults</a>.

In order to implement this feature with .NET exceptions, Microsoft has created a custom exception type - the SoapException. The meaningful data of the SOAP fault is contained in a field called SoapException.Detail.InnerXml. The issue here is that most of the time when the calling code is handling exceptions, we don't see this field since we are dealing with System.Exception types most of the time.

What I have been doing from the beginning is to rethrow the System.Web.Services.Protocols.SoapException as a System.Exception and include the Xml as the exception message. Consider the following error handler:

[sourcecode language="csharp"]
try {
	return DoCrmCall();
}
catch (System.Web.Services.Protocols.SoapException ex) {
	throw new Exception(ex.Detail.InnerXml, ex);
}
[/sourcecode]

When we see the exception in the calling code (the .NET service proxy) we get a System.Exception where the message contains the Xml from the SOAP fault. There may be better ways of handling the SOAP messages, but this method has been working well for me, and I thought I'd put it up for you guys to comment on, since I know that error messages are a hot button topic in CRM and Web services in general.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date>2011-04-13 11:59:42</wp:post_date>
		<wp:post_date_gmt>2011-04-13 19:59:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>handling-errors-with-the-crm-2011-web-services-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1302724783]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Programmatically executing workflows in CRM 2011</title>
		<link>http://crmvoyager.wordpress.com/2011/04/20/programmatically-executing-workflows-in-crm-2011/</link>
		<pubDate>Wed, 20 Apr 2011 16:52:47 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=490</guid>
		<description></description>
		<content:encoded><![CDATA[I came across some code recently that gave me pause, so I thought I'd explore it a little bit here.

We've recently converted a lot of code from CRM 4.0 to CRM 2011, and one of those pieces of code involved kicking off a Windows workflow. The following code snippet is right out of the CRM 2011 SDK:

[sourcecode language="csharp"]

using (_serviceProxy = new OrganizationServiceProxy(serverConfig.OrganizationUri,
    serverConfig.HomeRealmUri,
    serverConfig.Credentials,
    serverConfig.DeviceCredentials))
{
     // Create an ExecuteWorkflow request.
     ExecuteWorkflowRequest request = new ExecuteWorkflowRequest() {
         WorkflowId = _workflowId,
         EntityId = _leadId
     };
     Console.Write(&quot;Created ExecuteWorkflow request, &quot;);

     // Execute the workflow.
     ExecuteWorkflowResponse response =
        (ExecuteWorkflowResponse)_serviceProxy.Execute(request);

[/sourcecode]

I have paraphrased this code to illustrate my example more clearly. This is an example of a very typical workflow execution scenario. The thing that gave me pause was that I couldn't resolve the type ExecuteWorkflowRequest or ExecuteWorkflowResponse.

Looking more closely at the SDK example, I noticed the following at the top of the file:

[sourcecode language="csharp"]
// This namespace is found in Microsoft.Crm.Sdk.Proxy.dll assembly
// found in the SDK\bin folder.
using Microsoft.Crm.Sdk.Messages;
[/sourcecode]

So even though most of the other types are in the Microsoft.Xrm namespace, for some reason these types were left behind in Microsoft.Crm.

Hopefully this saves you some time.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date>2011-04-20 08:52:47</wp:post_date>
		<wp:post_date_gmt>2011-04-20 16:52:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>programmatically-executing-workflows-in-crm-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1303318368]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1303318370]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[tariq]]></wp:comment_author>
			<wp:comment_author_email>tariqnahmad@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.229.85.68</wp:comment_author_IP>
			<wp:comment_date>2011-12-05 06:58:49</wp:comment_date>
			<wp:comment_date_gmt>2011-12-05 14:58:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[very useful code for a newbie like me. many thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1323117821]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323117821.8939";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1323097130.0408";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Creating custom error pages in ASP.NET</title>
		<link>http://crmvoyager.wordpress.com/2011/04/20/creating-custom-error-pages-in-asp-net/</link>
		<pubDate>Wed, 20 Apr 2011 22:23:02 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=492</guid>
		<description></description>
		<content:encoded><![CDATA[How many times have you been in a client demo when your application throws an ugly stack trace up on the screen? Double points if it is up on the projector at about eight feet wide.

Now, I don't like to go overboard with excessive exception handling just to avoid the appearance of errors, but there is one thing that we can do easily that will still allow us to avoid swallowing exceptions all over and it is as easy as putting a few lines into your web.config.

[sourcecode language="xml"]
&lt;system.web&gt;
    &lt;customErrors mode=&quot;On&quot; defaultRedirect=&quot;Error.aspx&quot;/&gt;
    ...
&lt;/system.web&gt;
[/sourcecode]

This will redirect the browser to Error.aspx on any unhandled exception in the application. We can still do some error logging by looking at the results of:

[sourcecode language="csharp"]
Server.GetLastError()
[/sourcecode]

<a href="http://www.codeproject.com/KB/aspnet/Error_Page_for_aspnst.aspx">Here</a> are some more details about getting error details in the custom error page.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date>2011-04-20 14:23:02</wp:post_date>
		<wp:post_date_gmt>2011-04-20 22:23:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-custom-error-pages-in-asp-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1303338182]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1303338183]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Storing a Guid in an ASP.NET CheckBox control</title>
		<link>http://crmvoyager.wordpress.com/2011/04/22/storing-a-guid-in-an-asp-net-checkbox-control/</link>
		<pubDate>Sat, 23 Apr 2011 00:13:33 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=495</guid>
		<description></description>
		<content:encoded><![CDATA[I recently had to build a simple UI for listing out a set of Microsoft CRM entities to choose from. The natural way of presenting this to the user was to give them a list of items with some associated checkboxes for selection. I wanted to associate a CRM entity ID with each checkbox so that I could update the entity in CRM when the user submitted the form.

There are a number of different ways that this problem can be approached. One thing that I've done in the past is to use hidden form fields to store the data for postback. Another would be to use the entity Guid as the control ID. Yet another way would be to store a dictionary in ASP.NET session state, keyed by the control ID.

However, I wanted to create a more elegant solution to this problem by attaching a Guid field directly to the CheckBox control so that we'd have easy access to it during page postback.

My first thought was to create an ASP.NET server control that extends Microsoft's own CheckBox control. This is easy to do, as I show in the following code:

[sourcecode language="csharp"]
public class ExtendedCheckbox : CheckBox
{
	public Guid ItemID { get; set; }
	public ExtendedCheckbox() {}
}
[/sourcecode]

All we did was add a single property to the basic CheckBox control. This code will let us use the ExtendedCheckbox control on our pages and allow us to set a property called ItemID. For example:

[sourcecode language="html"]
&lt;djn:ExtendedCheckbox runat=&quot;server&quot; ItemID=&quot;&lt;%=myID%&gt;&quot;/&gt;
[/sourcecode]

However in order to be useful to us, the value of ItemID must persist when the page is posted back. When the user hits the 'submit' button on our page, we presumably want to do something useful with this ID like make a CRM request to modify the entity with the checkbox information. All of the built-in properties of the CheckBox use the ASP.NET ViewState mechanism to accomplish this. Unfortunately our custom property doesn't benefit from the base class's ViewState implicitly, so we have to make a change to our property as follows:

[sourcecode language="cshap"]
public Guid ItemID {
	get {
		if( ViewState[&quot;ItemID&quot;] != null )
			return ( Guid )ViewState[&quot;ItemID&quot;];
		return default( Guid );
	}
	set { ViewState[&quot;ItemID&quot;] = value; }
}
[/sourcecode]
 
So you can see that we used the base class's own ViewState collection to store our own data for the custom property. Now when we do a postback, the value of ItemID will be available to us.

To use this new control, we have to register it in the page where we are going to use it. In my case, the code for the new control is in the App_Code folder, so my @register directive looks like this:

[sourcecode language="html"]
&lt;%@ Register TagPrefix=&quot;djn&quot; namespace=&quot;Djn.Controls&quot; Assembly=&quot;__code&quot; %&gt;
[/sourcecode]

Note that we can reference the assembly generated from App_Code by using __code as the assembly reference.

We can now use the control just like a built in control, albeit with a new custom field. Accessing the ItemID later on in code is as simple as referencing the checkbox by name:

[sourcecode language="csharp"]
Guid id = myCustomCheckbox.ItemID
[/sourcecode]

Hopefully this gives you some ideas when doing custom ASP.NET work for your clients.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>495</wp:post_id>
		<wp:post_date>2011-04-22 16:13:33</wp:post_date>
		<wp:post_date_gmt>2011-04-23 00:13:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>storing-a-guid-in-an-asp-net-checkbox-control</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1303517613]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1303517615]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Starting SQL Server 2008 in single-user mode</title>
		<link>http://crmvoyager.wordpress.com/2011/04/26/starting-sql-server-2008-in-single-user-mode/</link>
		<pubDate>Tue, 26 Apr 2011 08:01:45 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=501</guid>
		<description></description>
		<content:encoded><![CDATA[I had to go through the rain dance of <a href="http://msdn.microsoft.com/en-us/library/dd207004.aspx">adding the Administrator account back</a> to SQL Server after there were no admin accounts that could log in. This can happen if the SQL server box has been removed from a domain and SQL Server was installed using domain accounts. If mixed mode authentication is disabled and you can't log in as the sa account, you'll have to start SQL up in single-user mode in order to connect to it.

Ordinarily you would give the -m flag to the sqlserver.exe executable and be on your merry way. However, this time around I ran into a perplexing issue. Take a look at the following screenshot to see the welcome that I received after running:

[sourcecode language="bash"]
C:\Program Files\Microsoft SQL Server\MSSQL10_50.SQL2008R2STD\MSSQL\Binn&gt;sqlservr.exe -m
[/sourcecode]

<a href="http://crmvoyager.files.wordpress.com/2011/04/sqlsserver.png"><img src="http://crmvoyager.files.wordpress.com/2011/04/sqlsserver.png" alt="" title="sqlsserver" width="500" height="347" class="aligncenter size-full wp-image-502" /></a>

Quite informative. I took a look in the services administrative tool to see what the service commandline was and discovered that there is an <a href="http://msdn.microsoft.com/en-us/library/ms190737.aspx">-s flag</a> that starts a named instance. I also have SQL Server Express running on this same machine, so there was a conflict.

I used the following command to get it started:
[sourcecode language="bash"]
C:\Program Files\Microsoft SQL Server\MSSQL10_50.SQL2008R2STD\MSSQL\Binn&gt;sqlservr.exe  -sSQL2008R2STD -m
[/sourcecode]

And you should be greeted by this:

[sourcecode]
2011-04-26 00:50:37.40 Server      Microsoft SQL Server 2008 R2 (RTM) - 10.50.16
00.1 (X64)
        Apr  2 2010 15:48:46
        Copyright (c) Microsoft Corporation
        Standard Edition (64-bit) on Windows NT 6.1 &lt;X64&gt; (Build 7600: )

2011-04-26 00:50:37.41 Server      (c) Microsoft Corporation.
2011-04-26 00:50:37.41 Server      All rights reserved.
2011-04-26 00:50:37.41 Server      Server process ID is 4064.
2011-04-26 00:50:37.41 Server      System Manufacturer: 'innotek GmbH', System M
odel: 'VirtualBox'.
2011-04-26 00:50:37.41 Server      Authentication mode is WINDOWS-ONLY.
[/sourcecode]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>501</wp:post_id>
		<wp:post_date>2011-04-26 00:01:45</wp:post_date>
		<wp:post_date_gmt>2011-04-26 08:01:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>starting-sql-server-2008-in-single-user-mode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1303804905]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1303804907]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[SQL Server 2008: Create administrator account without admin login]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://spazzarama.com/2012/03/06/sql-server-2008-create-administrator-account-without-admin-login/</wp:comment_author_url>
			<wp:comment_author_IP>173.231.45.66</wp:comment_author_IP>
			<wp:comment_date>2012-03-05 17:01:31</wp:comment_date>
			<wp:comment_date_gmt>2012-03-06 01:01:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Note: if you have issues starting in single user mode take a look at this post: http://crmvoyager.wordpress.com/2011/04/26/starting-sql-server-2008-in-single-user-mode/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331018679.1605";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330995691.6023";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331018678]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Crm 2011 Entity Metadata Browser</title>
		<link>http://crmvoyager.wordpress.com/2011/05/04/crm-2011-entity-metadata-browser/</link>
		<pubDate>Thu, 05 May 2011 03:49:34 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=507</guid>
		<description></description>
		<content:encoded><![CDATA[Any of you out there that have been working with Microsoft CRM for a while will remember that since CRM3.0 there has been a handy metadata browser built into the CRM server for quickly looking up things like field names and entity relationships. In CRM3.0 you just browsed to <tt>http://yourcrmserver/sdk/list.aspx</tt> and in 4.0 it was the same only we had to specify the organization name like http://yourcrmserver/orgname/sdk/list.aspx since 4.0 was a fully multi-tenant CRM solution.

I was really disappointed to see that the metadata browser was omitted from CRM 2011. However, Microsoft came through recently by including an <a href="http://blogs.msdn.com/b/crm/archive/2011/03/09/metadata-browser-for-microsoft-dynamics-crm-2011.aspx">all-new version of the metadata browser</a> in the latest CRM 2011 SDK.

The new browser is distributed as a managed CRM solution and can be installed and uninstalled just like any other CRM 2011 customization package. This is a really cool demonstration of what is possible with CRM solutions.

To install, grab the latest SDK from <a href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=420f0f05-c226-4194-b7e1-f23ceaa83b69">here</a> and extract. Open up your CRM installation and browse to the customizations as shown in the following screenshot:

<a href="http://crmvoyager.files.wordpress.com/2011/05/import-solution.png"><img src="http://crmvoyager.files.wordpress.com/2011/05/import-solution.png" alt="" title="import-solution" width="500" height="274" class="aligncenter size-full wp-image-508" /></a>

The file that we want to import is located in the sdk under:

[sourcecode]
sdk\tools\metadatabrowser\metadatabrowser_1_0_0_1_managed.zip
[/sourcecode]

<a href="http://crmvoyager.files.wordpress.com/2011/05/select-file.png"><img src="http://crmvoyager.files.wordpress.com/2011/05/select-file.png" alt="" title="select-file" width="500" height="366" class="aligncenter size-full wp-image-509" /></a>

Once the import is complete you can navigate to the browser by going to settings/customizations/metadata browser as shown below:

<a href="http://crmvoyager.files.wordpress.com/2011/05/browser.png"><img src="http://crmvoyager.files.wordpress.com/2011/05/browser.png" alt="" title="browser" width="500" height="270" class="aligncenter size-full wp-image-511" /></a>

Enjoy not having to poke around in the customizations menu and drill into the individual entities just to figure out what you named that field.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>507</wp:post_id>
		<wp:post_date>2011-05-04 19:49:34</wp:post_date>
		<wp:post_date_gmt>2011-05-05 03:49:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>crm-2011-entity-metadata-browser</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1304567375]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1304567376]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Managing CRM 2011 from PowerShell</title>
		<link>http://crmvoyager.wordpress.com/2011/05/17/managing-crm-2011-from-powershell/</link>
		<pubDate>Tue, 17 May 2011 08:24:55 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=518</guid>
		<description></description>
		<content:encoded><![CDATA[Starting with Windows Server 2008, Microsoft has stepped up its commitment to scriptable server management with the inclusion of PowerShell by default in the operating system. PowerShell enables the ease of scripting like batch files with the power of a scripting language like perl. Anyone that has done any extensive batch scripting will know what a pain it can be to do simple things like string handling.

Microsoft has doubled down on PowerShell in both CRM and SharePoint. Both are able to be managed using PowerShell snapins. What is a snapin? Snapins are what Microsoft calls script modules that can be loaded into PowerShell. The management features of CRM 2011 are supplied via a snapin.

The snapin will be installed on the CRM server by default, so to start powershell and load the snapin, we open up a console window and do the following:

[sourcecode]
C:\&gt; powershell
Windows PowerShell
Copyright (C) 2009 Microsoft Corporation. All rights reserved.

PS C:\Users\Administrator&gt; add-pssnapin Microsoft.CRM.Powershell

[/sourcecode]

Now we have access to all of the cmdlets (this is PowerShell terminology for a command tool).

For example, we can get information on the default CRM organization:

[sourcecode]

PS C:\Users\Administrator&gt; get-crmorganization


BaseCurrencyCode      : USD
BaseCurrencyName      : US Dollar
BaseCurrencyPrecision : 2
BaseCurrencySymbol    : $
BaseLanguageCode      : 1033
DatabaseName          : crmtest_MSCRM
FriendlyName          : CRM Test
Id                    : 04721a7a-e0f5-45dc-a4b7-57e02088a13a
SqlCollation          : Latin1_General_CI_AI
SqlServerName         : WIN-0VODKV30814\SQL2008R2STD
SqmIsEnabled          : False
SrsUrl                : http://win-0vodkv30814/reportserver_sql2008r2std
State                 : Enabled
UniqueName            : crmtest
Version               : 5.0.9688.34
ExtensionData         : System.Runtime.Serialization.ExtensionDataObject

[/sourcecode]

Here is a list of all of the <a href="http://msdn.microsoft.com/en-us/library/gg328563.aspx">available commands</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>518</wp:post_id>
		<wp:post_date>2011-05-17 00:24:55</wp:post_date>
		<wp:post_date_gmt>2011-05-17 08:24:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>managing-crm-2011-from-powershell</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1305620697]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1305620698]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using ActivityParty in CRM 2011</title>
		<link>http://crmvoyager.wordpress.com/2011/06/05/using-activityparty-in-crm-2011/</link>
		<pubDate>Sun, 05 Jun 2011 19:53:09 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=521</guid>
		<description></description>
		<content:encoded><![CDATA[I was writing some client code recently when I wanted to add a customer reference to a CRM campaignresponse entity instance. Using a simple EntityReference was giving me errors, so I looked to see what the data type was in CRM. Looking in the customisations screen, the type was 'Party List'. The CRM SDK docs say that we should be able to use ActivityParty[] or EntityCollection for the field value. 

The only info on ActivityParty that I found was <a href="http://crmentropy.blogspot.com/2009/04/using-activityparty-in-partylist-for.html">for CRM4</a>. Through trial and error I arrived at the following code:

[sourcecode language="csharp"]
Entity customer = new Entity(&quot;activityparty&quot;);
customer[&quot;partyid&quot; ]= new EntityReference( &quot;contact&quot;, in_contactID );
campaignResponse[&quot;customer&quot;] = new EntityCollection( new List(){ customer } );
[/sourcecode]

So what I had to do was create a list of entities that had an EntityReference field set that pointed to the contact. You cannot set the EntityReference directly on the campaignresponse, it is expecting an EntityCollection. Hopefully this saves you some time.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>521</wp:post_id>
		<wp:post_date>2011-06-05 11:53:09</wp:post_date>
		<wp:post_date_gmt>2011-06-05 19:53:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-activityparty-in-crm-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1307303589]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1307303589]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[Owen]]></wp:comment_author>
			<wp:comment_author_email>platdev@q.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>63.64.183.4</wp:comment_author_IP>
			<wp:comment_date>2011-06-17 09:45:26</wp:comment_date>
			<wp:comment_date_gmt>2011-06-17 17:45:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post, this not only saved some time, it probably saved my job!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308332726.7808";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1308333731]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308333731.3621";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[newcome]]></wp:comment_author>
			<wp:comment_author_email>djn125@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.180.86.146</wp:comment_author_IP>
			<wp:comment_date>2011-06-17 10:03:05</wp:comment_date>
			<wp:comment_date_gmt>2011-06-17 18:03:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, glad it helped you - can't get a much better endorsement than that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>33</wp:comment_parent>
			<wp:comment_user_id>2496294</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1308333785]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308333785.2633";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[Jose]]></wp:comment_author>
			<wp:comment_author_email>jcuello@infinityinfo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.112.83.130</wp:comment_author_IP>
			<wp:comment_date>2011-06-22 06:12:41</wp:comment_date>
			<wp:comment_date_gmt>2011-06-22 14:12:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks this also saved me a lot of time .]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308751961.4037";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1308756439]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308756439.4129";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[Bryan Freeman]]></wp:comment_author>
			<wp:comment_author_email>bryan.freeman@emc.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>128.221.197.57</wp:comment_author_IP>
			<wp:comment_date>2011-07-07 15:34:52</wp:comment_date>
			<wp:comment_date_gmt>2011-07-07 23:34:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post! This works perfectly and saved me a lot of trouble.

Bryan Freeman
EMC]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310081692.5862";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1310082299]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310082299.4427";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Jerry]]></wp:comment_author>
			<wp:comment_author_email>jerry@pmcworldwide.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.176.77.34</wp:comment_author_IP>
			<wp:comment_date>2011-07-19 11:03:47</wp:comment_date>
			<wp:comment_date_gmt>2011-07-19 19:03:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you! the sdk is so well documented (lol) that we have to resort to nugget hunting,

Thanks again for sharing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311102227.5606";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1311126566]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311126566.8678";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[Naveed Anwar]]></wp:comment_author>
			<wp:comment_author_email>naveed@navzone.us</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/naveedanwar777</wp:comment_author_url>
			<wp:comment_author_IP>99.117.130.3</wp:comment_author_IP>
			<wp:comment_date>2011-10-26 06:48:29</wp:comment_date>
			<wp:comment_date_gmt>2011-10-26 14:48:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks! this post saved me lots of time!

tweak: new EntityCollection(new List() { customer})]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1319640509.3209";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_post_as</wp:meta_key>
				<wp:meta_value><![CDATA[facebook]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_avatar</wp:meta_key>
				<wp:meta_value><![CDATA[http://graph.facebook.com/603787554/picture?type=large&_md5=eaa44255049afa2aea0ca7f28c194c59]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_foreign_user_id</wp:meta_key>
				<wp:meta_value><![CDATA[603787554]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1319775309]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1319775310.057";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[thoughtstufftom]]></wp:comment_author>
			<wp:comment_author_email>tom@thoughtstuff.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.152.0.82</wp:comment_author_IP>
			<wp:comment_date>2012-05-03 01:53:19</wp:comment_date>
			<wp:comment_date_gmt>2012-05-03 09:53:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just another +1 for really helpful post. Have wrestled with this for a couple of hours now, especially as I am new to CRM development. Thanks for the info!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1336038799.5639";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:15:"thoughtstufftom";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1336039272]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1336039272.28";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[anosy]]></wp:comment_author>
			<wp:comment_author_email>anonym@mail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.252.20.139</wp:comment_author_IP>
			<wp:comment_date>2012-06-11 09:08:52</wp:comment_date>
			<wp:comment_date_gmt>2012-06-11 17:08:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[tnx, your post helped me to understand:

// Create an Activity Party record for each Contact.
var activityParty1 = new ActivityParty
 {
    PartyId = new EntityReference(Contact.EntityLogicalName, contacts[0].ContactId.Value),
 };

http://msdn.microsoft.com/en-us/library/gg334289.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339434533.6854";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1339445077]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339445077.2655";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>82</wp:comment_id>
			<wp:comment_author><![CDATA[Haris]]></wp:comment_author>
			<wp:comment_author_email>haris_1232@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.63.131.34</wp:comment_author_IP>
			<wp:comment_date>2012-06-28 04:48:06</wp:comment_date>
			<wp:comment_date_gmt>2012-06-28 12:48:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah...Thanks alot. saved me a lot of time and effort INDEED!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340887687.4199";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1340902952]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340902952.2645";s:7:"message";s:46:"newcome changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"newcome";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Updating expired license key in CRM 2011</title>
		<link>http://crmvoyager.wordpress.com/2011/10/12/updating-expired-license-key-in-crm-2011/</link>
		<pubDate>Wed, 12 Oct 2011 21:04:07 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=528</guid>
		<description></description>
		<content:encoded><![CDATA[Like me, I'm sure that many of you are consultants who have clients running on a trial version of the CRM software. Also, like me, you probably have a lot of CRM installations for testing.

Here is how you can update the product key in Microsoft CRM 2011. Get the new key from the client if it is a retail key that they purchased or grab a key from your MSDN subscription if it is one of your testing instances. Once you have the key, just open up the CRM Deployment Manager and look for the option hightlighted below:

<a href="http://crmvoyager.files.wordpress.com/2011/10/crm-productkey.png"><img src="http://crmvoyager.files.wordpress.com/2011/10/crm-productkey.png" alt="" title="crm-productkey" width="500" height="313" class="aligncenter size-full wp-image-530" /></a>

Enter the key in the pop up window and enjoy life again!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>528</wp:post_id>
		<wp:post_date>2011-10-12 13:04:07</wp:post_date>
		<wp:post_date_gmt>2011-10-12 21:04:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>updating-expired-license-key-in-crm-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1318453448]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1318453449]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Running Microsoft CRM 4.0 apps when 2011 is installed</title>
		<link>http://crmvoyager.wordpress.com/2011/10/20/running-microsoft-crm-4-0-apps-when-2011-is-installed/</link>
		<pubDate>Fri, 21 Oct 2011 00:27:49 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=534</guid>
		<description></description>
		<content:encoded><![CDATA[Hey guys, back after a bit of a break in blogging. I've been super busy on a lot of projects.

Here is a little tip that I found out about when I tried to consolidate my development environment a bit. I'm now running a CRM 2011 server on my dev machine. Unfortunately I also still need to support clients that are on CRM 4.0.

I didn't think that this should be a problem since I have the 4.0 server on another box. However it seems that there is a conflict when the .NET runtime tries to locate the 4.0 SDK assembly. Since CRM 2011 supports backward compatibility by exposing support for the old SDK, it supplies its own version of Microsoft.Crm.Sdk.dll. The difference is that it is strongly signed with an updated version number of 5.0.0.0.

Here is the error that we get if we try to run a project compiled against the 4.0 SDK on a machine that has CRM 2011 installed (even though we are using the service endpoint of the CRM 4.0 server):

[sourcecode]
Error: Could not load file or assembly 'Microsoft.Crm.Sdk, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)		
[/sourcecode]

We can force the runtime to load our own supplied version of Microsoft.Crm.Sdk by overriding the publisher policy. This is done in App.config (or Web.config for a web application) using the following code:

[sourcecode language="xml"]
&lt;configuration&gt;
...
 &lt;runtime&gt;
    &lt;assemblyBinding xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot;&gt;
      &lt;dependentAssembly&gt;
        &lt;assemblyIdentity name=&quot;Microsoft.Crm.Sdk&quot; publicKeyToken=&quot;31bf3856ad364e35&quot; culture=&quot;neutral&quot; /&gt;
        &lt;publisherPolicy apply=&quot;no&quot; /&gt;
      &lt;/dependentAssembly&gt;
    &lt;/assemblyBinding&gt;
  &lt;/runtime&gt;
&lt;/configuration&gt;
[/sourcecode]

That's all there is to it. Now Fusion binding should find the correct assembly instead of trying to load the CRM 2011 out of the GAC.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>534</wp:post_id>
		<wp:post_date>2011-10-20 16:27:49</wp:post_date>
		<wp:post_date_gmt>2011-10-21 00:27:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>running-microsoft-crm-4-0-apps-when-2011-is-installed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1319156871]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1319156872]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>List of type differences between CRM4 and 2011</title>
		<link>http://crmvoyager.wordpress.com/2011/10/24/list-of-type-differences-between-crm4-and-2011/</link>
		<pubDate>Tue, 25 Oct 2011 02:19:50 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=538</guid>
		<description></description>
		<content:encoded><![CDATA[I'm posting this list since it seems to be difficult for me to find quickly in the SDK documentation. It is an incredibly handy list of type mappings that are useful for converting CRM4 code to 2011 or for (in my case) writing abstraction libraries that need to convert between the two different CRM versions.

Without further ado, the <a href="http://msdn.microsoft.com/en-us/library/gg328507.aspx">list is here</a>.

I'm including it inline here for quick reference:

  <table border='1px'>
          <tr>
            <th>
              <strong>AttributeTypeCode</strong>
            </th>
            <th>
									
										Microsoft Dynamics CRM 2011 type
								</th>
            <th>
									
										Microsoft Dynamics CRM 4.0 type
								</th>
          </tr>
          <tr>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">AttributeTypeCode</a>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">BigInt</a></p>
            </td>
            <td>
              <p>
                <strong>long</strong>
              </p>
            </td>
            <td>
              <p>N/A</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeTypeCode</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Boolean</a></p>
            </td>
            <td>
              <p>
                <strong>bool</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb928926.aspx">CrmBoolean</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributemetadata.attributetype.aspx">AttributeType</a>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">CalendarRules</a></p>
            </td>
            <td>
              <p>
                
              </p>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.entitycollection.aspx">EntityCollection</a> or <strong>CalendarRules</strong>[]</p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb956153.aspx">DynamicEntity</a>[] or <a href="http://msdn.microsoft.com/en-us/library/bb928506.aspx">calendarrule</a>[]</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Customer</a></p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.entityreference.aspx">EntityReference</a>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb955969.aspx">Customer</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">DateTime</a></p>
            </td>
            <td>
              <p>
                <strong>System.DateTime</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb928935.aspx">CrmDateTime</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Decimal</a></p>
            </td>
            <td>
              <p>
                <strong>decimal</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb928945.aspx">CrmDecimal</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Double</a></p>
            </td>
            <td>
              <p>
                <strong>double</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb928954.aspx">CrmFloat</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">EntityName</a></p>
            </td>
            <td>
              <p>
                <strong>string</strong>
              </p>
            </td>
            <td>
              <p>Attributes with <strong>ObjectTypeCode</strong> in <strong>DisplayMask</strong></p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Integer</a></p>
            </td>
            <td>
              <p>
                <strong>int</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb928972.aspx">CrmNumber</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Lookup</a></p>
            </td>
            <td>
              <p>
                <strong>EntityReference</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb957132.aspx">Lookup</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">ManagedProperty</a></p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.booleanmanagedproperty.aspx">BooleanManagedProperty</a>
              </p>
            </td>
            <td>
              <p>N/A</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Memo</a></p>
            </td>
            <td>
              <p>
                <strong>string</strong>
              </p>
            </td>
            <td>
              <p>
                <strong>System.String</strong>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Money</a></p>
            </td>
            <td>
              <p> <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.money.aspx">Money</a></p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb928963.aspx">CrmMoney</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Owner</a></p>
            </td>
            <td>
              <p>
                <strong>EntityReference</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb670715.aspx">Owner</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">PartyList</a></p>
            </td>
            <td>
              <p> <strong>EntityCollection</strong> or <strong>ActivityParty</strong>[]</p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb955715.aspx">activityparty[]</a> or <a href="http://msdn.microsoft.com/en-us/library/bb956153.aspx">DynamicEntity</a> []</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Picklist</a></p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.optionsetvalue.aspx">OptionSetValue</a>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb929048.aspx">Picklist</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>. <a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Uniqueidentifier</a> (Formerly <strong>PrimaryKey</strong>)</p>
            </td>
            <td>
              <p>
                <strong>System.Guid</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb956919.aspx">Key</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">String</a></p>
            </td>
            <td>
              <p>
                <strong>string</strong>
              </p>
            </td>
            <td>
              <p>
                <strong>System.String</strong>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">State</a></p>
            </td>
            <td>
              <p>
                <strong>OptionSetValue</strong> or enumeration generated for the entity state</p>
            </td>
            <td>
              <p>
                <em>EntityName</em>StateInfo</p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Status</a></p>
            </td>
            <td>
              <p>
                <strong>OptionSetValue</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb958198.aspx">Status</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<strong>Uniqueidentifier</strong></p>
            </td>
            <td>
              <p>
                <strong>System.Guid</strong>
              </p>
            </td>
            <td>
              <p>
                <a href="http://msdn.microsoft.com/en-us/library/bb890012.aspx">UniqueIdentifier</a>
              </p>
            </td>
          </tr>
          <tr>
            <td>
              <p>
                <strong>AttributeType</strong>.<a href="http://msdn.microsoft.com/en-us/library/microsoft.xrm.sdk.metadata.attributetypecode.aspx">Virtual</a></p>
            </td>
            <td>
              <p>Not used in records.</p>
            </td>
            <td>
              <p>Not used in records.</p>
            </td>
          </tr>
        </table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date>2011-10-24 18:19:50</wp:post_date>
		<wp:post_date_gmt>2011-10-25 02:19:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>list-of-type-differences-between-crm4-and-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1319509192]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1319509225]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Implementing a custom IOrganizationService</title>
		<link>http://crmvoyager.wordpress.com/2011/10/24/implementing-a-custom-iorganizationservice/</link>
		<pubDate>Tue, 25 Oct 2011 05:21:42 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=542</guid>
		<description></description>
		<content:encoded><![CDATA[This is a topic that I've wanted to talk about for a while. Some time ago I implemented a quick dummy CRM service for testing out code without having to run a full CRM server. The initial version I wrote was for CRM4, and unfortunately by some oversight, MS did not actually implement ICrmService in their actual server API. This created an awkward situation where I had to wrap the "real" CrmService in my own shim that implemented the actual interface.

Fortunately CRM 2011 gets this right, so we no longer have to worry about that. In fact, MS has shown us how to implement our own IOrganizationService right in the sample code. Just look under samplecode\cs\client\soaplogger\soaplogger in the SDK. In the example, the SOAP requests are logged from the intermediate IOrganizationService implementation. However I have found using custom services to provide dummy data very useful for testing.

Eventually I fleshed out the mock CRM service and released it as <a href="https://github.com/dnewcome/FakeCRM">FakeCRM</a>.

I'll be blogging more about this topic in the future, stay tuned!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>542</wp:post_id>
		<wp:post_date>2011-10-24 21:21:42</wp:post_date>
		<wp:post_date_gmt>2011-10-25 05:21:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>implementing-a-custom-iorganizationservice</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1319520102]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1319520103]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Digging into Microsoft CRM 4 DynamicEntity properties</title>
		<link>http://crmvoyager.wordpress.com/2011/10/25/digging-into-microsoft-crm-4-dynamicentity-properties/</link>
		<pubDate>Tue, 25 Oct 2011 08:02:40 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=544</guid>
		<description></description>
		<content:encoded><![CDATA[I've been meaning to write this post for a while. Even though CRM 4 is on the way out now, I still find myself working with clients that have legacy CRM 4 systems in production. Whether it is porting code or fixing bugs, CRM 4 is far from gone.

For those of you that don't know, the DynamicEntity type gives us a way to write code against an arbitrary CRM4 installation without having to generate a custom service proxy. We don't get the advantages of having all of the field names specified (early binding) but we don't have to recompile for different client installations in order to get access to new fields. 

However, despite of (or perhaps due to) the flexibility that DynamicEntities afford, there are some idiosyncratic things about how data property values are set and retrieved.

The hallmark of CRM 4 DyanmicEntities is the use of property classes for the data fields of the entity. These classes are all of the form XXXProperty, where XXX is something like String, CrmMoney, etc. CRM 2011 has largely done away with these special-purpose field wrappers, but in CRM 4 we are stuck with them. This wouldn't be so bad, but there are some inconsistencies in their use in the Microsoft CRM API. I'll go over a few cases that have bitten me in the past here.

<h3>1. Iteration</h3>

[sourcecode language="csharp"]
foreach( Property prop in m_entity.Properties ) {
    /// do something
}
[/sourcecode]

When we use a foreach construct, the IEnumerator implementation returns a Property type. Why is this inconsistent? Well it isn't from an API standpoint, but it was very confusing to me when I took a look at how the data was actually stored at runtime. Hint: there are no Property objects to be found in the backing store. They are created dynamically in the IEnumerator implementation. Take a look at the disassembly of IGetEnumerator():

[sourcecode language="csharp"]
private IEnumerator&lt;Property&gt; InternalGetEnumerator()
{
    List&lt;Property&gt; list = new List&lt;Property&gt;();
    foreach (KeyValuePair&lt;string, object&gt; pair in this._nameToPropertyValue)
    {
        list.Add(PropertyFactory.Instance.CreateInstance(pair.Key, pair.Value));
    }
    return list.GetEnumerator();
}
[/sourcecode]

We can see that the Property types are actually being created and returned on-the-fly from the internal data store _nameToPropertyValue.

<h3>2. Assignment</h3>

We can do assignment in one of two ways. In each case the value that we assign will be slightly different.

[sourcecode language="csharp"]
DyanmicEntity entity = new DynamicEntity();
entity.Properties.Add( new StringProperty( key, value ) );
[/sourcecode]

or

[sourcecode language="csharp"]
entity[ key ] = value;
[/sourcecode]

This example also applies to retrieval of the property value, that is, if we want to get the plain string without the StringProperty wrapper we would write:

[sourcecode language="csharp"]
string val = entity[ key ];
[/sourcecode]

I've noticed that when we make an assignment using a Property, the SDK library actually throws it away and only stores the inner value! This makes the property simply an ephemeral container that is effectively used only for conveying the field name. Check out disassembly for PropertyCollection.Add():

[sourcecode language="csharp"]
public void Add(Property property)
{
    this._nameToPropertyValue[property.Name] = property.GetValue();
}
[/sourcecode]
 
So when iterating and using Add() we are dealing with Property types. When using [] indexer notation we are dealing with the underlying value data type. I find this to be quite inconsistent and tedious, but as long as it is kept in mind, things work out ok.

Hopefully this clears up some confusion about the finer points of DynamicEntities for you!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>544</wp:post_id>
		<wp:post_date>2011-10-25 00:02:40</wp:post_date>
		<wp:post_date_gmt>2011-10-25 08:02:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>digging-into-microsoft-crm-4-dynamicentity-properties</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1319529761]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1319529762]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building multiple Visual Studio project configurations with msbuild</title>
		<link>http://crmvoyager.wordpress.com/2011/10/25/building-multiple-visual-studio-project-configurations-with-msbuild/</link>
		<pubDate>Tue, 25 Oct 2011 20:35:00 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=551</guid>
		<description></description>
		<content:encoded><![CDATA[I've been cleaning up a lot of projects lately, and one of the things that I really needed to get sorted out was build scripts for everything so that I had a repeatable way of obtaining correct binary builds of all of my dependencies. Typically I would use msbuild or NAnt to define how the code should be built, but I already had Visual Studio project files for the projects in question and I wanted them to be resilient to having the project files messed with in Visual studio.

Since Visual Studio project files are just custom msbuild definitions supplied by Microsoft, we can build them with msbuild on the commandline. I didn't want to do any custom tweaking of the files themselves, since I've had issues with losing my changes when someone decided to mess with the project file. What I really want out of the project file is the list of the files that need to be built. In the future I'm thinking about devising a way to create a wrapper msbuild project that looks at the parts of the Visual Studio file for the source file list and dependencies and defines its own build targets, but I'm too busy to try to get that working for now.

I've had all sorts of issues with trying to tweak msbuild files. Microsoft really came up with a powerful build system, but unfortunately it is hamstrung when trying to work with Visual studio. Some things I wanted to do in the past included getting a version number from the Assemblyinfo.cs file. This turned into a fiasco because of a silly limitation in the scope of property variables within the build targets.

After all of this fiddling I have come to the conclusion that, at least for now, the best way to get msbuild to build a Visual Studio project in a particular way is to manhandle the property settings on the commandline when calling msbuild.

Here is a sample batch file that I use to call msbuild. I want to set the .NET framework version and project configuration (debug/release) along with assertion of some conditional compilation flags used to generate different targeted versions of the code (CRM 4/CRM 2011):

[sourcecode]
set msbuild=C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe
set PointVersion=1.0.0
set outpathprop=/property:OutputPath=..\release\%PointVersion%\3.5

%msbuild% ^
    /property:Configuration=Debug ^
    /property:TargetFrameworkVersion=v3.5 ^
    %outpathprop%\CRM4\Debug ^
    /p:DefineConstants=&quot;CRM4&quot; ^
    CrmQuery\CrmQuery.csproj
[/sourcecode]

You can see that I set the output path to include the release version number and the framework version. I could parameterize this even further, but that's an exercise I'll leave to the reader or until I refine this technique next time around. Notice that I define a constant called 'CRM4' which is responsible for triggering some #ifdefs in the code that include CRM4-specific code. The beauty of this script is that now I can just add a section for each configuration that I need to build, run it once and I've got all the debug and release configurations of both CRM4 and 2011 versions of my project.

The file layout that I've chosen is:

[sourcecode]
\release\&lt;version&gt;\&lt;crmversion&gt;\&lt;configuration\
[/sourcecode]

Effectively, this build script controls the versioning of the build. I got tired of trying to do this by reading Assemblyinfo.cs, but we'll have to deal with this if we want to build a signed assembly.

The advantage of having a consistent folder structure is that we can now put the built artifacts into an assembly cache and use a dependency management script to copy them to a local lib\ folder under the project directory. We can manage multiple versions of the same assembly and not get completely confused as to which version we are referencing in the project. Let me know about your quick-and-dirty build techniques in the comments!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>551</wp:post_id>
		<wp:post_date>2011-10-25 12:35:00</wp:post_date>
		<wp:post_date_gmt>2011-10-25 20:35:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-multiple-visual-studio-project-configurations-with-msbuild</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1319574900]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1319574902]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using Active Directory domain accounts with CopSSH </title>
		<link>http://crmvoyager.wordpress.com/2011/10/27/using-active-directory-domain-accounts-with-copssh/</link>
		<pubDate>Fri, 28 Oct 2011 05:04:58 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=554</guid>
		<description></description>
		<content:encoded><![CDATA[If you're like me, you have clients behind firewalls and special development environments configured to mirror the client's environment for local testing. In my case a lot of my development environments have Microsoft CRM installed on them as a <a href="http://crmvoyager.wordpress.com/2011/02/12/create-a-fully-standalone-crm-2011-environment-on-amazon-ec2/">self-contained development environment</a> replete with Active Directory. This means that the virtual machine does not have any local accounts, only domain accounts. When I log in, I'm logging into a domain.

This works out pretty well most of the time. However, recently I wanted to use my <a href="http://crmvoyager.wordpress.com/2010/06/29/connecting-to-ms-crm-over-ssh/">SSH backhaul trick</a> to grab some data from a client's site back through their firewall. In order to get this to work, I had to do some extra experimentation with <a href="http://www.itefix.no/i2/copssh">CopSSH </a>user accounts and my <a href="https://www.virtualbox.org/">VirtualBox</a> settings.

First off, let me recap exactly what we are trying to do. It might be worthwhile to look at my <a href="http://crmvoyager.wordpress.com/2010/06/29/connecting-to-ms-crm-over-ssh/">SSH backhaul article</a> first, but what we are doing is running a secure shell server locally on the virtual machine and connecting to it from the remote server using <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">Putty</a>. This lets us access things like Microsoft CRM services on the remote machine for doing things like data dumps and schema upgrades. 

I'm using VirtualBox as my virtualization environment. I happen to be using NAT (network address translation) instead of bridged network connection. This means that there is one extra step that I didn't cover in my previous article, which I will outline here. The complete end-to-end scenario becomes:

Putty on remote server -&gt; firewall on my local network -&gt; VirtualBox NAT on my laptop -&gt; VirtualBox VM -&gt; CopSSH daemon

So I covered everything in the previous article except for setting up VirtualBox NAT. Fortunately it is very simple. We need to set up port forwarding across the NAT. To do this go into the network settings of the running virtual machine and look for the button that says "port forwarding". This lets you set up the host and guest port. I had to set the IP addresses rather than leave them blank, but what I did was set both to 0.0.0.0, which means "all addresses". Here is a screenshot:
<a href="http://crmvoyager.files.wordpress.com/2011/10/nat.png"><img src="http://crmvoyager.files.wordpress.com/2011/10/nat.png" alt="" title="nat" width="500" height="274" class="aligncenter size-full wp-image-562" /></a>
I'm mapping the SSH port 22 to port 2222 to avoid conflicts with the native sshd daemon that is running on my Ubuntu laptop.

Once we have this set up, we can test the connection locally by using Putty to connect to localhost on port 2222. We should get a login prompt from CopSSH.

Once we know that CopSSH is working and reachable via the port forwarded over the VirtualBox NAT, we need to authorize the user accounts that can log in via SSH. This is where we have to pay close attention. The thing that caused me a lot of pain was that the domain and account names are case sensitive. When adding the user account put the domain name in all capitals and pay attention to the case. Check out the screenshots:

<a href="http://crmvoyager.files.wordpress.com/2011/10/copssh-user.png"><img src="http://crmvoyager.files.wordpress.com/2011/10/copssh-user.png" alt="" title="copssh-user" width="500" height="420" class="aligncenter size-full wp-image-555" /></a>

One last thing: the user accounts will need the right to log on locally. Double check using the Local Security Policy tool (look in Administrative Tools):

<a href="http://crmvoyager.files.wordpress.com/2011/10/copssh-domain.png"><img src="http://crmvoyager.files.wordpress.com/2011/10/copssh-domain.png" alt="" title="copssh-domain" width="500" height="357" class="aligncenter size-full wp-image-556" /></a>

Test logging in with the domain account using domain\user:

<a href="http://crmvoyager.files.wordpress.com/2011/10/putty-login.png"><img src="http://crmvoyager.files.wordpress.com/2011/10/putty-login.png" alt="" title="putty-login" width="500" height="310" class="aligncenter size-full wp-image-557" /></a>

If login works, set up the tunnel the same way as in my previous article and rock on!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>554</wp:post_id>
		<wp:post_date>2011-10-27 21:04:58</wp:post_date>
		<wp:post_date_gmt>2011-10-28 05:04:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-active-directory-domain-accounts-with-copssh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1319778298]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1319778303]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configuration patterns in .NET</title>
		<link>http://crmvoyager.wordpress.com/2011/11/16/configuration-patterns-in-net/</link>
		<pubDate>Thu, 17 Nov 2011 02:55:47 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=568</guid>
		<description></description>
		<content:encoded><![CDATA[I have been meaning to write a post on configuration patterns in the .NET framework. Just about any app we write has some configuration data associated with it, and it sometimes gets ignored until the app is in production or at the very least until very late in the development cycle.

Microsoft provides a lot of options out of the box with the .NET framework, and even more through the <a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=22640">Configuration Management Application Block</a>. Most configuration concerns are the same whether it is a Windows app or a <a href="http://msdn.microsoft.com/en-us/library/ms178683.aspx">Web app</a>, but since there are a lot of different options, how do we pick what is best for our application?

Before we get into any .NET-specific items, here are some general guidelines that I have used in the past:

<h2>Don't rely on implicit configuration - allow the app to be explicitly configured programmatically</h2>

In the case of a library, we'll want to be able to override configuration as needed for testing and special use cases. For example, I have a library for accessing CRM that has a configuration section. In some cases I want to test different configurations against different CRM servers in my tests, so I need a way to override the configuration file. Yes, you can do this in a convoluted way using the .NET framework, but it is much better to bake this into the library design. Another scenario is doing data export/import between multiple servers. I have a few tools that use the library I mentioned to take data from one CRM installation and move it to another one. If the library only supported one configuration section we'd have to build this functionality into the library, which is a concern that shouldn't be part of the underlying, but of the application.

However, a very nice feature of a library is to have a default configuration, as well as a default configuration location. This means that if we provide a config specifically it will override everything else, but if not, we can make it easy on ourselves by providing some sensible defaults or by using the app.config file if it exists. This kind of fallthrough can be a little tricky, so it is worth thinking about up-front so that things go smoothly and predictably as development progresses. Configuration behavior is one of those things that is tough to change once it gets into production.

<h2>Use separate classes to hold configuration data</h2>

This should go without saying, but I'll say it anyway - don't put configuration variables into any other classes. Keep these concerns separate. If a class needs the configuration data, use composition to make the configuration object a private member. Another thing to watch out for is not using a configuration data in their own objects at all. I've seen a lot of project where configuration data was scattered all over the place. Don't do this!

I'm going to follow up with some code examples soon so stay tuned.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>568</wp:post_id>
		<wp:post_date>2011-11-16 18:55:47</wp:post_date>
		<wp:post_date_gmt>2011-11-17 02:55:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configuration-patterns-in-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1321498547]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1321498549]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Loading configuration from an alternative location in Microsoft .NET</title>
		<link>http://crmvoyager.wordpress.com/2011/11/17/loading-configuration-from-an-alternative-location-in-microsoft-net/</link>
		<pubDate>Thu, 17 Nov 2011 09:49:41 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=574</guid>
		<description></description>
		<content:encoded><![CDATA[I'm continuing my series of posts on configuration patterns in .NET. One of the things I had to do recently was to retrofit some code that I was writing to use an alternate configuration file. That is, I needed the ability to specify file from the commandline to grab a config section rather than having the .NET framework use the default app.config file that resides in the application directory.

It turns out that this is easy to do. There is a method on the ConfigurationManager called <a href="http://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.openmappedmachineconfiguration.aspx">OpenMappedMachineConfiguration</a> that will let you define another config file to use.

I have a little method for pulling in the configuration from a given file:

[sourcecode language="csharp"]
// MSCrmConfigurationSection is my custom config section type
MSCrmConfigurationSection GetConfig( string in_filename ) {
	ConfigurationFileMap fileMap = new ConfigurationFileMap( in_filename );
	Configuration configuration = System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration( fileMap );
	MSCrmConfigurationSection config = ( MSCrmConfigurationSection )configuration.GetSection( &quot;MSCrm&quot; );
	return config;
}
[/sourcecode]

A really nice feature that we get for free is that we can mix and match files at will, pulling configuration sections from different files. And, as a bonus, the app.config file still takes effect, so any assembly redirects or publisher policies that are defined there still work as usual. Pretty awesome.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>574</wp:post_id>
		<wp:post_date>2011-11-17 01:49:41</wp:post_date>
		<wp:post_date_gmt>2011-11-17 09:49:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>loading-configuration-from-an-alternative-location-in-microsoft-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1321523381]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1321523382]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Programmatically creating CRM 4 entity metadata</title>
		<link>http://crmvoyager.wordpress.com/2011/11/17/programmatically-creating-crm-4-entity-metadata/</link>
		<pubDate>Thu, 17 Nov 2011 09:27:28 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=576</guid>
		<description></description>
		<content:encoded><![CDATA[I have built a few tools to make life easier for myself. One of the tools that has proven itself invaluable is a metadata generator that I use to create a list of entities in a newly-created CRM bizorg.

Although the API supports most things that we'd want to do, there are a few tricky things that aren't that obvious from the documentation. I'm going to go into this in more detail in a future post, but there are a few key takeaways that I want to make sure I remember, so I'm posting them here now.

1) Creating an entity doesn't create any attributes other than the primary attribute.
Even if we give CRM a fully-populated entity metadata graph, only the primary attribute will be created on the CreateEntityRequest call.

2) An entity must have a primary attribute specified.
Creating the entity will fail if one string attribute is not provided and the primary attribute field is set to this entity. Both of these conditions must be met.

3) Lookup attributes cannot be created via the normal attribute metadata service call.
Entity references are created via a completely separate call.

4) Creating lookup attributes will fail if the referenced entity does not exist.

5) Entity names must adhere to the CRM naming prefix convention.
Entity names and field names must have a prefix and an underscore in order to be considered valid schema names.

6) Cryptic "Generic SQL" errors are often caused by missing labels
I'm still compiling a checklist of things that cause this frustrating error. Many times a call will fail with a SQL error, and it is very difficult to figure out what went wrong since there is no detail given.

7) Adding entities and fields don't require that we publish, but adding new picklist options does require a separate publish action before the items can be used.

8) Boolean fields must be specially treated and given labels for the true and false textual values.
If this is not done, the field will silently fail to be created.

That's a brief list for now. Expanding on all of these things will take a whole series of posts I'm sure. This stuff is way under-documented and is hard-won knowledge, so I'll be sure to give it a proper treatment here on the blog.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>576</wp:post_id>
		<wp:post_date>2011-11-17 01:27:28</wp:post_date>
		<wp:post_date_gmt>2011-11-17 09:27:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>programmatically-creating-crm-4-entity-metadata</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1321522048]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1321522048]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Configuration types in Microsoft .NET</title>
		<link>http://crmvoyager.wordpress.com/2011/11/17/configuration-types-in-microsoft-net/</link>
		<pubDate>Thu, 17 Nov 2011 09:40:58 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=579</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a quick post to outline the different ways that .NET custom config files can be written. The MSDN documentation does a bad job generally at giving examples of what the actual XML markup looks like in their examples. They go through all of the different types involved without showing what the desired markup looks like.

Briefly, by default, custom configuration uses XML attributes, unlike the AppSettings section, which uses a special configuration case of a key/value dictionary. I think that this is confusing and is not well treated in MSDN.

If we want a custom appSettings-like config like the following:
[sourcecode]
&lt;myAppSettings&gt;
      &lt;add key=&quot;NewKey0&quot; value=&quot;Monday, March 30, 
           2009 1:36:33 PM&quot; /&gt;
      &lt;add key=&quot;NewKey1&quot; value=&quot;Monday, March 30, 
           2009 1:36:40 PM&quot; /&gt;
  &lt;/myAppSettings&gt;
[/sourcecode]

We need to use a <a href="http://msdn.microsoft.com/en-us/library/system.configuration.dictionarysectionhandler.aspx">DictionarySectionHandler</a> instead of the usual ConfigurationSection.

Using a ConfigurationSection, our XML markup would look like this:

[sourcecode]
&lt;myAppSettings
     NewKey0=&quot;Monday, March 30, 2009 1:36:33 PM&quot;
     NewKey1=&quot;Monday, March 30, 2009 1:36:40 PM&quot;
/&gt;
[/sourcecode]

It is possible to create elements as children with some additional coding using ConfigurationElement.

There is a long CodeProject article on this stuff that uses C++ <a href="http://www.codeproject.com/KB/mcpp/WorkingWithConfigFiles.aspx">here</a> that I found useful and there is an extensive treatment on configuration <a href="http://www.codeproject.com/KB/dotnet/mysteriesofconfiguration.aspx">here</a>, but I've abridged things greatly here for my own reference. Hopefully this helps you too.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>579</wp:post_id>
		<wp:post_date>2011-11-17 01:40:58</wp:post_date>
		<wp:post_date_gmt>2011-11-17 09:40:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>configuration-types-in-microsoft-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1321522859]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1321522861]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Debugging Microsoft CRM &quot;Generic SQL Error&quot;</title>
		<link>http://crmvoyager.wordpress.com/2011/11/21/debugging-microsoft-crm-generic-sql-error/</link>
		<pubDate>Tue, 22 Nov 2011 04:16:38 +0000</pubDate>
		<dc:creator>newcome</dc:creator>
		<guid isPermaLink="false">http://crmvoyager.wordpress.com/?p=587</guid>
		<description></description>
		<content:encoded><![CDATA[Most of the time, when programming against the Microsoft CRM Web service, we get reasonable error messages. However, on occasion we get the inscrutable "Generic SQL Error". I used to solve these by trial and error or intuition, but it turns out that there is better way.

Using SQL Server profiler can give us the answers that we are looking for. Check out <a href="http://www.avanadeblog.com/xrm/2011/04/troubleshooting-crm-generic-sql-error.html">this blog post</a> for the details. Cheers.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>587</wp:post_id>
		<wp:post_date>2011-11-21 20:16:38</wp:post_date>
		<wp:post_date_gmt>2011-11-22 04:16:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>debugging-microsoft-crm-generic-sql-error</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2496294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1321935400]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1321935401]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
